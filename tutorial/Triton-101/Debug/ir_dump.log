// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc2)
    %c1024_i32_0 = arith.constant 1024 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c1024_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c1024_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<1024xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<1024xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<1024xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<1024xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<1024xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<1024xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<1024xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc8)
    %24 = tt.load %23, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %25 = arith.addf %21, %24 : tensor<1024xf32> loc(#loc10)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc11)
    %27 = tt.addptr %26, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc11)
    tt.store %27, %25, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @add_kernel) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc2)
    %c1024_i32_0 = arith.constant 1024 : i32 loc(#loc2)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc2)
    %2 = arith.extsi %c1024_i32_0 : i32 to i64 loc(#loc2)
    %3 = arith.muli %1, %2 : i64 loc(#loc2)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc2)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc2)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc2)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc2)
    %6 = arith.andi %4, %5 : i1 loc(#loc2)
    %7 = arith.muli %0, %c1024_i32_0 : i32 loc(#loc2)
    %8 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc3)
    %9 = tt.splat %7 : i32 -> tensor<1024xi32> loc(#loc4)
    %10 = arith.extsi %9 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %11 = arith.extsi %8 : tensor<1024xi32> to tensor<1024xi64> loc(#loc4)
    %12 = arith.addi %10, %11 : tensor<1024xi64> loc(#loc4)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc4)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc4)
    %cst = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc4)
    %13 = arith.cmpi sle, %12, %cst : tensor<1024xi64> loc(#loc4)
    %cst_3 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc4)
    %14 = arith.cmpi sge, %12, %cst_3 : tensor<1024xi64> loc(#loc4)
    %15 = arith.andi %13, %14 : tensor<1024xi1> loc(#loc4)
    %16 = arith.addi %9, %8 : tensor<1024xi32> loc(#loc4)
    %17 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc5)
    %18 = arith.cmpi slt, %16, %17 : tensor<1024xi32> loc(#loc5)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc6)
    %20 = tt.addptr %19, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc6)
    %21 = tt.load %20, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %22 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %23 = tt.addptr %22, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc8)
    %24 = tt.load %23, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %25 = arith.addf %21, %24 : tensor<1024xf32> loc(#loc10)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc11)
    %27 = tt.addptr %26, %16 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc11)
    tt.store %27, %25, %18 : tensor<1024x!tt.ptr<f32>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUPrintAddIOp (tritongpu-print-addiop) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %12 = ttg.convert_layout %11 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc8)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %15 = ttg.convert_layout %14 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc10)
    %17 = tt.load %15, %16 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %18 = ttg.convert_layout %17 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc10)
    %19 = arith.addf %12, %18 : tensor<1024xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %22 = ttg.convert_layout %21 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %23 = ttg.convert_layout %19 : tensor<1024xf32, #blocked> -> tensor<1024xf32, #blocked1> loc(#loc13)
    %24 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc13)
    tt.store %22, %23, %24 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %12 = ttg.convert_layout %11 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc8)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %15 = ttg.convert_layout %14 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc10)
    %17 = tt.load %15, %16 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %18 = ttg.convert_layout %17 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc10)
    %19 = arith.addf %12, %18 : tensor<1024xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %22 = ttg.convert_layout %21 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %23 = ttg.convert_layout %19 : tensor<1024xf32, #blocked> -> tensor<1024xf32, #blocked1> loc(#loc13)
    %24 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc13)
    tt.store %22, %23, %24 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %12 = ttg.convert_layout %11 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc8)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %15 = ttg.convert_layout %14 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc10)
    %17 = tt.load %15, %16 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %18 = ttg.convert_layout %17 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc10)
    %19 = arith.addf %12, %18 : tensor<1024xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %22 = ttg.convert_layout %21 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %23 = ttg.convert_layout %19 : tensor<1024xf32, #blocked> -> tensor<1024xf32, #blocked1> loc(#loc13)
    %24 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc13)
    tt.store %22, %23, %24 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = ttg.convert_layout %8 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %10 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc8)
    %11 = tt.load %9, %10 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %12 = ttg.convert_layout %11 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc8)
    %13 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.addptr %13, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %15 = ttg.convert_layout %14 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc10)
    %17 = tt.load %15, %16 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %18 = ttg.convert_layout %17 : tensor<1024xf32, #blocked1> -> tensor<1024xf32, #blocked> loc(#loc10)
    %19 = arith.addf %12, %18 : tensor<1024xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %22 = ttg.convert_layout %21 : tensor<1024x!tt.ptr<f32>, #blocked> -> tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %23 = ttg.convert_layout %19 : tensor<1024xf32, #blocked> -> tensor<1024xf32, #blocked1> loc(#loc13)
    %24 = ttg.convert_layout %6 : tensor<1024xi1, #blocked> -> tensor<1024xi1, #blocked1> loc(#loc13)
    tt.store %22, %23, %24 : tensor<1024x!tt.ptr<f32>, #blocked1> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonNvidiaGPUOptimizeDescriptorEncodingPass (triton-nvidia-optimize-descriptor-encoding) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonLoopAwareCSE (triton-loop-aware-cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUFuseNestedLoops (tritongpu-fuse-nested-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUAssignLatencies (tritongpu-assign-latencies) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUScheduleLoops (tritongpu-schedule-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// SoftwarePipeliner internal IR Dump After: LowerLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %4 = arith.addi %3, %2 : tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %13 = arith.addf %9, %12 : tensor<1024xf32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    tt.return
  }
}


// -----// SoftwarePipeliner internal IR Dump After: ExpandLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c1024_i32 : i32
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %4 = arith.addi %3, %2 : tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %13 = arith.addf %9, %12 : tensor<1024xf32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>, tensor<1024xi32, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
    tt.return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonLoopAwareCSE (triton-loop-aware-cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonNvidiaGPUOptimizeTMemLayoutsPass (triton-nvidia-optimize-tmem-layouts) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonNvidiaGPUInterleaveTMemPass (triton-nvidia-interleave-tmem) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonLoopAwareCSE (triton-loop-aware-cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUFenceInsertion (triton-nvidia-gpu-fence-insertion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before SCCP (sccp) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonNvidiaGPUMMALoweringPass (triton-nvidia-mma-lowering) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUAllocateWarpGroups (tritongpu-allocate-warp-groups) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before SCFToControlFlowPass (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonTensorMemoryAllocationPass (triton-tensor-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before TritonGPUProxyFenceInsertion (triton-nvidia-gpu-proxy-fence-insertion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %1 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %2 = llvm.mul %1, %0 : i32 loc(#loc3)
    %3 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %4 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %5 = llvm.mlir.constant(127 : i32) : i32 loc(#loc4)
    %6 = llvm.and %4, %5 : i32 loc(#loc4)
    %7 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %8 = llvm.urem %6, %7 : i32 loc(#loc4)
    %9 = llvm.udiv %6, %7 : i32 loc(#loc4)
    %10 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %11 = nvgpu.cluster_id loc(#loc4)
    %12 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %14 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %15 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %16 = llvm.shl %8, %15 : i32 loc(#loc4)
    %17 = llvm.or %14, %16 : i32 loc(#loc4)
    %18 = llvm.mlir.constant(5 : i32) : i32 loc(#loc4)
    %19 = llvm.shl %9, %18 : i32 loc(#loc4)
    %20 = llvm.or %17, %19 : i32 loc(#loc4)
    %21 = llvm.mlir.constant(7 : i32) : i32 loc(#loc4)
    %22 = llvm.shl %10, %21 : i32 loc(#loc4)
    %23 = llvm.or %20, %22 : i32 loc(#loc4)
    %24 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %25 = llvm.mlir.constant(127 : i32) : i32 loc(#loc4)
    %26 = llvm.and %23, %25 : i32 loc(#loc4)
    %27 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %28 = llvm.shl %26, %27 : i32 loc(#loc4)
    %29 = llvm.xor %24, %28 : i32 loc(#loc4)
    %30 = llvm.xor %13, %29 : i32 loc(#loc4)
    %31 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %32 = llvm.xor %30, %31 : i32 loc(#loc4)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %34 = llvm.xor %30, %33 : i32 loc(#loc4)
    %35 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %36 = llvm.xor %30, %35 : i32 loc(#loc4)
    %37 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %38 = llvm.xor %30, %37 : i32 loc(#loc4)
    %39 = llvm.mlir.constant(512 : i32) : i32 loc(#loc4)
    %40 = llvm.xor %30, %39 : i32 loc(#loc4)
    %41 = llvm.mlir.constant(513 : i32) : i32 loc(#loc4)
    %42 = llvm.xor %30, %41 : i32 loc(#loc4)
    %43 = llvm.mlir.constant(514 : i32) : i32 loc(#loc4)
    %44 = llvm.xor %30, %43 : i32 loc(#loc4)
    %45 = llvm.mlir.constant(515 : i32) : i32 loc(#loc4)
    %46 = llvm.xor %30, %45 : i32 loc(#loc4)
    %47 = llvm.add %32, %3 : i32 loc(#loc4)
    %48 = llvm.add %34, %3 : i32 loc(#loc4)
    %49 = llvm.add %36, %3 : i32 loc(#loc4)
    %50 = llvm.add %38, %3 : i32 loc(#loc4)
    %51 = llvm.add %40, %3 : i32 loc(#loc4)
    %52 = llvm.add %42, %3 : i32 loc(#loc4)
    %53 = llvm.add %44, %3 : i32 loc(#loc4)
    %54 = llvm.add %46, %3 : i32 loc(#loc4)
    %55 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc4)
    %56 = llvm.insertvalue %47, %55[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %57 = llvm.insertvalue %48, %56[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %58 = llvm.insertvalue %49, %57[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %59 = llvm.insertvalue %50, %58[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %60 = llvm.insertvalue %51, %59[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %61 = llvm.insertvalue %52, %60[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %62 = llvm.insertvalue %53, %61[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %63 = llvm.insertvalue %54, %62[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc4)
    %64 = llvm.bitcast %2 : i32 to i32 loc(#loc5)
    %65 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %66 = llvm.insertvalue %64, %65[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %67 = llvm.insertvalue %64, %66[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %68 = llvm.insertvalue %64, %67[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %69 = llvm.insertvalue %64, %68[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %70 = llvm.insertvalue %64, %69[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %71 = llvm.insertvalue %64, %70[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %72 = llvm.insertvalue %64, %71[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %73 = llvm.insertvalue %64, %72[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %74 = llvm.extractvalue %73[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %75 = llvm.extractvalue %73[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %76 = llvm.extractvalue %73[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %77 = llvm.extractvalue %73[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %78 = llvm.extractvalue %73[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %79 = llvm.extractvalue %73[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %80 = llvm.extractvalue %73[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %81 = llvm.extractvalue %73[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %82 = llvm.extractvalue %63[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %83 = llvm.extractvalue %63[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %84 = llvm.extractvalue %63[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %85 = llvm.extractvalue %63[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %86 = llvm.extractvalue %63[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %87 = llvm.extractvalue %63[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %88 = llvm.extractvalue %63[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %89 = llvm.extractvalue %63[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %90 = llvm.add %74, %82 : i32 loc(#loc5)
    %91 = llvm.add %75, %83 : i32 loc(#loc5)
    %92 = llvm.add %76, %84 : i32 loc(#loc5)
    %93 = llvm.add %77, %85 : i32 loc(#loc5)
    %94 = llvm.add %78, %86 : i32 loc(#loc5)
    %95 = llvm.add %79, %87 : i32 loc(#loc5)
    %96 = llvm.add %80, %88 : i32 loc(#loc5)
    %97 = llvm.add %81, %89 : i32 loc(#loc5)
    %98 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %99 = llvm.insertvalue %90, %98[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %100 = llvm.insertvalue %91, %99[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %101 = llvm.insertvalue %92, %100[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %102 = llvm.insertvalue %93, %101[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %103 = llvm.insertvalue %94, %102[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %104 = llvm.insertvalue %95, %103[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %105 = llvm.insertvalue %96, %104[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %106 = llvm.insertvalue %97, %105[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %107 = llvm.bitcast %arg3 : i32 to i32 loc(#loc6)
    %108 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %109 = llvm.insertvalue %107, %108[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %110 = llvm.insertvalue %107, %109[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %111 = llvm.insertvalue %107, %110[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %112 = llvm.insertvalue %107, %111[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %113 = llvm.insertvalue %107, %112[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %114 = llvm.insertvalue %107, %113[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %115 = llvm.insertvalue %107, %114[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %116 = llvm.insertvalue %107, %115[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %117 = llvm.extractvalue %106[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %118 = llvm.extractvalue %106[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %119 = llvm.extractvalue %106[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %120 = llvm.extractvalue %106[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %121 = llvm.extractvalue %106[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %122 = llvm.extractvalue %106[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %123 = llvm.extractvalue %106[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %124 = llvm.extractvalue %106[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %125 = llvm.extractvalue %116[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %126 = llvm.extractvalue %116[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %127 = llvm.extractvalue %116[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %128 = llvm.extractvalue %116[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %129 = llvm.extractvalue %116[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %130 = llvm.extractvalue %116[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %131 = llvm.extractvalue %116[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %132 = llvm.extractvalue %116[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %133 = llvm.icmp "slt" %117, %125 : i32 loc(#loc6)
    %134 = llvm.icmp "slt" %118, %126 : i32 loc(#loc6)
    %135 = llvm.icmp "slt" %119, %127 : i32 loc(#loc6)
    %136 = llvm.icmp "slt" %120, %128 : i32 loc(#loc6)
    %137 = llvm.icmp "slt" %121, %129 : i32 loc(#loc6)
    %138 = llvm.icmp "slt" %122, %130 : i32 loc(#loc6)
    %139 = llvm.icmp "slt" %123, %131 : i32 loc(#loc6)
    %140 = llvm.icmp "slt" %124, %132 : i32 loc(#loc6)
    %141 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc6)
    %142 = llvm.insertvalue %133, %141[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %143 = llvm.insertvalue %133, %142[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %144 = llvm.insertvalue %133, %143[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %145 = llvm.insertvalue %133, %144[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %146 = llvm.insertvalue %137, %145[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %147 = llvm.insertvalue %137, %146[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %148 = llvm.insertvalue %137, %147[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %149 = llvm.insertvalue %137, %148[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc6)
    %150 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc7)
    %151 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %152 = llvm.insertvalue %150, %151[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %153 = llvm.insertvalue %150, %152[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %154 = llvm.insertvalue %150, %153[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %155 = llvm.insertvalue %150, %154[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %156 = llvm.insertvalue %150, %155[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %157 = llvm.insertvalue %150, %156[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %158 = llvm.insertvalue %150, %157[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %159 = llvm.insertvalue %150, %158[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %160 = llvm.extractvalue %159[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %161 = llvm.extractvalue %159[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %162 = llvm.extractvalue %159[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %163 = llvm.extractvalue %159[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %164 = llvm.extractvalue %159[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %165 = llvm.extractvalue %159[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %166 = llvm.extractvalue %159[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %167 = llvm.extractvalue %159[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %168 = llvm.extractvalue %106[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %169 = llvm.extractvalue %106[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %170 = llvm.extractvalue %106[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %171 = llvm.extractvalue %106[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %172 = llvm.extractvalue %106[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %173 = llvm.extractvalue %106[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %174 = llvm.extractvalue %106[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %175 = llvm.extractvalue %106[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %176 = llvm.getelementptr %160[%168] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %177 = llvm.getelementptr %161[%169] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %178 = llvm.getelementptr %162[%170] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %179 = llvm.getelementptr %163[%171] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %180 = llvm.getelementptr %164[%172] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %181 = llvm.getelementptr %165[%173] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %182 = llvm.getelementptr %166[%174] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %183 = llvm.getelementptr %167[%175] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %184 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc7)
    %185 = llvm.insertvalue %176, %184[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %186 = llvm.insertvalue %177, %185[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %187 = llvm.insertvalue %178, %186[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %188 = llvm.insertvalue %179, %187[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %189 = llvm.insertvalue %180, %188[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %190 = llvm.insertvalue %181, %189[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %191 = llvm.insertvalue %182, %190[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %192 = llvm.insertvalue %183, %191[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc7)
    %193 = llvm.extractvalue %192[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %194 = llvm.extractvalue %192[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %195 = llvm.extractvalue %192[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %196 = llvm.extractvalue %192[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %197 = llvm.extractvalue %192[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %198 = llvm.extractvalue %192[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %199 = llvm.extractvalue %192[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %200 = llvm.extractvalue %192[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc8)
    %201 = llvm.extractvalue %149[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %202 = llvm.extractvalue %149[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %203 = llvm.extractvalue %149[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %204 = llvm.extractvalue %149[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %205 = llvm.extractvalue %149[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %206 = llvm.extractvalue %149[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %207 = llvm.extractvalue %149[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %208 = llvm.extractvalue %149[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc8)
    %209 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %193, %201 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %210 = llvm.extractvalue %209[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %211 = llvm.bitcast %210 : i32 to vector<1xf32> loc(#loc8)
    %212 = llvm.extractvalue %209[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %213 = llvm.bitcast %212 : i32 to vector<1xf32> loc(#loc8)
    %214 = llvm.extractvalue %209[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %215 = llvm.bitcast %214 : i32 to vector<1xf32> loc(#loc8)
    %216 = llvm.extractvalue %209[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %217 = llvm.bitcast %216 : i32 to vector<1xf32> loc(#loc8)
    %218 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %219 = llvm.extractelement %211[%218 : i32] : vector<1xf32> loc(#loc8)
    %220 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %221 = llvm.extractelement %213[%220 : i32] : vector<1xf32> loc(#loc8)
    %222 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %223 = llvm.extractelement %215[%222 : i32] : vector<1xf32> loc(#loc8)
    %224 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %225 = llvm.extractelement %217[%224 : i32] : vector<1xf32> loc(#loc8)
    %226 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %197, %205 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %227 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %228 = llvm.bitcast %227 : i32 to vector<1xf32> loc(#loc8)
    %229 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %230 = llvm.bitcast %229 : i32 to vector<1xf32> loc(#loc8)
    %231 = llvm.extractvalue %226[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %232 = llvm.bitcast %231 : i32 to vector<1xf32> loc(#loc8)
    %233 = llvm.extractvalue %226[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %234 = llvm.bitcast %233 : i32 to vector<1xf32> loc(#loc8)
    %235 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %236 = llvm.extractelement %228[%235 : i32] : vector<1xf32> loc(#loc8)
    %237 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %238 = llvm.extractelement %230[%237 : i32] : vector<1xf32> loc(#loc8)
    %239 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %240 = llvm.extractelement %232[%239 : i32] : vector<1xf32> loc(#loc8)
    %241 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %242 = llvm.extractelement %234[%241 : i32] : vector<1xf32> loc(#loc8)
    %243 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc8)
    %244 = llvm.insertvalue %219, %243[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %245 = llvm.insertvalue %221, %244[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %246 = llvm.insertvalue %223, %245[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %247 = llvm.insertvalue %225, %246[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %248 = llvm.insertvalue %236, %247[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %249 = llvm.insertvalue %238, %248[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %250 = llvm.insertvalue %240, %249[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %251 = llvm.insertvalue %242, %250[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc8)
    %252 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc9)
    %253 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc9)
    %254 = llvm.insertvalue %252, %253[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %255 = llvm.insertvalue %252, %254[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %256 = llvm.insertvalue %252, %255[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %257 = llvm.insertvalue %252, %256[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %258 = llvm.insertvalue %252, %257[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %259 = llvm.insertvalue %252, %258[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %260 = llvm.insertvalue %252, %259[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %261 = llvm.insertvalue %252, %260[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %262 = llvm.extractvalue %261[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %263 = llvm.extractvalue %261[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %264 = llvm.extractvalue %261[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %265 = llvm.extractvalue %261[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %266 = llvm.extractvalue %261[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %267 = llvm.extractvalue %261[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %268 = llvm.extractvalue %261[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %269 = llvm.extractvalue %261[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %270 = llvm.extractvalue %106[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %271 = llvm.extractvalue %106[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %272 = llvm.extractvalue %106[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %273 = llvm.extractvalue %106[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %274 = llvm.extractvalue %106[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %275 = llvm.extractvalue %106[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %276 = llvm.extractvalue %106[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %277 = llvm.extractvalue %106[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %278 = llvm.getelementptr %262[%270] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %279 = llvm.getelementptr %263[%271] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %280 = llvm.getelementptr %264[%272] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %281 = llvm.getelementptr %265[%273] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %282 = llvm.getelementptr %266[%274] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %283 = llvm.getelementptr %267[%275] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %284 = llvm.getelementptr %268[%276] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %285 = llvm.getelementptr %269[%277] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %286 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc9)
    %287 = llvm.insertvalue %278, %286[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %288 = llvm.insertvalue %279, %287[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %289 = llvm.insertvalue %280, %288[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %290 = llvm.insertvalue %281, %289[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %291 = llvm.insertvalue %282, %290[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %292 = llvm.insertvalue %283, %291[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %293 = llvm.insertvalue %284, %292[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %294 = llvm.insertvalue %285, %293[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc9)
    %295 = llvm.extractvalue %294[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %296 = llvm.extractvalue %294[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %297 = llvm.extractvalue %294[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %298 = llvm.extractvalue %294[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %299 = llvm.extractvalue %294[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %300 = llvm.extractvalue %294[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %301 = llvm.extractvalue %294[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %302 = llvm.extractvalue %294[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc10)
    %303 = llvm.extractvalue %149[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %304 = llvm.extractvalue %149[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %305 = llvm.extractvalue %149[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %306 = llvm.extractvalue %149[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %307 = llvm.extractvalue %149[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %308 = llvm.extractvalue %149[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %309 = llvm.extractvalue %149[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %310 = llvm.extractvalue %149[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc10)
    %311 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %295, %303 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %312 = llvm.extractvalue %311[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %313 = llvm.bitcast %312 : i32 to vector<1xf32> loc(#loc10)
    %314 = llvm.extractvalue %311[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %315 = llvm.bitcast %314 : i32 to vector<1xf32> loc(#loc10)
    %316 = llvm.extractvalue %311[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %317 = llvm.bitcast %316 : i32 to vector<1xf32> loc(#loc10)
    %318 = llvm.extractvalue %311[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %319 = llvm.bitcast %318 : i32 to vector<1xf32> loc(#loc10)
    %320 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %321 = llvm.extractelement %313[%320 : i32] : vector<1xf32> loc(#loc10)
    %322 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %323 = llvm.extractelement %315[%322 : i32] : vector<1xf32> loc(#loc10)
    %324 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %325 = llvm.extractelement %317[%324 : i32] : vector<1xf32> loc(#loc10)
    %326 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %327 = llvm.extractelement %319[%326 : i32] : vector<1xf32> loc(#loc10)
    %328 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %299, %307 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %329 = llvm.extractvalue %328[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %330 = llvm.bitcast %329 : i32 to vector<1xf32> loc(#loc10)
    %331 = llvm.extractvalue %328[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %332 = llvm.bitcast %331 : i32 to vector<1xf32> loc(#loc10)
    %333 = llvm.extractvalue %328[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %334 = llvm.bitcast %333 : i32 to vector<1xf32> loc(#loc10)
    %335 = llvm.extractvalue %328[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %336 = llvm.bitcast %335 : i32 to vector<1xf32> loc(#loc10)
    %337 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %338 = llvm.extractelement %330[%337 : i32] : vector<1xf32> loc(#loc10)
    %339 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %340 = llvm.extractelement %332[%339 : i32] : vector<1xf32> loc(#loc10)
    %341 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %342 = llvm.extractelement %334[%341 : i32] : vector<1xf32> loc(#loc10)
    %343 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %344 = llvm.extractelement %336[%343 : i32] : vector<1xf32> loc(#loc10)
    %345 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc10)
    %346 = llvm.insertvalue %321, %345[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %347 = llvm.insertvalue %323, %346[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %348 = llvm.insertvalue %325, %347[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %349 = llvm.insertvalue %327, %348[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %350 = llvm.insertvalue %338, %349[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %351 = llvm.insertvalue %340, %350[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %352 = llvm.insertvalue %342, %351[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %353 = llvm.insertvalue %344, %352[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc10)
    %354 = llvm.extractvalue %251[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %355 = llvm.extractvalue %251[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %356 = llvm.extractvalue %251[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %357 = llvm.extractvalue %251[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %358 = llvm.extractvalue %251[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %359 = llvm.extractvalue %251[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %360 = llvm.extractvalue %251[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %361 = llvm.extractvalue %251[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %362 = llvm.extractvalue %353[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %363 = llvm.extractvalue %353[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %364 = llvm.extractvalue %353[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %365 = llvm.extractvalue %353[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %366 = llvm.extractvalue %353[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %367 = llvm.extractvalue %353[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %368 = llvm.extractvalue %353[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %369 = llvm.extractvalue %353[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %370 = llvm.fadd %354, %362 : f32 loc(#loc11)
    %371 = llvm.fadd %355, %363 : f32 loc(#loc11)
    %372 = llvm.fadd %356, %364 : f32 loc(#loc11)
    %373 = llvm.fadd %357, %365 : f32 loc(#loc11)
    %374 = llvm.fadd %358, %366 : f32 loc(#loc11)
    %375 = llvm.fadd %359, %367 : f32 loc(#loc11)
    %376 = llvm.fadd %360, %368 : f32 loc(#loc11)
    %377 = llvm.fadd %361, %369 : f32 loc(#loc11)
    %378 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc11)
    %379 = llvm.insertvalue %370, %378[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %380 = llvm.insertvalue %371, %379[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %381 = llvm.insertvalue %372, %380[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %382 = llvm.insertvalue %373, %381[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %383 = llvm.insertvalue %374, %382[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %384 = llvm.insertvalue %375, %383[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %385 = llvm.insertvalue %376, %384[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %386 = llvm.insertvalue %377, %385[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc11)
    %387 = llvm.bitcast %arg2 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc12)
    %388 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc12)
    %389 = llvm.insertvalue %387, %388[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %390 = llvm.insertvalue %387, %389[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %391 = llvm.insertvalue %387, %390[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %392 = llvm.insertvalue %387, %391[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %393 = llvm.insertvalue %387, %392[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %394 = llvm.insertvalue %387, %393[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %395 = llvm.insertvalue %387, %394[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %396 = llvm.insertvalue %387, %395[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %397 = llvm.extractvalue %396[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %398 = llvm.extractvalue %396[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %399 = llvm.extractvalue %396[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %400 = llvm.extractvalue %396[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %401 = llvm.extractvalue %396[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %402 = llvm.extractvalue %396[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %403 = llvm.extractvalue %396[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %404 = llvm.extractvalue %396[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %405 = llvm.extractvalue %106[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %406 = llvm.extractvalue %106[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %407 = llvm.extractvalue %106[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %408 = llvm.extractvalue %106[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %409 = llvm.extractvalue %106[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %410 = llvm.extractvalue %106[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %411 = llvm.extractvalue %106[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %412 = llvm.extractvalue %106[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc12)
    %413 = llvm.getelementptr %397[%405] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %414 = llvm.getelementptr %398[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %415 = llvm.getelementptr %399[%407] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %416 = llvm.getelementptr %400[%408] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %417 = llvm.getelementptr %401[%409] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %418 = llvm.getelementptr %402[%410] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %419 = llvm.getelementptr %403[%411] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %420 = llvm.getelementptr %404[%412] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %421 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc12)
    %422 = llvm.insertvalue %413, %421[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %423 = llvm.insertvalue %414, %422[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %424 = llvm.insertvalue %415, %423[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %425 = llvm.insertvalue %416, %424[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %426 = llvm.insertvalue %417, %425[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %427 = llvm.insertvalue %418, %426[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %428 = llvm.insertvalue %419, %427[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %429 = llvm.insertvalue %420, %428[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc12)
    %430 = llvm.extractvalue %429[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %431 = llvm.extractvalue %429[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %432 = llvm.extractvalue %429[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %433 = llvm.extractvalue %429[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %434 = llvm.extractvalue %429[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %435 = llvm.extractvalue %429[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %436 = llvm.extractvalue %429[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %437 = llvm.extractvalue %429[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc13)
    %438 = llvm.extractvalue %386[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %439 = llvm.extractvalue %386[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %440 = llvm.extractvalue %386[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %441 = llvm.extractvalue %386[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %442 = llvm.extractvalue %386[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %443 = llvm.extractvalue %386[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %444 = llvm.extractvalue %386[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %445 = llvm.extractvalue %386[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc13)
    %446 = llvm.extractvalue %149[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %447 = llvm.extractvalue %149[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %448 = llvm.extractvalue %149[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %449 = llvm.extractvalue %149[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %450 = llvm.extractvalue %149[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %451 = llvm.extractvalue %149[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %452 = llvm.extractvalue %149[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %453 = llvm.extractvalue %149[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc13)
    %454 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %455 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc13)
    %456 = llvm.mlir.constant(127 : i32) : i32 loc(#loc13)
    %457 = llvm.and %455, %456 : i32 loc(#loc13)
    %458 = llvm.mlir.constant(32 : i32) : i32 loc(#loc13)
    %459 = llvm.urem %457, %458 : i32 loc(#loc13)
    %460 = llvm.udiv %457, %458 : i32 loc(#loc13)
    %461 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %462 = llvm.bitcast %438 : f32 to f32 loc(#loc13)
    %463 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %464 = llvm.insertelement %462, %461[%463 : i32] : vector<1xf32> loc(#loc13)
    %465 = llvm.bitcast %464 : vector<1xf32> to i32 loc(#loc13)
    %466 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %467 = llvm.bitcast %439 : f32 to f32 loc(#loc13)
    %468 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %469 = llvm.insertelement %467, %466[%468 : i32] : vector<1xf32> loc(#loc13)
    %470 = llvm.bitcast %469 : vector<1xf32> to i32 loc(#loc13)
    %471 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %472 = llvm.bitcast %440 : f32 to f32 loc(#loc13)
    %473 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %474 = llvm.insertelement %472, %471[%473 : i32] : vector<1xf32> loc(#loc13)
    %475 = llvm.bitcast %474 : vector<1xf32> to i32 loc(#loc13)
    %476 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %477 = llvm.bitcast %441 : f32 to f32 loc(#loc13)
    %478 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %479 = llvm.insertelement %477, %476[%478 : i32] : vector<1xf32> loc(#loc13)
    %480 = llvm.bitcast %479 : vector<1xf32> to i32 loc(#loc13)
    %481 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %465, %470, %475, %480, %430, %446 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %482 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %483 = llvm.bitcast %442 : f32 to f32 loc(#loc13)
    %484 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %485 = llvm.insertelement %483, %482[%484 : i32] : vector<1xf32> loc(#loc13)
    %486 = llvm.bitcast %485 : vector<1xf32> to i32 loc(#loc13)
    %487 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %488 = llvm.bitcast %443 : f32 to f32 loc(#loc13)
    %489 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %490 = llvm.insertelement %488, %487[%489 : i32] : vector<1xf32> loc(#loc13)
    %491 = llvm.bitcast %490 : vector<1xf32> to i32 loc(#loc13)
    %492 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %493 = llvm.bitcast %444 : f32 to f32 loc(#loc13)
    %494 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %495 = llvm.insertelement %493, %492[%494 : i32] : vector<1xf32> loc(#loc13)
    %496 = llvm.bitcast %495 : vector<1xf32> to i32 loc(#loc13)
    %497 = llvm.mlir.undef : vector<1xf32> loc(#loc13)
    %498 = llvm.bitcast %445 : f32 to f32 loc(#loc13)
    %499 = llvm.mlir.constant(0 : i32) : i32 loc(#loc13)
    %500 = llvm.insertelement %498, %497[%499 : i32] : vector<1xf32> loc(#loc13)
    %501 = llvm.bitcast %500 : vector<1xf32> to i32 loc(#loc13)
    %502 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %486, %491, %496, %501, %434, %450 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before ConvertWarpSpecializeToLLVM (convert-warp-specialize-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before ReconcileUnrealizedCastsPass (reconcile-unrealized-casts) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0), %arg4: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":30:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xf32> loc(#loc1)
    %1 = llvm.mlir.constant(512 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc1)
    %9 = llvm.call_intrinsic "llvm.nvvm.read.ptx.sreg.ctaid.x"() : () -> i32 loc(#loc2)
    %10 = llvm.mul %9, %8 : i32 loc(#loc3)
    %11 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc4)
    %12 = llvm.and %11, %6 : i32 loc(#loc4)
    %13 = llvm.urem %12, %5 : i32 loc(#loc4)
    %14 = llvm.udiv %12, %5 : i32 loc(#loc4)
    %15 = llvm.shl %13, %4 : i32 loc(#loc4)
    %16 = llvm.or %4, %15 : i32 loc(#loc4)
    %17 = llvm.shl %14, %3 : i32 loc(#loc4)
    %18 = llvm.or %16, %17 : i32 loc(#loc4)
    %19 = llvm.or %18, %4 : i32 loc(#loc4)
    %20 = llvm.and %19, %6 : i32 loc(#loc4)
    %21 = llvm.shl %20, %2 : i32 loc(#loc4)
    %22 = llvm.xor %4, %21 : i32 loc(#loc4)
    %23 = llvm.xor %4, %22 : i32 loc(#loc4)
    %24 = llvm.xor %23, %4 : i32 loc(#loc4)
    %25 = llvm.xor %23, %1 : i32 loc(#loc4)
    %26 = llvm.add %24, %7 : i32 loc(#loc4)
    %27 = llvm.add %25, %7 : i32 loc(#loc4)
    %28 = llvm.add %10, %26 : i32 loc(#loc5)
    %29 = llvm.add %10, %27 : i32 loc(#loc5)
    %30 = llvm.icmp "slt" %28, %arg3 : i32 loc(#loc6)
    %31 = llvm.icmp "slt" %29, %arg3 : i32 loc(#loc6)
    %32 = llvm.getelementptr %arg0[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %33 = llvm.getelementptr %arg0[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc7)
    %34 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %32, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %35 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %36 = llvm.bitcast %35 : i32 to vector<1xf32> loc(#loc8)
    %37 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %38 = llvm.bitcast %37 : i32 to vector<1xf32> loc(#loc8)
    %39 = llvm.extractvalue %34[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %40 = llvm.bitcast %39 : i32 to vector<1xf32> loc(#loc8)
    %41 = llvm.extractvalue %34[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %42 = llvm.bitcast %41 : i32 to vector<1xf32> loc(#loc8)
    %43 = llvm.extractelement %36[%7 : i32] : vector<1xf32> loc(#loc8)
    %44 = llvm.extractelement %38[%7 : i32] : vector<1xf32> loc(#loc8)
    %45 = llvm.extractelement %40[%7 : i32] : vector<1xf32> loc(#loc8)
    %46 = llvm.extractelement %42[%7 : i32] : vector<1xf32> loc(#loc8)
    %47 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %33, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc8)
    %48 = llvm.extractvalue %47[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %49 = llvm.bitcast %48 : i32 to vector<1xf32> loc(#loc8)
    %50 = llvm.extractvalue %47[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %51 = llvm.bitcast %50 : i32 to vector<1xf32> loc(#loc8)
    %52 = llvm.extractvalue %47[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %53 = llvm.bitcast %52 : i32 to vector<1xf32> loc(#loc8)
    %54 = llvm.extractvalue %47[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc8)
    %55 = llvm.bitcast %54 : i32 to vector<1xf32> loc(#loc8)
    %56 = llvm.extractelement %49[%7 : i32] : vector<1xf32> loc(#loc8)
    %57 = llvm.extractelement %51[%7 : i32] : vector<1xf32> loc(#loc8)
    %58 = llvm.extractelement %53[%7 : i32] : vector<1xf32> loc(#loc8)
    %59 = llvm.extractelement %55[%7 : i32] : vector<1xf32> loc(#loc8)
    %60 = llvm.getelementptr %arg1[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %61 = llvm.getelementptr %arg1[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc9)
    %62 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %60, %30 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %63 = llvm.extractvalue %62[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %64 = llvm.bitcast %63 : i32 to vector<1xf32> loc(#loc10)
    %65 = llvm.extractvalue %62[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %66 = llvm.bitcast %65 : i32 to vector<1xf32> loc(#loc10)
    %67 = llvm.extractvalue %62[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %68 = llvm.bitcast %67 : i32 to vector<1xf32> loc(#loc10)
    %69 = llvm.extractvalue %62[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %70 = llvm.bitcast %69 : i32 to vector<1xf32> loc(#loc10)
    %71 = llvm.extractelement %64[%7 : i32] : vector<1xf32> loc(#loc10)
    %72 = llvm.extractelement %66[%7 : i32] : vector<1xf32> loc(#loc10)
    %73 = llvm.extractelement %68[%7 : i32] : vector<1xf32> loc(#loc10)
    %74 = llvm.extractelement %70[%7 : i32] : vector<1xf32> loc(#loc10)
    %75 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %61, %31 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)> loc(#loc10)
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %77 = llvm.bitcast %76 : i32 to vector<1xf32> loc(#loc10)
    %78 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %79 = llvm.bitcast %78 : i32 to vector<1xf32> loc(#loc10)
    %80 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %81 = llvm.bitcast %80 : i32 to vector<1xf32> loc(#loc10)
    %82 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc10)
    %83 = llvm.bitcast %82 : i32 to vector<1xf32> loc(#loc10)
    %84 = llvm.extractelement %77[%7 : i32] : vector<1xf32> loc(#loc10)
    %85 = llvm.extractelement %79[%7 : i32] : vector<1xf32> loc(#loc10)
    %86 = llvm.extractelement %81[%7 : i32] : vector<1xf32> loc(#loc10)
    %87 = llvm.extractelement %83[%7 : i32] : vector<1xf32> loc(#loc10)
    %88 = llvm.fadd %43, %71 : f32 loc(#loc11)
    %89 = llvm.fadd %44, %72 : f32 loc(#loc11)
    %90 = llvm.fadd %45, %73 : f32 loc(#loc11)
    %91 = llvm.fadd %46, %74 : f32 loc(#loc11)
    %92 = llvm.fadd %56, %84 : f32 loc(#loc11)
    %93 = llvm.fadd %57, %85 : f32 loc(#loc11)
    %94 = llvm.fadd %58, %86 : f32 loc(#loc11)
    %95 = llvm.fadd %59, %87 : f32 loc(#loc11)
    %96 = llvm.getelementptr %arg2[%28] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %97 = llvm.getelementptr %arg2[%29] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc12)
    %98 = llvm.insertelement %88, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %99 = llvm.bitcast %98 : vector<1xf32> to i32 loc(#loc13)
    %100 = llvm.insertelement %89, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %101 = llvm.bitcast %100 : vector<1xf32> to i32 loc(#loc13)
    %102 = llvm.insertelement %90, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %103 = llvm.bitcast %102 : vector<1xf32> to i32 loc(#loc13)
    %104 = llvm.insertelement %91, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %105 = llvm.bitcast %104 : vector<1xf32> to i32 loc(#loc13)
    %106 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %99, %101, %103, %105, %96, %30 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    %107 = llvm.insertelement %92, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %108 = llvm.bitcast %107 : vector<1xf32> to i32 loc(#loc13)
    %109 = llvm.insertelement %93, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %110 = llvm.bitcast %109 : vector<1xf32> to i32 loc(#loc13)
    %111 = llvm.insertelement %94, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %112 = llvm.bitcast %111 : vector<1xf32> to i32 loc(#loc13)
    %113 = llvm.insertelement %95, %0[%4 : i32] : vector<1xf32> loc(#loc13)
    %114 = llvm.bitcast %113 : vector<1xf32> to i32 loc(#loc13)
    %115 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %108, %110, %112, %114, %97, %31 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc13)
    llvm.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":39:24)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":52:24)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:41)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":53:28)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":55:21)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:24)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":58:16)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:24)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":59:16)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":60:17)
#loc12 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:26)
#loc13 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:35)
#loc14 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/Triton-101/Debug/vector_add.py":62:4)


tensor([1.3713, 1.3076, 0.4940,  ..., 0.6724, 1.2141, 0.9733], device='cuda:0')
tensor([1.3713, 1.3076, 0.4940,  ..., 0.6724, 1.2141, 0.9733], device='cuda:0')
The maximum difference between torch and triton is 0.0
vector-add-performance:
           size      Triton       Torch
0        4096.0   12.000000   12.000000
1        8192.0   24.000000   24.000000
2       16384.0   48.000000   48.000000
3       32768.0   96.000000   76.800002
4       65536.0  153.600004  153.600004
5      131072.0  255.999991  255.999991
6      262144.0  384.000001  384.000001
7      524288.0  558.545450  558.545450
8     1048576.0  682.666643  682.666643
9     2097152.0  768.000002  768.000002
10    4194304.0  792.774204  780.190482
11    8388608.0  805.770507  840.205105
12   16777216.0  854.817372  854.817372
13   33554432.0  866.114550  866.114550
14   67108864.0  868.026517  867.069479
15  134217728.0  378.461892  872.843515
Matched AddIOp: %4 = arith.addi %3, %2 : tensor<1024xi32, #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>>
