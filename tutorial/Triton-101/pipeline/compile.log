dict_keys(['source', 'ttir', 'ttgir', 'llir', 'ptx', 'cubin'])
===================== ttir =====================
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = arith.extsi %0 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %12 = arith.muli %11, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %13 = tt.broadcast %12 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %14 = tt.expand_dims %10 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %15 = arith.muli %14, %cst : tensor<1x2xi64> loc(#loc8)
    %16 = tt.broadcast %15 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %17 = arith.addi %13, %16 : tensor<2x2xi64> loc(#loc8)
    %18 = tt.addptr %9, %17 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %19 = tt.load %18 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %19 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:4)

===================== ttgir =====================
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py":19:4)

===================== llir =====================
; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @block_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) readnone captures(none) %2) local_unnamed_addr #0 !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = and i32 %4, 1, !dbg !8
  %6 = lshr i32 %4, 1, !dbg !8
  %7 = and i32 %6, 1, !dbg !8
  %8 = mul nuw nsw i32 %7, 5, !dbg !9
  %9 = add nuw nsw i32 %8, %5, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr i64, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = shl nuw nsw i32 %5, 1, !dbg !12
  %narrow = mul nuw nsw i32 %7, 3, !dbg !12
  %narrow1 = add nuw nsw i32 %narrow, %12, !dbg !12
  %13 = zext nneg i32 %narrow1 to i64, !dbg !12
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %14) #2, !dbg !12
  %16 = and i32 %4, 124, !dbg !13
  %17 = icmp eq i32 %16, 0, !dbg !13
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %15, ptr addrspace(1) %11, i1 %17) #2, !dbg !13
  ret void, !dbg !14
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "example.py", directory: "/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "block_kernel", linkageName: "block_kernel", scope: !1, file: !1, line: 13, type: !6, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 17, column: 23, scope: !5)
!9 = !DILocation(line: 18, column: 47, scope: !5)
!10 = !DILocation(line: 18, column: 32, scope: !5)
!11 = !DILocation(line: 19, column: 21, scope: !5)
!12 = !DILocation(line: 19, column: 41, scope: !5)
!13 = !DILocation(line: 19, column: 33, scope: !5)
!14 = !DILocation(line: 19, column: 4, scope: !5)

===================== ptx =====================
//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_86
.address_size 64

	// .globl	block_kernel            // -- Begin function block_kernel
                                        // @block_kernel
.visible .entry block_kernel(
	.param .u64 .ptr .global .align 1 block_kernel_param_0,
	.param .u64 .ptr .global .align 1 block_kernel_param_1,
	.param .u64 .ptr .global .align 1 block_kernel_param_2
)
.reqntid 128
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;
	.loc	1 13 0                          // example.py:13:0
$L__func_begin0:
	.loc	1 13 0                          // example.py:13:0

// %bb.0:
	ld.param.b64 	%rd5, [block_kernel_param_0];
	ld.param.b64 	%rd6, [block_kernel_param_1];
$L__tmp0:
	.loc	1 17 23                         // example.py:17:23
	mov.u32 	%r1, %tid.x;
	and.b32 	%r2, %r1, 1;
	bfe.u32 	%r3, %r1, 1, 1;
	.loc	1 18 32                         // example.py:18:32
	mad.lo.s32 	%r4, %r3, 5, %r2;
	.loc	1 19 21                         // example.py:19:21
	mul.wide.u32 	%rd7, %r4, 8;
	add.s64 	%rd4, %rd6, %rd7;
	.loc	1 19 41                         // example.py:19:41
	shl.b32 	%r5, %r2, 1;
	mad.lo.s32 	%r6, %r3, 3, %r5;
	mul.wide.u32 	%rd8, %r6, 8;
	add.s64 	%rd2, %rd5, %rd8;
	// begin inline asm
	mov.u64 %rd3, 0x0;
	ld.global.b64 { %rd3 }, [ %rd2 + 0 ];
	// end inline asm
	.loc	1 19 33                         // example.py:19:33
	and.b32 	%r7, %r1, 124;
	setp.eq.s32 	%p1, %r7, 0;
	// begin inline asm
	@%p1 st.global.b64 [ %rd4 + 0 ], { %rd3 };
	// end inline asm
	.loc	1 19 4                          // example.py:19:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 103                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x60 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 101                                 // DW_AT_name
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 109
.b8 110
.b8 116
.b8 47
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 100
.b8 111
.b8 117
.b8 108
.b8 105
.b8 121
.b8 97
.b8 110
.b8 103
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 119
.b8 111
.b8 114
.b8 107
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 47
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 47
.b8 112
.b8 105
.b8 112
.b8 101
.b8 108
.b8 105
.b8 110
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}

===================== cubin =====================
Function:block_kernel
--:-:-:-:2	MOV R1, c[0x0][0x28];
--:-:0:-:1	S2R R4, SR_TID.X;
--:-:-:-:2	MOV R6, 0x8;
01:-:-:-:2	LOP3.LUT P0, RZ, R4.reuse, 0x7c, RZ, 0xc0, !PT;
--:-:-:-:2	SHF.R.U32.HI R3, RZ, 0x1, R4;
--:-:-:-:2	LOP3.LUT R0, R4, 0x1, RZ, 0xc0, !PT;
--:-:-:-:2	SGXT.U32 R3, R3, 0x1;
--:-:-:Y:5	SHF.L.U32 R2, R0, 0x1, RZ;
--:-:-:Y:4	IMAD R2, R3, 0x3, R2;
--:-:-:-:1	IMAD.WIDE.U32 R4, R2, R6, c[0x0][0x160];
--:-:-:-:6	@P0 EXIT;
--:-:-:-:2	ULDC.64 UR4, c[0x0][0x118];
--:-:2:-:1	LDG.E.64 R4, [R4.64];
--:-:-:Y:4	IMAD R3, R3, 0x5, R0;
--:-:-:Y:5	IMAD.WIDE.U32 R2, R3, R6, c[0x0][0x168];
04:-:-:-:1	STG.E.64 [R2.64], R4;
--:-:-:-:5	EXIT;
LBB0:
--:-:-:Y:0	BRA LBB0;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;


Traceback (most recent call last):
  File "/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/../../python/triton/tools/compile.py", line 65, in <module>
    kernel = getattr(mod, args.kernel_name)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: module 'example' has no attribute 'add_kernel'
Matched AddIOp: %11 = arith.addi %9, %10 : tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>>
Matched AddIOp: %27 = arith.addi %21, %26 : tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>>
