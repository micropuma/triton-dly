// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c-1_i64 = arith.constant -1 : i64 loc(#loc1)
    %c2_i64_0 = arith.constant 2 : i64 loc(#loc1)
    %c3_i64 = arith.constant 3 : i64 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.make_tensor_ptr %arg0, [%c2_i64, %c-1_i64], [%c2_i64_0, %c3_i64], [%c0_i32, %c0_i32_1] {order = array<i32: 1, 0>} : <tensor<2x2xi64>> loc(#loc1)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %c5_i32 = arith.constant 5 : i32 loc(#loc5)
    %c5_i32_2 = arith.constant 5 : i32 loc(#loc5)
    %cst = arith.constant dense<5> : tensor<1x2xi32> loc(#loc5)
    %4 = arith.extsi %3 : tensor<1x2xi32> to tensor<1x2xi64> loc(#loc5)
    %5 = arith.extsi %cst : tensor<1x2xi32> to tensor<1x2xi64> loc(#loc5)
    %6 = arith.muli %4, %5 : tensor<1x2xi64> loc(#loc5)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst_3 = arith.constant dense<2147483647> : tensor<1x2xi64> loc(#loc5)
    %7 = arith.cmpi sle, %6, %cst_3 : tensor<1x2xi64> loc(#loc5)
    %cst_4 = arith.constant dense<-2147483648> : tensor<1x2xi64> loc(#loc5)
    %8 = arith.cmpi sge, %6, %cst_4 : tensor<1x2xi64> loc(#loc5)
    %9 = arith.andi %7, %8 : tensor<1x2xi1> loc(#loc5)
    %10 = arith.muli %3, %cst : tensor<1x2xi32> loc(#loc5)
    %11 = tt.broadcast %2 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %12 = tt.broadcast %10 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %13 = arith.extsi %11 : tensor<2x2xi32> to tensor<2x2xi64> loc(#loc6)
    %14 = arith.extsi %12 : tensor<2x2xi32> to tensor<2x2xi64> loc(#loc6)
    %15 = arith.addi %13, %14 : tensor<2x2xi64> loc(#loc6)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_7 = arith.constant dense<2147483647> : tensor<2x2xi64> loc(#loc6)
    %16 = arith.cmpi sle, %15, %cst_7 : tensor<2x2xi64> loc(#loc6)
    %cst_8 = arith.constant dense<-2147483648> : tensor<2x2xi64> loc(#loc6)
    %17 = arith.cmpi sge, %15, %cst_8 : tensor<2x2xi64> loc(#loc6)
    %18 = arith.andi %16, %17 : tensor<2x2xi1> loc(#loc6)
    %19 = arith.addi %11, %12 : tensor<2x2xi32> loc(#loc6)
    %20 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %21 = tt.addptr %20, %19 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %22 = tt.load %0 : !tt.ptr<tensor<2x2xi64>> loc(#loc8)
    tt.store %21, %22 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":16:118)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @block_kernel) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c-1_i64 = arith.constant -1 : i64 loc(#loc1)
    %c2_i64_0 = arith.constant 2 : i64 loc(#loc1)
    %c3_i64 = arith.constant 3 : i64 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.make_tensor_ptr %arg0, [%c2_i64, %c-1_i64], [%c2_i64_0, %c3_i64], [%c0_i32, %c0_i32_1] {order = array<i32: 1, 0>} : <tensor<2x2xi64>> loc(#loc1)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %c5_i32 = arith.constant 5 : i32 loc(#loc5)
    %c5_i32_2 = arith.constant 5 : i32 loc(#loc5)
    %cst = arith.constant dense<5> : tensor<1x2xi32> loc(#loc5)
    %4 = arith.extsi %3 : tensor<1x2xi32> to tensor<1x2xi64> loc(#loc5)
    %5 = arith.extsi %cst : tensor<1x2xi32> to tensor<1x2xi64> loc(#loc5)
    %6 = arith.muli %4, %5 : tensor<1x2xi64> loc(#loc5)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst_3 = arith.constant dense<2147483647> : tensor<1x2xi64> loc(#loc5)
    %7 = arith.cmpi sle, %6, %cst_3 : tensor<1x2xi64> loc(#loc5)
    %cst_4 = arith.constant dense<-2147483648> : tensor<1x2xi64> loc(#loc5)
    %8 = arith.cmpi sge, %6, %cst_4 : tensor<1x2xi64> loc(#loc5)
    %9 = arith.andi %7, %8 : tensor<1x2xi1> loc(#loc5)
    %10 = arith.muli %3, %cst : tensor<1x2xi32> loc(#loc5)
    %11 = tt.broadcast %2 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %12 = tt.broadcast %10 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %13 = arith.extsi %11 : tensor<2x2xi32> to tensor<2x2xi64> loc(#loc6)
    %14 = arith.extsi %12 : tensor<2x2xi32> to tensor<2x2xi64> loc(#loc6)
    %15 = arith.addi %13, %14 : tensor<2x2xi64> loc(#loc6)
    %c2147483647_i64_5 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_6 = arith.constant -2147483648 : i64 loc(#loc6)
    %cst_7 = arith.constant dense<2147483647> : tensor<2x2xi64> loc(#loc6)
    %16 = arith.cmpi sle, %15, %cst_7 : tensor<2x2xi64> loc(#loc6)
    %cst_8 = arith.constant dense<-2147483648> : tensor<2x2xi64> loc(#loc6)
    %17 = arith.cmpi sge, %15, %cst_8 : tensor<2x2xi64> loc(#loc6)
    %18 = arith.andi %16, %17 : tensor<2x2xi1> loc(#loc6)
    %19 = arith.addi %11, %12 : tensor<2x2xi32> loc(#loc6)
    %20 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %21 = tt.addptr %20, %19 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %22 = tt.load %0 : !tt.ptr<tensor<2x2xi64>> loc(#loc8)
    tt.store %21, %22 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":16:118)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c-1_i64 = arith.constant -1 : i64 loc(#loc2)
    %c3_i64 = arith.constant 3 : i64 loc(#loc2)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.make_tensor_ptr %arg0, [%c2_i64, %c-1_i64], [%c2_i64, %c3_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<2x2xi64>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc4)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc5)
    %4 = arith.muli %3, %cst : tensor<1x2xi32> loc(#loc6)
    %5 = tt.broadcast %2 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc7)
    %6 = tt.broadcast %4 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc7)
    %7 = arith.addi %5, %6 : tensor<2x2xi32> loc(#loc7)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc8)
    %10 = tt.load %0 : !tt.ptr<tensor<2x2xi64>> loc(#loc9)
    tt.store %9, %10 : tensor<2x2x!tt.ptr<i64>> loc(#loc10)
    tt.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":16:118)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c-1_i64 = arith.constant -1 : i64 loc(#loc2)
    %c3_i64 = arith.constant 3 : i64 loc(#loc2)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = arith.extsi %c0_i32 : i32 to i64 loc(#loc2)
    %1 = arith.extsi %c0_i32 : i32 to i64 loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc5)
    %5 = arith.muli %4, %cst : tensor<1x2xi32> loc(#loc6)
    %6 = tt.broadcast %3 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc7)
    %7 = tt.broadcast %5 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc7)
    %8 = arith.addi %6, %7 : tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = tt.addptr %9, %8 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc8)
    %11 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    %12 = tt.splat %0 : i64 -> tensor<2xi64> loc(#loc9)
    %13 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc9)
    %14 = arith.extsi %13 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %15 = arith.addi %12, %14 : tensor<2xi64> loc(#loc9)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc9)
    %17 = tt.splat %c2_i64 : i64 -> tensor<2x1xi64> loc(#loc9)
    %18 = arith.muli %16, %17 : tensor<2x1xi64> loc(#loc9)
    %19 = tt.broadcast %18 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc9)
    %20 = tt.addptr %11, %19 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc9)
    %21 = tt.splat %1 : i64 -> tensor<2xi64> loc(#loc9)
    %22 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc9)
    %23 = arith.extsi %22 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %24 = arith.addi %21, %23 : tensor<2xi64> loc(#loc9)
    %25 = tt.expand_dims %24 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc9)
    %26 = tt.splat %c3_i64 : i64 -> tensor<1x2xi64> loc(#loc9)
    %27 = arith.muli %25, %26 : tensor<1x2xi64> loc(#loc9)
    %28 = tt.broadcast %27 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc9)
    %29 = tt.addptr %20, %28 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc9)
    %30 = tt.load %29 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.store %10, %30 : tensor<2x2x!tt.ptr<i64>> loc(#loc10)
    tt.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":16:118)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %c-1_i64 = arith.constant -1 : i64 loc(#loc2)
    %c3_i64 = arith.constant 3 : i64 loc(#loc2)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = arith.extsi %c0_i32 : i32 to i64 loc(#loc2)
    %1 = arith.extsi %c0_i32 : i32 to i64 loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc5)
    %5 = arith.muli %4, %cst : tensor<1x2xi32> loc(#loc6)
    %6 = tt.broadcast %3 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc7)
    %7 = tt.broadcast %5 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc7)
    %8 = arith.addi %6, %7 : tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = tt.addptr %9, %8 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc8)
    %11 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    %12 = tt.splat %0 : i64 -> tensor<2xi64> loc(#loc9)
    %13 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc9)
    %14 = arith.extsi %13 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %15 = arith.addi %12, %14 : tensor<2xi64> loc(#loc9)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc9)
    %17 = tt.splat %c2_i64 : i64 -> tensor<2x1xi64> loc(#loc9)
    %18 = arith.muli %16, %17 : tensor<2x1xi64> loc(#loc9)
    %19 = tt.broadcast %18 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc9)
    %20 = tt.addptr %11, %19 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc9)
    %21 = tt.splat %1 : i64 -> tensor<2xi64> loc(#loc9)
    %22 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc9)
    %23 = arith.extsi %22 : tensor<2xi32> to tensor<2xi64> loc(#loc9)
    %24 = arith.addi %21, %23 : tensor<2xi64> loc(#loc9)
    %25 = tt.expand_dims %24 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc9)
    %26 = tt.splat %c3_i64 : i64 -> tensor<1x2xi64> loc(#loc9)
    %27 = arith.muli %25, %26 : tensor<1x2xi64> loc(#loc9)
    %28 = tt.broadcast %27 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc9)
    %29 = tt.addptr %20, %28 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc9)
    %30 = tt.load %29 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.store %10, %30 : tensor<2x2x!tt.ptr<i64>> loc(#loc10)
    tt.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":16:118)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc11 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc8)
    %11 = arith.extsi %10 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %13 = arith.muli %12, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %15 = tt.addptr %9, %14 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %16 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc8)
    %17 = arith.extsi %16 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %18 = tt.expand_dims %17 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %21 = tt.addptr %15, %20 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %22 = tt.load %21 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %22 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc8)
    %11 = arith.extsi %10 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %13 = arith.muli %12, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %15 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc8)
    %16 = arith.extsi %15 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %18 = arith.muli %17, %cst : tensor<1x2xi64> loc(#loc8)
    %19 = tt.broadcast %18 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %20 = arith.addi %14, %19 : tensor<2x2xi64> loc(#loc8)
    %21 = tt.addptr %9, %20 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %22 = tt.load %21 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %22 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc8)
    %11 = arith.extsi %10 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %13 = arith.muli %12, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %15 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc8)
    %16 = arith.extsi %15 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %18 = arith.muli %17, %cst : tensor<1x2xi64> loc(#loc8)
    %19 = tt.broadcast %18 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %20 = arith.addi %14, %19 : tensor<2x2xi64> loc(#loc8)
    %21 = tt.addptr %9, %20 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %22 = tt.load %21 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %22 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = arith.extsi %0 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %12 = arith.muli %11, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %13 = tt.broadcast %12 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %14 = tt.expand_dims %10 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %15 = arith.muli %14, %cst : tensor<1x2xi64> loc(#loc8)
    %16 = tt.broadcast %15 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %17 = arith.addi %13, %16 : tensor<2x2xi64> loc(#loc8)
    %18 = tt.addptr %9, %17 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %19 = tt.load %18 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %19 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = arith.extsi %0 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %12 = arith.muli %11, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %13 = tt.broadcast %12 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %14 = tt.expand_dims %10 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %15 = arith.muli %14, %cst : tensor<1x2xi64> loc(#loc8)
    %16 = tt.broadcast %15 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %17 = arith.addi %13, %16 : tensor<2x2xi64> loc(#loc8)
    %18 = tt.addptr %9, %17 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %19 = tt.load %18 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %19 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = arith.extsi %0 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %12 = arith.muli %11, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %13 = tt.broadcast %12 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %14 = tt.expand_dims %10 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %15 = arith.muli %14, %cst : tensor<1x2xi64> loc(#loc8)
    %16 = tt.broadcast %15 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %17 = arith.addi %13, %16 : tensor<2x2xi64> loc(#loc8)
    %18 = tt.addptr %9, %17 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %19 = tt.load %18 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %19 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked2> loc(#loc2)
    %1 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi32, #blocked3> loc(#loc3)
    %3 = ttg.convert_layout %2 : tensor<2x1xi32, #blocked3> -> tensor<2x1xi32, #blocked1> loc(#loc4)
    %4 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc5)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi32, #blocked4> loc(#loc5)
    %6 = ttg.convert_layout %5 : tensor<1x2xi32, #blocked4> -> tensor<1x2xi32, #blocked> loc(#loc6)
    %7 = arith.muli %6, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %3 : tensor<2x1xi32, #blocked1> -> tensor<2x2xi32, #blocked1> loc(#loc4)
    %9 = ttg.convert_layout %8 : tensor<2x2xi32, #blocked1> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %10 = tt.broadcast %7 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %11 = arith.addi %9, %10 : tensor<2x2xi32, #blocked> loc(#loc4)
    %12 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %13 = tt.addptr %12, %11 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %14 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %15 = arith.extsi %0 : tensor<2xi32, #blocked2> to tensor<2xi64, #blocked2> loc(#loc8)
    %16 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi64, #blocked3> loc(#loc8)
    %18 = ttg.convert_layout %17 : tensor<2x1xi64, #blocked3> -> tensor<2x1xi64, #blocked1> loc(#loc8)
    %19 = arith.muli %18, %cst_0 : tensor<2x1xi64, #blocked1> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<2x1xi64, #blocked1> -> tensor<2x2xi64, #blocked1> loc(#loc8)
    %21 = ttg.convert_layout %20 : tensor<2x2xi64, #blocked1> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc8)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi64, #blocked4> loc(#loc8)
    %24 = ttg.convert_layout %23 : tensor<1x2xi64, #blocked4> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %25 = arith.muli %24, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %26 = tt.broadcast %25 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %27 = arith.addi %21, %26 : tensor<2x2xi64, #blocked> loc(#loc8)
    %28 = tt.addptr %14, %27 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %29 = tt.load %28 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %13, %29 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUPrintAddIOp (tritongpu-print-addiop) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked2> loc(#loc2)
    %1 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi32, #blocked3> loc(#loc3)
    %3 = ttg.convert_layout %2 : tensor<2x1xi32, #blocked3> -> tensor<2x1xi32, #blocked1> loc(#loc4)
    %4 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc5)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi32, #blocked4> loc(#loc5)
    %6 = ttg.convert_layout %5 : tensor<1x2xi32, #blocked4> -> tensor<1x2xi32, #blocked> loc(#loc6)
    %7 = arith.muli %6, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %3 : tensor<2x1xi32, #blocked1> -> tensor<2x2xi32, #blocked1> loc(#loc4)
    %9 = ttg.convert_layout %8 : tensor<2x2xi32, #blocked1> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %10 = tt.broadcast %7 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %11 = arith.addi %9, %10 : tensor<2x2xi32, #blocked> loc(#loc4)
    %12 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %13 = tt.addptr %12, %11 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %14 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %15 = arith.extsi %0 : tensor<2xi32, #blocked2> to tensor<2xi64, #blocked2> loc(#loc8)
    %16 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi64, #blocked3> loc(#loc8)
    %18 = ttg.convert_layout %17 : tensor<2x1xi64, #blocked3> -> tensor<2x1xi64, #blocked1> loc(#loc8)
    %19 = arith.muli %18, %cst_0 : tensor<2x1xi64, #blocked1> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<2x1xi64, #blocked1> -> tensor<2x2xi64, #blocked1> loc(#loc8)
    %21 = ttg.convert_layout %20 : tensor<2x2xi64, #blocked1> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc8)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi64, #blocked4> loc(#loc8)
    %24 = ttg.convert_layout %23 : tensor<1x2xi64, #blocked4> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %25 = arith.muli %24, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %26 = tt.broadcast %25 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %27 = arith.addi %21, %26 : tensor<2x2xi64, #blocked> loc(#loc8)
    %28 = tt.addptr %14, %27 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %29 = ttg.convert_layout %28 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %30 = tt.load %29 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %31 = ttg.convert_layout %13 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    %32 = ttg.convert_layout %30 : tensor<2x2xi64, #blocked> -> tensor<2x2xi64, #blocked5> loc(#loc9)
    tt.store %31, %32 : tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUF32DotTC (tritongpu-F32DotTC) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked2> loc(#loc2)
    %1 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi32, #blocked3> loc(#loc3)
    %3 = ttg.convert_layout %2 : tensor<2x1xi32, #blocked3> -> tensor<2x1xi32, #blocked1> loc(#loc4)
    %4 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc5)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi32, #blocked4> loc(#loc5)
    %6 = ttg.convert_layout %5 : tensor<1x2xi32, #blocked4> -> tensor<1x2xi32, #blocked> loc(#loc6)
    %7 = arith.muli %6, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %3 : tensor<2x1xi32, #blocked1> -> tensor<2x2xi32, #blocked1> loc(#loc4)
    %9 = ttg.convert_layout %8 : tensor<2x2xi32, #blocked1> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %10 = tt.broadcast %7 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %11 = arith.addi %9, %10 : tensor<2x2xi32, #blocked> loc(#loc4)
    %12 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %13 = tt.addptr %12, %11 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %14 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %15 = arith.extsi %0 : tensor<2xi32, #blocked2> to tensor<2xi64, #blocked2> loc(#loc8)
    %16 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi64, #blocked3> loc(#loc8)
    %18 = ttg.convert_layout %17 : tensor<2x1xi64, #blocked3> -> tensor<2x1xi64, #blocked1> loc(#loc8)
    %19 = arith.muli %18, %cst_0 : tensor<2x1xi64, #blocked1> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<2x1xi64, #blocked1> -> tensor<2x2xi64, #blocked1> loc(#loc8)
    %21 = ttg.convert_layout %20 : tensor<2x2xi64, #blocked1> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc8)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi64, #blocked4> loc(#loc8)
    %24 = ttg.convert_layout %23 : tensor<1x2xi64, #blocked4> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %25 = arith.muli %24, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %26 = tt.broadcast %25 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %27 = arith.addi %21, %26 : tensor<2x2xi64, #blocked> loc(#loc8)
    %28 = tt.addptr %14, %27 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %29 = ttg.convert_layout %28 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %30 = tt.load %29 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %31 = ttg.convert_layout %13 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    %32 = ttg.convert_layout %30 : tensor<2x2xi64, #blocked> -> tensor<2x2xi64, #blocked5> loc(#loc9)
    tt.store %31, %32 : tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked2> loc(#loc2)
    %1 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi32, #blocked3> loc(#loc3)
    %3 = ttg.convert_layout %2 : tensor<2x1xi32, #blocked3> -> tensor<2x1xi32, #blocked1> loc(#loc4)
    %4 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc5)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi32, #blocked4> loc(#loc5)
    %6 = ttg.convert_layout %5 : tensor<1x2xi32, #blocked4> -> tensor<1x2xi32, #blocked> loc(#loc6)
    %7 = arith.muli %6, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %3 : tensor<2x1xi32, #blocked1> -> tensor<2x2xi32, #blocked1> loc(#loc4)
    %9 = ttg.convert_layout %8 : tensor<2x2xi32, #blocked1> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %10 = tt.broadcast %7 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %11 = arith.addi %9, %10 : tensor<2x2xi32, #blocked> loc(#loc4)
    %12 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %13 = tt.addptr %12, %11 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %14 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %15 = arith.extsi %0 : tensor<2xi32, #blocked2> to tensor<2xi64, #blocked2> loc(#loc8)
    %16 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi64, #blocked3> loc(#loc8)
    %18 = ttg.convert_layout %17 : tensor<2x1xi64, #blocked3> -> tensor<2x1xi64, #blocked1> loc(#loc8)
    %19 = arith.muli %18, %cst_0 : tensor<2x1xi64, #blocked1> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<2x1xi64, #blocked1> -> tensor<2x2xi64, #blocked1> loc(#loc8)
    %21 = ttg.convert_layout %20 : tensor<2x2xi64, #blocked1> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc8)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi64, #blocked4> loc(#loc8)
    %24 = ttg.convert_layout %23 : tensor<1x2xi64, #blocked4> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %25 = arith.muli %24, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %26 = tt.broadcast %25 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %27 = arith.addi %21, %26 : tensor<2x2xi64, #blocked> loc(#loc8)
    %28 = tt.addptr %14, %27 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %29 = ttg.convert_layout %28 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %30 = tt.load %29 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %31 = ttg.convert_layout %13 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    %32 = ttg.convert_layout %30 : tensor<2x2xi64, #blocked> -> tensor<2x2xi64, #blocked5> loc(#loc9)
    tt.store %31, %32 : tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #blocked2> loc(#loc2)
    %1 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc3)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi32, #blocked3> loc(#loc3)
    %3 = ttg.convert_layout %2 : tensor<2x1xi32, #blocked3> -> tensor<2x1xi32, #blocked1> loc(#loc4)
    %4 = ttg.convert_layout %0 : tensor<2xi32, #blocked2> -> tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc5)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi32, #blocked4> loc(#loc5)
    %6 = ttg.convert_layout %5 : tensor<1x2xi32, #blocked4> -> tensor<1x2xi32, #blocked> loc(#loc6)
    %7 = arith.muli %6, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %3 : tensor<2x1xi32, #blocked1> -> tensor<2x2xi32, #blocked1> loc(#loc4)
    %9 = ttg.convert_layout %8 : tensor<2x2xi32, #blocked1> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %10 = tt.broadcast %7 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc4)
    %11 = arith.addi %9, %10 : tensor<2x2xi32, #blocked> loc(#loc4)
    %12 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %13 = tt.addptr %12, %11 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %14 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %15 = arith.extsi %0 : tensor<2xi32, #blocked2> to tensor<2xi64, #blocked2> loc(#loc8)
    %16 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc8)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1xi64, #blocked3> loc(#loc8)
    %18 = ttg.convert_layout %17 : tensor<2x1xi64, #blocked3> -> tensor<2x1xi64, #blocked1> loc(#loc8)
    %19 = arith.muli %18, %cst_0 : tensor<2x1xi64, #blocked1> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<2x1xi64, #blocked1> -> tensor<2x2xi64, #blocked1> loc(#loc8)
    %21 = ttg.convert_layout %20 : tensor<2x2xi64, #blocked1> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = ttg.convert_layout %15 : tensor<2xi64, #blocked2> -> tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc8)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x2xi64, #blocked4> loc(#loc8)
    %24 = ttg.convert_layout %23 : tensor<1x2xi64, #blocked4> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %25 = arith.muli %24, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %26 = tt.broadcast %25 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %27 = arith.addi %21, %26 : tensor<2x2xi64, #blocked> loc(#loc8)
    %28 = tt.addptr %14, %27 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %29 = ttg.convert_layout %28 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %30 = tt.load %29 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %31 = ttg.convert_layout %13 : tensor<2x2x!tt.ptr<i64>, #blocked> -> tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    %32 = ttg.convert_layout %30 : tensor<2x2xi64, #blocked> -> tensor<2x2xi64, #blocked5> loc(#loc9)
    tt.store %31, %32 : tensor<2x2x!tt.ptr<i64>, #blocked5> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonNvidiaGPUOptimizeDescriptorEncodingPass (triton-nvidia-optimize-descriptor-encoding) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonLoopAwareCSE (triton-loop-aware-cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %4 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %6 = arith.muli %5, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.broadcast %3 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.broadcast %6 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %9 = arith.addi %7, %8 : tensor<2x2xi32, #blocked> loc(#loc6)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %11 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %16 = arith.muli %15, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %19 = arith.muli %18, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %20 = tt.broadcast %19 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = arith.addi %17, %20 : tensor<2x2xi64, #blocked> loc(#loc8)
    %22 = tt.addptr %12, %21 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %23 = tt.load %22 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %11, %23 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUFuseNestedLoops (tritongpu-fuse-nested-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUAssignLatencies (tritongpu-assign-latencies) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUScheduleLoops (tritongpu-schedule-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// SoftwarePipeliner internal IR Dump After: LowerLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<2x1xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %5 = tt.broadcast %2 : tensor<2x1xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %6 = tt.broadcast %4 : tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>, tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %15 = tt.broadcast %14 : tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %18 = tt.broadcast %17 : tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>, tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    tt.return
  }
}


// -----// SoftwarePipeliner internal IR Dump After: ExpandLoops
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<2x1xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %5 = tt.broadcast %2 : tensor<2x1xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %6 = tt.broadcast %4 : tensor<1x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>, tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>>
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %15 = tt.broadcast %14 : tensor<2x1xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>}>> -> tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %18 = tt.broadcast %17 : tensor<1x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>> -> tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>, tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>>
    tt.return
  }
}


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonLoopAwareCSE (triton-loop-aware-cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUCoalesceAsyncCopy (tritongpu-coalesce-async-copy) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonNvidiaGPUOptimizeTMemLayoutsPass (triton-nvidia-optimize-tmem-layouts) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonNvidiaGPUInterleaveTMemPass (triton-nvidia-interleave-tmem) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonLoopAwareCSE (triton-loop-aware-cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUFenceInsertion (triton-nvidia-gpu-fence-insertion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before SCCP (sccp) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_1 : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonNvidiaGPUMMALoweringPass (triton-nvidia-mma-lowering) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUAllocateWarpGroups (tritongpu-allocate-warp-groups) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before SCFToControlFlowPass (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonTensorMemoryAllocationPass (triton-tensor-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUGlobalScratchAllocationPass (tritongpu-global-scratch-memory-allocation) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before TritonGPUProxyFenceInsertion (triton-nvidia-gpu-proxy-fence-insertion) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %1 = llvm.bitcast %0 : i32 to i32 loc(#loc1)
    %2 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc1)
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(i32)>  loc(#loc1)
    %4 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %5 = llvm.bitcast %4 : i64 to i64 loc(#loc1)
    %6 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc1)
    %7 = llvm.insertvalue %5, %6[0] : !llvm.struct<(i64)>  loc(#loc1)
    %8 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %9 = llvm.bitcast %8 : i64 to i64 loc(#loc1)
    %10 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc1)
    %11 = llvm.insertvalue %9, %10[0] : !llvm.struct<(i64)>  loc(#loc1)
    %12 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %13 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %14 = llvm.mlir.constant(127 : i32) : i32 loc(#loc2)
    %15 = llvm.and %13, %14 : i32 loc(#loc2)
    %16 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %17 = llvm.urem %15, %16 : i32 loc(#loc2)
    %18 = llvm.udiv %15, %16 : i32 loc(#loc2)
    %19 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %20 = nvgpu.cluster_id loc(#loc2)
    %21 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %22 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %23 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %24 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %25 = llvm.shl %17, %24 : i32 loc(#loc2)
    %26 = llvm.or %23, %25 : i32 loc(#loc2)
    %27 = llvm.mlir.constant(5 : i32) : i32 loc(#loc2)
    %28 = llvm.shl %18, %27 : i32 loc(#loc2)
    %29 = llvm.or %26, %28 : i32 loc(#loc2)
    %30 = llvm.mlir.constant(7 : i32) : i32 loc(#loc2)
    %31 = llvm.shl %19, %30 : i32 loc(#loc2)
    %32 = llvm.or %29, %31 : i32 loc(#loc2)
    %33 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %34 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %35 = llvm.and %32, %34 : i32 loc(#loc2)
    %36 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %37 = llvm.lshr %35, %36 : i32 loc(#loc2)
    %38 = llvm.xor %33, %37 : i32 loc(#loc2)
    %39 = llvm.xor %22, %38 : i32 loc(#loc2)
    %40 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %41 = llvm.xor %39, %40 : i32 loc(#loc2)
    %42 = llvm.add %41, %12 : i32 loc(#loc2)
    %43 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc2)
    %44 = llvm.insertvalue %42, %43[0] : !llvm.struct<(i32)>  loc(#loc2)
    %45 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %46 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %47 = llvm.mlir.constant(127 : i32) : i32 loc(#loc2)
    %48 = llvm.and %46, %47 : i32 loc(#loc2)
    %49 = llvm.mlir.constant(32 : i32) : i32 loc(#loc2)
    %50 = llvm.urem %48, %49 : i32 loc(#loc2)
    %51 = llvm.udiv %48, %49 : i32 loc(#loc2)
    %52 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %53 = nvgpu.cluster_id loc(#loc2)
    %54 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %55 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %56 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %57 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %58 = llvm.shl %50, %57 : i32 loc(#loc2)
    %59 = llvm.or %56, %58 : i32 loc(#loc2)
    %60 = llvm.mlir.constant(5 : i32) : i32 loc(#loc2)
    %61 = llvm.shl %51, %60 : i32 loc(#loc2)
    %62 = llvm.or %59, %61 : i32 loc(#loc2)
    %63 = llvm.mlir.constant(7 : i32) : i32 loc(#loc2)
    %64 = llvm.shl %52, %63 : i32 loc(#loc2)
    %65 = llvm.or %62, %64 : i32 loc(#loc2)
    %66 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %67 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %68 = llvm.and %65, %67 : i32 loc(#loc2)
    %69 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %70 = llvm.lshr %68, %69 : i32 loc(#loc2)
    %71 = llvm.xor %66, %70 : i32 loc(#loc2)
    %72 = llvm.xor %55, %71 : i32 loc(#loc2)
    %73 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %74 = llvm.xor %72, %73 : i32 loc(#loc2)
    %75 = llvm.add %74, %45 : i32 loc(#loc2)
    %76 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc2)
    %77 = llvm.insertvalue %75, %76[0] : !llvm.struct<(i32)>  loc(#loc2)
    %78 = llvm.extractvalue %44[0] : !llvm.struct<(i32)>  loc(#loc3)
    %79 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc3)
    %80 = llvm.insertvalue %78, %79[0] : !llvm.struct<(i32)>  loc(#loc3)
    %81 = llvm.extractvalue %77[0] : !llvm.struct<(i32)>  loc(#loc4)
    %82 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc4)
    %83 = llvm.insertvalue %81, %82[0] : !llvm.struct<(i32)>  loc(#loc4)
    %84 = llvm.extractvalue %83[0] : !llvm.struct<(i32)>  loc(#loc5)
    %85 = llvm.extractvalue %3[0] : !llvm.struct<(i32)>  loc(#loc5)
    %86 = llvm.mul %84, %85 : i32 loc(#loc5)
    %87 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %88 = llvm.insertvalue %86, %87[0] : !llvm.struct<(i32)>  loc(#loc5)
    %89 = llvm.extractvalue %80[0] : !llvm.struct<(i32)>  loc(#loc6)
    %90 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %91 = llvm.insertvalue %89, %90[0] : !llvm.struct<(i32)>  loc(#loc6)
    %92 = llvm.extractvalue %88[0] : !llvm.struct<(i32)>  loc(#loc6)
    %93 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %94 = llvm.insertvalue %92, %93[0] : !llvm.struct<(i32)>  loc(#loc6)
    %95 = llvm.extractvalue %91[0] : !llvm.struct<(i32)>  loc(#loc6)
    %96 = llvm.extractvalue %94[0] : !llvm.struct<(i32)>  loc(#loc6)
    %97 = llvm.add %95, %96 : i32 loc(#loc6)
    %98 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %99 = llvm.insertvalue %97, %98[0] : !llvm.struct<(i32)>  loc(#loc6)
    %100 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc7)
    %101 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc7)
    %102 = llvm.insertvalue %100, %101[0] : !llvm.struct<(ptr<1>)>  loc(#loc7)
    %103 = llvm.extractvalue %102[0] : !llvm.struct<(ptr<1>)>  loc(#loc7)
    %104 = llvm.extractvalue %99[0] : !llvm.struct<(i32)>  loc(#loc7)
    %105 = llvm.getelementptr %103[%104] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc7)
    %106 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc7)
    %107 = llvm.insertvalue %105, %106[0] : !llvm.struct<(ptr<1>)>  loc(#loc7)
    %108 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc8)
    %109 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc8)
    %110 = llvm.insertvalue %108, %109[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %111 = llvm.extractvalue %44[0] : !llvm.struct<(i32)>  loc(#loc8)
    %112 = llvm.sext %111 : i32 to i64 loc(#loc8)
    %113 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %114 = llvm.insertvalue %112, %113[0] : !llvm.struct<(i64)>  loc(#loc8)
    %115 = llvm.extractvalue %77[0] : !llvm.struct<(i32)>  loc(#loc8)
    %116 = llvm.sext %115 : i32 to i64 loc(#loc8)
    %117 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %118 = llvm.insertvalue %116, %117[0] : !llvm.struct<(i64)>  loc(#loc8)
    %119 = llvm.extractvalue %114[0] : !llvm.struct<(i64)>  loc(#loc8)
    %120 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %121 = llvm.insertvalue %119, %120[0] : !llvm.struct<(i64)>  loc(#loc8)
    %122 = llvm.extractvalue %121[0] : !llvm.struct<(i64)>  loc(#loc8)
    %123 = llvm.extractvalue %7[0] : !llvm.struct<(i64)>  loc(#loc8)
    %124 = llvm.mul %122, %123 : i64 loc(#loc8)
    %125 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %126 = llvm.insertvalue %124, %125[0] : !llvm.struct<(i64)>  loc(#loc8)
    %127 = llvm.extractvalue %126[0] : !llvm.struct<(i64)>  loc(#loc8)
    %128 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %129 = llvm.insertvalue %127, %128[0] : !llvm.struct<(i64)>  loc(#loc8)
    %130 = llvm.extractvalue %118[0] : !llvm.struct<(i64)>  loc(#loc8)
    %131 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %132 = llvm.insertvalue %130, %131[0] : !llvm.struct<(i64)>  loc(#loc8)
    %133 = llvm.extractvalue %132[0] : !llvm.struct<(i64)>  loc(#loc8)
    %134 = llvm.extractvalue %11[0] : !llvm.struct<(i64)>  loc(#loc8)
    %135 = llvm.mul %133, %134 : i64 loc(#loc8)
    %136 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %137 = llvm.insertvalue %135, %136[0] : !llvm.struct<(i64)>  loc(#loc8)
    %138 = llvm.extractvalue %137[0] : !llvm.struct<(i64)>  loc(#loc8)
    %139 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %140 = llvm.insertvalue %138, %139[0] : !llvm.struct<(i64)>  loc(#loc8)
    %141 = llvm.extractvalue %129[0] : !llvm.struct<(i64)>  loc(#loc8)
    %142 = llvm.extractvalue %140[0] : !llvm.struct<(i64)>  loc(#loc8)
    %143 = llvm.add %141, %142 : i64 loc(#loc8)
    %144 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %145 = llvm.insertvalue %143, %144[0] : !llvm.struct<(i64)>  loc(#loc8)
    %146 = llvm.extractvalue %110[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %147 = llvm.extractvalue %145[0] : !llvm.struct<(i64)>  loc(#loc8)
    %148 = llvm.getelementptr %146[%147] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc8)
    %149 = llvm.mlir.undef : !llvm.struct<(ptr<1>)> loc(#loc8)
    %150 = llvm.insertvalue %148, %149[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %151 = llvm.extractvalue %150[0] : !llvm.struct<(ptr<1>)>  loc(#loc8)
    %152 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %151 : (!llvm.ptr<1>) -> i64 loc(#loc8)
    %153 = llvm.bitcast %152 : i64 to vector<1xi64> loc(#loc8)
    %154 = llvm.mlir.constant(0 : index) : i32 loc(#loc8)
    %155 = llvm.extractelement %153[%154 : i32] : vector<1xi64> loc(#loc8)
    %156 = llvm.mlir.undef : !llvm.struct<(i64)> loc(#loc8)
    %157 = llvm.insertvalue %155, %156[0] : !llvm.struct<(i64)>  loc(#loc8)
    %158 = llvm.extractvalue %107[0] : !llvm.struct<(ptr<1>)>  loc(#loc9)
    %159 = llvm.extractvalue %157[0] : !llvm.struct<(i64)>  loc(#loc9)
    %160 = llvm.mlir.constant(0 : i32) : i32 loc(#loc9)
    %161 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc9)
    %162 = llvm.mlir.constant(127 : i32) : i32 loc(#loc9)
    %163 = llvm.and %161, %162 : i32 loc(#loc9)
    %164 = llvm.mlir.constant(32 : i32) : i32 loc(#loc9)
    %165 = llvm.urem %163, %164 : i32 loc(#loc9)
    %166 = llvm.udiv %163, %164 : i32 loc(#loc9)
    %167 = llvm.mlir.constant(28 : i32) : i32 loc(#loc9)
    %168 = llvm.and %165, %167 : i32 loc(#loc9)
    %169 = llvm.icmp "eq" %168, %160 : i32 loc(#loc9)
    %170 = llvm.mlir.constant(3 : i32) : i32 loc(#loc9)
    %171 = llvm.and %166, %170 : i32 loc(#loc9)
    %172 = llvm.icmp "eq" %171, %160 : i32 loc(#loc9)
    %173 = llvm.and %169, %172 : i1 loc(#loc9)
    %174 = llvm.mlir.undef : vector<1xi64> loc(#loc9)
    %175 = llvm.bitcast %159 : i64 to i64 loc(#loc9)
    %176 = llvm.mlir.constant(0 : i32) : i32 loc(#loc9)
    %177 = llvm.insertelement %175, %174[%176 : i32] : vector<1xi64> loc(#loc9)
    %178 = llvm.bitcast %177 : vector<1xi64> to i64 loc(#loc9)
    %179 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %178, %158, %173 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc9)
    llvm.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %28 = llvm.and %27, %7 : i32 loc(#loc2)
    %29 = llvm.urem %28, %6 : i32 loc(#loc2)
    %30 = llvm.udiv %28, %6 : i32 loc(#loc2)
    %31 = llvm.shl %29, %5 : i32 loc(#loc2)
    %32 = llvm.or %5, %31 : i32 loc(#loc2)
    %33 = llvm.shl %30, %11 : i32 loc(#loc2)
    %34 = llvm.or %32, %33 : i32 loc(#loc2)
    %35 = llvm.or %34, %5 : i32 loc(#loc2)
    %36 = llvm.and %35, %3 : i32 loc(#loc2)
    %37 = llvm.lshr %36, %4 : i32 loc(#loc2)
    %38 = llvm.xor %5, %37 : i32 loc(#loc2)
    %39 = llvm.xor %5, %38 : i32 loc(#loc2)
    %40 = llvm.xor %39, %5 : i32 loc(#loc2)
    %41 = llvm.add %40, %8 : i32 loc(#loc2)
    %42 = llvm.mul %41, %11 : i32 loc(#loc3)
    %43 = llvm.add %26, %42 : i32 loc(#loc4)
    %44 = llvm.getelementptr %arg1[%43] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %45 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %46 = llvm.sext %41 : i32 to i64 loc(#loc6)
    %47 = llvm.mul %45, %10 : i64 loc(#loc6)
    %48 = llvm.mul %46, %9 : i64 loc(#loc6)
    %49 = llvm.add %47, %48 : i64 loc(#loc6)
    %50 = llvm.getelementptr %arg0[%49] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %51 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %50 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %52 = llvm.bitcast %51 : i64 to vector<1xi64> loc(#loc6)
    %53 = llvm.extractelement %52[%8 : i32] : vector<1xi64> loc(#loc6)
    %54 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc7)
    %55 = llvm.and %54, %7 : i32 loc(#loc7)
    %56 = llvm.urem %55, %6 : i32 loc(#loc7)
    %57 = llvm.udiv %55, %6 : i32 loc(#loc7)
    %58 = llvm.and %56, %2 : i32 loc(#loc7)
    %59 = llvm.icmp "eq" %58, %5 : i32 loc(#loc7)
    %60 = llvm.and %57, %1 : i32 loc(#loc7)
    %61 = llvm.icmp "eq" %60, %5 : i32 loc(#loc7)
    %62 = llvm.and %59, %61 : i1 loc(#loc7)
    %63 = llvm.insertelement %53, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %64 = llvm.bitcast %63 : vector<1xi64> to i64 loc(#loc7)
    %65 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %64, %44, %62 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before ConvertWarpSpecializeToLLVM (convert-warp-specialize-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before ReconcileUnrealizedCastsPass (reconcile-unrealized-casts) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "cuda:86", ttg.tensor_memory_size = 0 : i32, "ttg.threads-per-warp" = 32 : i32, "ttg.total-num-warps" = 4 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @block_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg2: !llvm.ptr<1> loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>, ttg.global_scratch_memory_alignment = 1 : i32, ttg.global_scratch_memory_size = 0 : i32} {
    %0 = llvm.mlir.undef : vector<1xi64> loc(#loc1)
    %1 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(28 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(127 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(3 : i64) : i64 loc(#loc1)
    %10 = llvm.mlir.constant(2 : i64) : i64 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc2)
    %13 = llvm.and %12, %7 : i32 loc(#loc2)
    %14 = llvm.urem %13, %6 : i32 loc(#loc2)
    %15 = llvm.udiv %13, %6 : i32 loc(#loc2)
    %16 = llvm.shl %14, %5 : i32 loc(#loc2)
    %17 = llvm.or %5, %16 : i32 loc(#loc2)
    %18 = llvm.shl %15, %11 : i32 loc(#loc2)
    %19 = llvm.or %17, %18 : i32 loc(#loc2)
    %20 = llvm.or %19, %5 : i32 loc(#loc2)
    %21 = llvm.and %20, %4 : i32 loc(#loc2)
    %22 = llvm.lshr %21, %5 : i32 loc(#loc2)
    %23 = llvm.xor %5, %22 : i32 loc(#loc2)
    %24 = llvm.xor %5, %23 : i32 loc(#loc2)
    %25 = llvm.xor %24, %5 : i32 loc(#loc2)
    %26 = llvm.add %25, %8 : i32 loc(#loc2)
    %27 = llvm.and %20, %3 : i32 loc(#loc2)
    %28 = llvm.lshr %27, %4 : i32 loc(#loc2)
    %29 = llvm.xor %5, %28 : i32 loc(#loc2)
    %30 = llvm.xor %5, %29 : i32 loc(#loc2)
    %31 = llvm.xor %30, %5 : i32 loc(#loc2)
    %32 = llvm.add %31, %8 : i32 loc(#loc2)
    %33 = llvm.mul %32, %11 : i32 loc(#loc3)
    %34 = llvm.add %26, %33 : i32 loc(#loc4)
    %35 = llvm.getelementptr %arg1[%34] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i64 loc(#loc5)
    %36 = llvm.sext %26 : i32 to i64 loc(#loc6)
    %37 = llvm.sext %32 : i32 to i64 loc(#loc6)
    %38 = llvm.mul %36, %10 : i64 loc(#loc6)
    %39 = llvm.mul %37, %9 : i64 loc(#loc6)
    %40 = llvm.add %38, %39 : i64 loc(#loc6)
    %41 = llvm.getelementptr %arg0[%40] : (!llvm.ptr<1>, i64) -> !llvm.ptr<1>, i64 loc(#loc6)
    %42 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l" %41 : (!llvm.ptr<1>) -> i64 loc(#loc6)
    %43 = llvm.bitcast %42 : i64 to vector<1xi64> loc(#loc6)
    %44 = llvm.extractelement %43[%8 : i32] : vector<1xi64> loc(#loc6)
    %45 = llvm.and %14, %2 : i32 loc(#loc7)
    %46 = llvm.icmp "eq" %45, %5 : i32 loc(#loc7)
    %47 = llvm.and %15, %1 : i32 loc(#loc7)
    %48 = llvm.icmp "eq" %47, %5 : i32 loc(#loc7)
    %49 = llvm.and %46, %48 : i1 loc(#loc7)
    %50 = llvm.insertelement %44, %0[%5 : i32] : vector<1xi64> loc(#loc7)
    %51 = llvm.bitcast %50 : vector<1xi64> to i64 loc(#loc7)
    %52 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b" %51, %35, %49 : (i64, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc7)
    llvm.return loc(#loc8)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)


dict_keys(['source', 'ttir', 'ttgir', 'llir', 'ptx', 'cubin'])
===================== ttir =====================
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3> : tensor<1x2xi64> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<5> : tensor<1x2xi32> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32> loc(#loc3)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32> loc(#loc4)
    %3 = arith.muli %2, %cst_1 : tensor<1x2xi32> loc(#loc5)
    %4 = tt.broadcast %1 : tensor<2x1xi32> -> tensor<2x2xi32> loc(#loc6)
    %5 = tt.broadcast %3 : tensor<1x2xi32> -> tensor<2x2xi32> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<2x2xi32> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi32> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    %10 = arith.extsi %0 : tensor<2xi32> to tensor<2xi64> loc(#loc8)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<2xi64> -> tensor<2x1xi64> loc(#loc8)
    %12 = arith.muli %11, %cst_0 : tensor<2x1xi64> loc(#loc8)
    %13 = tt.broadcast %12 : tensor<2x1xi64> -> tensor<2x2xi64> loc(#loc8)
    %14 = tt.expand_dims %10 {axis = 0 : i32} : tensor<2xi64> -> tensor<1x2xi64> loc(#loc8)
    %15 = arith.muli %14, %cst : tensor<1x2xi64> loc(#loc8)
    %16 = tt.broadcast %15 : tensor<1x2xi64> -> tensor<2x2xi64> loc(#loc8)
    %17 = arith.addi %13, %16 : tensor<2x2xi64> loc(#loc8)
    %18 = tt.addptr %9, %17 : tensor<2x2x!tt.ptr<i64>>, tensor<2x2xi64> loc(#loc8)
    %19 = tt.load %18 : tensor<2x2x!tt.ptr<i64>> loc(#loc8)
    tt.store %8, %19 : tensor<2x2x!tt.ptr<i64>> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)

===================== ttgir =====================
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @block_kernel(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":13:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2> : tensor<2x1xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x2xi64, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi32, #blocked> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst : tensor<1x2xi32, #blocked> loc(#loc5)
    %5 = tt.broadcast %2 : tensor<2x1xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %6 = tt.broadcast %4 : tensor<1x2xi32, #blocked> -> tensor<2x2xi32, #blocked> loc(#loc6)
    %7 = arith.addi %5, %6 : tensor<2x2xi32, #blocked> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc7)
    %9 = tt.addptr %8, %7 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    %11 = arith.extsi %0 : tensor<2xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = arith.extsi %1 : tensor<2xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %13 = tt.expand_dims %11 {axis = 1 : i32} : tensor<2xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<2x1xi64, #blocked> loc(#loc8)
    %14 = arith.muli %13, %cst_0 : tensor<2x1xi64, #blocked> loc(#loc8)
    %15 = tt.broadcast %14 : tensor<2x1xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<2xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi64, #blocked> loc(#loc8)
    %17 = arith.muli %16, %cst_1 : tensor<1x2xi64, #blocked> loc(#loc8)
    %18 = tt.broadcast %17 : tensor<1x2xi64, #blocked> -> tensor<2x2xi64, #blocked> loc(#loc8)
    %19 = arith.addi %15, %18 : tensor<2x2xi64, #blocked> loc(#loc8)
    %20 = tt.addptr %10, %19 : tensor<2x2x!tt.ptr<i64>, #blocked>, tensor<2x2xi64, #blocked> loc(#loc8)
    %21 = tt.load %20 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc8)
    tt.store %9, %21 : tensor<2x2x!tt.ptr<i64>, #blocked> loc(#loc9)
    tt.return loc(#loc10)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":17:23)
#loc3 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:21)
#loc4 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:36)
#loc5 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:47)
#loc6 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":18:32)
#loc7 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:21)
#loc8 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:41)
#loc9 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:33)
#loc10 = loc("/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py":19:4)

===================== llir =====================
; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-p7:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @block_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) readnone captures(none) %2) local_unnamed_addr #0 !dbg !5 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %5 = and i32 %4, 1, !dbg !8
  %6 = lshr i32 %4, 1, !dbg !8
  %7 = and i32 %6, 1, !dbg !8
  %8 = mul nuw nsw i32 %7, 5, !dbg !9
  %9 = add nuw nsw i32 %8, %5, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr i64, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = shl nuw nsw i32 %5, 1, !dbg !12
  %narrow = mul nuw nsw i32 %7, 3, !dbg !12
  %narrow1 = add nuw nsw i32 %narrow, %12, !dbg !12
  %13 = zext nneg i32 %narrow1 to i64, !dbg !12
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l"(ptr addrspace(1) %14) #2, !dbg !12
  %16 = and i32 %4, 124, !dbg !13
  %17 = icmp eq i32 %16, 0, !dbg !13
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %15, ptr addrspace(1) %11, i1 %17) #2, !dbg !13
  ret void, !dbg !14
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef range(i32 0, 1024) i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "example2.py", directory: "/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "block_kernel", linkageName: "block_kernel", scope: !1, file: !1, line: 13, type: !6, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 17, column: 23, scope: !5)
!9 = !DILocation(line: 18, column: 47, scope: !5)
!10 = !DILocation(line: 18, column: 32, scope: !5)
!11 = !DILocation(line: 19, column: 21, scope: !5)
!12 = !DILocation(line: 19, column: 41, scope: !5)
!13 = !DILocation(line: 19, column: 33, scope: !5)
!14 = !DILocation(line: 19, column: 4, scope: !5)

===================== ptx =====================
//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_86
.address_size 64

	// .globl	block_kernel            // -- Begin function block_kernel
                                        // @block_kernel
.visible .entry block_kernel(
	.param .u64 .ptr .global .align 1 block_kernel_param_0,
	.param .u64 .ptr .global .align 1 block_kernel_param_1,
	.param .u64 .ptr .global .align 1 block_kernel_param_2
)
.reqntid 128
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;
	.loc	1 13 0                          // example2.py:13:0
$L__func_begin0:
	.loc	1 13 0                          // example2.py:13:0

// %bb.0:
	ld.param.b64 	%rd5, [block_kernel_param_0];
	ld.param.b64 	%rd6, [block_kernel_param_1];
$L__tmp0:
	.loc	1 17 23                         // example2.py:17:23
	mov.u32 	%r1, %tid.x;
	and.b32 	%r2, %r1, 1;
	bfe.u32 	%r3, %r1, 1, 1;
	.loc	1 18 32                         // example2.py:18:32
	mad.lo.s32 	%r4, %r3, 5, %r2;
	.loc	1 19 21                         // example2.py:19:21
	mul.wide.u32 	%rd7, %r4, 8;
	add.s64 	%rd4, %rd6, %rd7;
	.loc	1 19 41                         // example2.py:19:41
	shl.b32 	%r5, %r2, 1;
	mad.lo.s32 	%r6, %r3, 3, %r5;
	mul.wide.u32 	%rd8, %r6, 8;
	add.s64 	%rd2, %rd5, %rd8;
	// begin inline asm
	mov.u64 %rd3, 0x0;
	ld.global.b64 { %rd3 }, [ %rd2 + 0 ];
	// end inline asm
	.loc	1 19 33                         // example2.py:19:33
	and.b32 	%r7, %r1, 124;
	setp.eq.s32 	%p1, %r7, 0;
	// begin inline asm
	@%p1 st.global.b64 [ %rd4 + 0 ], { %rd3 };
	// end inline asm
	.loc	1 19 4                          // example2.py:19:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/mnt/home/douliyang/triton-workspace/triton-tutorial/tutorial/pipeline/example2.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 104                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x61 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 101                                 // DW_AT_name
.b8 120
.b8 97
.b8 109
.b8 112
.b8 108
.b8 101
.b8 50
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 109
.b8 110
.b8 116
.b8 47
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 100
.b8 111
.b8 117
.b8 108
.b8 105
.b8 121
.b8 97
.b8 110
.b8 103
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 119
.b8 111
.b8 114
.b8 107
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 45
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 47
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 47
.b8 112
.b8 105
.b8 112
.b8 101
.b8 108
.b8 105
.b8 110
.b8 101
.b8 0
	}
	.section	.debug_macinfo	{	}

===================== cubin =====================
Function:block_kernel
--:-:-:-:2	MOV R1, c[0x0][0x28];
--:-:0:-:1	S2R R4, SR_TID.X;
--:-:-:-:2	MOV R6, 0x8;
01:-:-:-:2	LOP3.LUT P0, RZ, R4.reuse, 0x7c, RZ, 0xc0, !PT;
--:-:-:-:2	SHF.R.U32.HI R3, RZ, 0x1, R4;
--:-:-:-:2	LOP3.LUT R0, R4, 0x1, RZ, 0xc0, !PT;
--:-:-:-:2	SGXT.U32 R3, R3, 0x1;
--:-:-:Y:5	SHF.L.U32 R2, R0, 0x1, RZ;
--:-:-:Y:4	IMAD R2, R3, 0x3, R2;
--:-:-:-:1	IMAD.WIDE.U32 R4, R2, R6, c[0x0][0x160];
--:-:-:-:6	@P0 EXIT;
--:-:-:-:2	ULDC.64 UR4, c[0x0][0x118];
--:-:2:-:1	LDG.E.64 R4, [R4.64];
--:-:-:Y:4	IMAD R3, R3, 0x5, R0;
--:-:-:Y:5	IMAD.WIDE.U32 R2, R3, R6, c[0x0][0x168];
04:-:-:-:1	STG.E.64 [R2.64], R4;
--:-:-:-:5	EXIT;
LBB0:
--:-:-:Y:0	BRA LBB0;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;
--:-:-:Y:0	NOP;


Matched AddIOp: %11 = arith.addi %9, %10 : tensor<2x2xi32, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>>
Matched AddIOp: %27 = arith.addi %21, %26 : tensor<2x2xi64, #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>>
