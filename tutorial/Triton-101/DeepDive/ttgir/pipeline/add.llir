module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 8192 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8>
  llvm.func @add_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32}, %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: !llvm.ptr<1>, %arg5: !llvm.ptr<1>) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(1024 : i32) : i32
    %1 = nvvm.read.ptx.sreg.ctaid.x : i32
    %2 = llvm.mul %1, %0 : i32
    %3 = llvm.mlir.constant(0 : index) : i32
    %4 = nvvm.read.ptx.sreg.tid.x : i32
    %5 = llvm.mlir.constant(127 : i32) : i32
    %6 = llvm.and %4, %5 : i32
    %7 = llvm.mlir.constant(32 : i32) : i32
    %8 = llvm.urem %6, %7 : i32
    %9 = llvm.udiv %6, %7 : i32
    %10 = llvm.mlir.constant(0 : i32) : i32
    %11 = nvgpu.cluster_id
    %12 = llvm.mlir.constant(0 : i32) : i32
    %13 = llvm.mlir.constant(0 : i32) : i32
    %14 = llvm.mlir.constant(0 : i32) : i32
    %15 = llvm.mlir.constant(0 : i32) : i32
    %16 = llvm.mlir.constant(0 : i32) : i32
    %17 = llvm.shl %8, %16 : i32
    %18 = llvm.or %15, %17 : i32
    %19 = llvm.mlir.constant(5 : i32) : i32
    %20 = llvm.shl %9, %19 : i32
    %21 = llvm.or %18, %20 : i32
    %22 = llvm.mlir.constant(7 : i32) : i32
    %23 = llvm.shl %10, %22 : i32
    %24 = llvm.or %21, %23 : i32
    %25 = llvm.mlir.constant(127 : i32) : i32
    %26 = llvm.and %24, %25 : i32
    %27 = llvm.mlir.constant(0 : i32) : i32
    %28 = llvm.lshr %26, %27 : i32
    %29 = llvm.mlir.constant(0 : i32) : i32
    %30 = llvm.mlir.constant(0 : i32) : i32
    %31 = llvm.or disjoint %28, %30 : i32
    %32 = llvm.xor %14, %31 : i32
    %33 = llvm.mlir.constant(0 : i32) : i32
    %34 = llvm.xor %32, %33 : i32
    %35 = llvm.mlir.constant(128 : i32) : i32
    %36 = llvm.xor %32, %35 : i32
    %37 = llvm.mlir.constant(256 : i32) : i32
    %38 = llvm.xor %32, %37 : i32
    %39 = llvm.mlir.constant(384 : i32) : i32
    %40 = llvm.xor %32, %39 : i32
    %41 = llvm.mlir.constant(512 : i32) : i32
    %42 = llvm.xor %32, %41 : i32
    %43 = llvm.mlir.constant(640 : i32) : i32
    %44 = llvm.xor %32, %43 : i32
    %45 = llvm.mlir.constant(768 : i32) : i32
    %46 = llvm.xor %32, %45 : i32
    %47 = llvm.mlir.constant(896 : i32) : i32
    %48 = llvm.xor %32, %47 : i32
    %49 = llvm.add %34, %3 : i32
    %50 = llvm.add %36, %3 : i32
    %51 = llvm.add %38, %3 : i32
    %52 = llvm.add %40, %3 : i32
    %53 = llvm.add %42, %3 : i32
    %54 = llvm.add %44, %3 : i32
    %55 = llvm.add %46, %3 : i32
    %56 = llvm.add %48, %3 : i32
    %57 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %58 = llvm.insertvalue %49, %57[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %59 = llvm.insertvalue %50, %58[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %60 = llvm.insertvalue %51, %59[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %61 = llvm.insertvalue %52, %60[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %62 = llvm.insertvalue %53, %61[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %63 = llvm.insertvalue %54, %62[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %64 = llvm.insertvalue %55, %63[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %65 = llvm.insertvalue %56, %64[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %66 = llvm.bitcast %2 : i32 to i32
    %67 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %68 = llvm.insertvalue %66, %67[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %69 = llvm.insertvalue %66, %68[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %70 = llvm.insertvalue %66, %69[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %71 = llvm.insertvalue %66, %70[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %72 = llvm.insertvalue %66, %71[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %73 = llvm.insertvalue %66, %72[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %74 = llvm.insertvalue %66, %73[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %75 = llvm.insertvalue %66, %74[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %76 = llvm.extractvalue %75[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %77 = llvm.extractvalue %75[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %78 = llvm.extractvalue %75[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %79 = llvm.extractvalue %75[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %80 = llvm.extractvalue %75[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %81 = llvm.extractvalue %75[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %82 = llvm.extractvalue %75[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %83 = llvm.extractvalue %75[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %84 = llvm.extractvalue %65[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %85 = llvm.extractvalue %65[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %86 = llvm.extractvalue %65[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %87 = llvm.extractvalue %65[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %88 = llvm.extractvalue %65[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %89 = llvm.extractvalue %65[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %90 = llvm.extractvalue %65[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %91 = llvm.extractvalue %65[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %92 = llvm.add %76, %84 : i32
    %93 = llvm.add %77, %85 : i32
    %94 = llvm.add %78, %86 : i32
    %95 = llvm.add %79, %87 : i32
    %96 = llvm.add %80, %88 : i32
    %97 = llvm.add %81, %89 : i32
    %98 = llvm.add %82, %90 : i32
    %99 = llvm.add %83, %91 : i32
    %100 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %101 = llvm.insertvalue %92, %100[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %102 = llvm.insertvalue %93, %101[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %103 = llvm.insertvalue %94, %102[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %104 = llvm.insertvalue %95, %103[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %105 = llvm.insertvalue %96, %104[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %106 = llvm.insertvalue %97, %105[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %107 = llvm.insertvalue %98, %106[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %108 = llvm.insertvalue %99, %107[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %109 = llvm.bitcast %arg3 : i32 to i32
    %110 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>
    %111 = llvm.insertvalue %109, %110[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %112 = llvm.insertvalue %109, %111[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %113 = llvm.insertvalue %109, %112[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %114 = llvm.insertvalue %109, %113[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %115 = llvm.insertvalue %109, %114[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %116 = llvm.insertvalue %109, %115[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %117 = llvm.insertvalue %109, %116[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %118 = llvm.insertvalue %109, %117[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %119 = llvm.extractvalue %108[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %120 = llvm.extractvalue %108[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %121 = llvm.extractvalue %108[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %122 = llvm.extractvalue %108[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %123 = llvm.extractvalue %108[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %124 = llvm.extractvalue %108[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %125 = llvm.extractvalue %108[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %126 = llvm.extractvalue %108[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %127 = llvm.extractvalue %118[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %128 = llvm.extractvalue %118[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %129 = llvm.extractvalue %118[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %130 = llvm.extractvalue %118[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %131 = llvm.extractvalue %118[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %132 = llvm.extractvalue %118[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %133 = llvm.extractvalue %118[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %134 = llvm.extractvalue %118[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %135 = llvm.icmp "slt" %119, %127 : i32
    %136 = llvm.icmp "slt" %120, %128 : i32
    %137 = llvm.icmp "slt" %121, %129 : i32
    %138 = llvm.icmp "slt" %122, %130 : i32
    %139 = llvm.icmp "slt" %123, %131 : i32
    %140 = llvm.icmp "slt" %124, %132 : i32
    %141 = llvm.icmp "slt" %125, %133 : i32
    %142 = llvm.icmp "slt" %126, %134 : i32
    %143 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>
    %144 = llvm.insertvalue %135, %143[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %145 = llvm.insertvalue %136, %144[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %146 = llvm.insertvalue %137, %145[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %147 = llvm.insertvalue %138, %146[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %148 = llvm.insertvalue %139, %147[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %149 = llvm.insertvalue %140, %148[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %150 = llvm.insertvalue %141, %149[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %151 = llvm.insertvalue %142, %150[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %152 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1>
    %153 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %154 = llvm.insertvalue %152, %153[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %155 = llvm.insertvalue %152, %154[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %156 = llvm.insertvalue %152, %155[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %157 = llvm.insertvalue %152, %156[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %158 = llvm.insertvalue %152, %157[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %159 = llvm.insertvalue %152, %158[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %160 = llvm.insertvalue %152, %159[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %161 = llvm.insertvalue %152, %160[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %162 = llvm.extractvalue %161[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %163 = llvm.extractvalue %161[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %164 = llvm.extractvalue %161[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %165 = llvm.extractvalue %161[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %166 = llvm.extractvalue %161[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %167 = llvm.extractvalue %161[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %168 = llvm.extractvalue %161[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %169 = llvm.extractvalue %161[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %170 = llvm.extractvalue %108[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %171 = llvm.extractvalue %108[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %172 = llvm.extractvalue %108[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %173 = llvm.extractvalue %108[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %174 = llvm.extractvalue %108[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %175 = llvm.extractvalue %108[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %176 = llvm.extractvalue %108[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %177 = llvm.extractvalue %108[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %178 = llvm.getelementptr %162[%170] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %179 = llvm.getelementptr %163[%171] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %180 = llvm.getelementptr %164[%172] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %181 = llvm.getelementptr %165[%173] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %182 = llvm.getelementptr %166[%174] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %183 = llvm.getelementptr %167[%175] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %184 = llvm.getelementptr %168[%176] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %185 = llvm.getelementptr %169[%177] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %186 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %187 = llvm.insertvalue %178, %186[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %188 = llvm.insertvalue %179, %187[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %189 = llvm.insertvalue %180, %188[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %190 = llvm.insertvalue %181, %189[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %191 = llvm.insertvalue %182, %190[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %192 = llvm.insertvalue %183, %191[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %193 = llvm.insertvalue %184, %192[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %194 = llvm.insertvalue %185, %193[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %195 = llvm.mlir.constant(0 : i32) : i32
    %196 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %197 = llvm.getelementptr %196[%195] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %198 = llvm.extractvalue %194[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %199 = llvm.extractvalue %194[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %200 = llvm.extractvalue %194[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %201 = llvm.extractvalue %194[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %202 = llvm.extractvalue %194[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %203 = llvm.extractvalue %194[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %204 = llvm.extractvalue %194[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %205 = llvm.extractvalue %194[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %206 = llvm.ptrtoint %198 : !llvm.ptr<1> to i64
    %207 = llvm.ptrtoint %199 : !llvm.ptr<1> to i64
    %208 = llvm.ptrtoint %200 : !llvm.ptr<1> to i64
    %209 = llvm.ptrtoint %201 : !llvm.ptr<1> to i64
    %210 = llvm.ptrtoint %202 : !llvm.ptr<1> to i64
    %211 = llvm.ptrtoint %203 : !llvm.ptr<1> to i64
    %212 = llvm.ptrtoint %204 : !llvm.ptr<1> to i64
    %213 = llvm.ptrtoint %205 : !llvm.ptr<1> to i64
    %214 = llvm.mlir.constant(0 : i32) : i32
    %215 = nvvm.read.ptx.sreg.tid.x : i32
    %216 = llvm.mlir.constant(127 : i32) : i32
    %217 = llvm.and %215, %216 : i32
    %218 = llvm.mlir.constant(32 : i32) : i32
    %219 = llvm.urem %217, %218 : i32
    %220 = llvm.udiv %217, %218 : i32
    %221 = llvm.mlir.constant(0 : i32) : i32
    %222 = llvm.mlir.constant(0 : i32) : i32
    %223 = llvm.mlir.constant(0 : i32) : i32
    %224 = llvm.mlir.constant(0 : i32) : i32
    %225 = llvm.shl %219, %224 : i32
    %226 = llvm.or %223, %225 : i32
    %227 = llvm.mlir.constant(5 : i32) : i32
    %228 = llvm.shl %220, %227 : i32
    %229 = llvm.or %226, %228 : i32
    %230 = llvm.mlir.constant(3 : i32) : i32
    %231 = llvm.and %229, %230 : i32
    %232 = llvm.mlir.constant(11 : i32) : i32
    %233 = llvm.shl %231, %232 : i32
    %234 = llvm.mlir.constant(3 : i32) : i32
    %235 = llvm.and %229, %234 : i32
    %236 = llvm.mlir.constant(5 : i32) : i32
    %237 = llvm.shl %235, %236 : i32
    %238 = llvm.mlir.constant(124 : i32) : i32
    %239 = llvm.and %229, %238 : i32
    %240 = llvm.mlir.constant(2 : i32) : i32
    %241 = llvm.shl %239, %240 : i32
    %242 = llvm.mlir.constant(0 : i32) : i32
    %243 = llvm.xor %237, %241 : i32
    %244 = llvm.or disjoint %233, %243 : i32
    %245 = llvm.xor %222, %244 : i32
    %246 = llvm.mlir.constant(8 : i32) : i32
    %247 = llvm.mul %214, %246 : i32
    %248 = llvm.xor %245, %247 : i32
    %249 = llvm.mlir.constant(0 : i32) : i32
    %250 = llvm.xor %248, %249 : i32
    %251 = llvm.mlir.constant(0 : i32) : i32
    %252 = llvm.add %250, %251 : i32
    %253 = llvm.getelementptr inbounds %197[%252] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %254 = llvm.mlir.undef : vector<2xi64>
    %255 = llvm.mlir.constant(0 : i32) : i32
    %256 = llvm.insertelement %206, %254[%255 : i32] : vector<2xi64>
    %257 = llvm.mlir.constant(1 : i32) : i32
    %258 = llvm.insertelement %210, %256[%257 : i32] : vector<2xi64>
    %259 = llvm.mlir.constant(true) : i1
    llvm.store %258, %253 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %260 = llvm.mlir.constant(512 : i32) : i32
    %261 = llvm.add %250, %260 : i32
    %262 = llvm.getelementptr inbounds %197[%261] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %263 = llvm.mlir.undef : vector<2xi64>
    %264 = llvm.mlir.constant(0 : i32) : i32
    %265 = llvm.insertelement %207, %263[%264 : i32] : vector<2xi64>
    %266 = llvm.mlir.constant(1 : i32) : i32
    %267 = llvm.insertelement %211, %265[%266 : i32] : vector<2xi64>
    %268 = llvm.mlir.constant(true) : i1
    llvm.store %267, %262 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %269 = llvm.mlir.constant(1024 : i32) : i32
    %270 = llvm.add %250, %269 : i32
    %271 = llvm.getelementptr inbounds %197[%270] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %272 = llvm.mlir.undef : vector<2xi64>
    %273 = llvm.mlir.constant(0 : i32) : i32
    %274 = llvm.insertelement %208, %272[%273 : i32] : vector<2xi64>
    %275 = llvm.mlir.constant(1 : i32) : i32
    %276 = llvm.insertelement %212, %274[%275 : i32] : vector<2xi64>
    %277 = llvm.mlir.constant(true) : i1
    llvm.store %276, %271 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %278 = llvm.mlir.constant(1536 : i32) : i32
    %279 = llvm.add %250, %278 : i32
    %280 = llvm.getelementptr inbounds %197[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %281 = llvm.mlir.undef : vector<2xi64>
    %282 = llvm.mlir.constant(0 : i32) : i32
    %283 = llvm.insertelement %209, %281[%282 : i32] : vector<2xi64>
    %284 = llvm.mlir.constant(1 : i32) : i32
    %285 = llvm.insertelement %213, %283[%284 : i32] : vector<2xi64>
    %286 = llvm.mlir.constant(true) : i1
    llvm.store %285, %280 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    nvvm.barrier0
    %287 = nvvm.read.ptx.sreg.tid.x : i32
    %288 = llvm.mlir.constant(127 : i32) : i32
    %289 = llvm.and %287, %288 : i32
    %290 = llvm.mlir.constant(32 : i32) : i32
    %291 = llvm.urem %289, %290 : i32
    %292 = llvm.udiv %289, %290 : i32
    %293 = llvm.mlir.constant(0 : i32) : i32
    %294 = llvm.mlir.constant(0 : i32) : i32
    %295 = llvm.mlir.constant(0 : i32) : i32
    %296 = llvm.mlir.constant(0 : i32) : i32
    %297 = llvm.shl %291, %296 : i32
    %298 = llvm.or %295, %297 : i32
    %299 = llvm.mlir.constant(5 : i32) : i32
    %300 = llvm.shl %292, %299 : i32
    %301 = llvm.or %298, %300 : i32
    %302 = llvm.mlir.constant(127 : i32) : i32
    %303 = llvm.and %301, %302 : i32
    %304 = llvm.mlir.constant(4 : i32) : i32
    %305 = llvm.shl %303, %304 : i32
    %306 = llvm.mlir.constant(0 : i32) : i32
    %307 = llvm.mlir.constant(0 : i32) : i32
    %308 = llvm.or disjoint %305, %307 : i32
    %309 = llvm.xor %294, %308 : i32
    %310 = llvm.mlir.constant(8 : i32) : i32
    %311 = llvm.mul %214, %310 : i32
    %312 = llvm.xor %309, %311 : i32
    %313 = llvm.mlir.constant(0 : i32) : i32
    %314 = llvm.xor %312, %313 : i32
    %315 = llvm.mlir.constant(0 : i32) : i32
    %316 = llvm.add %314, %315 : i32
    %317 = llvm.getelementptr inbounds %197[%316] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %318 = llvm.mlir.constant(true) : i1
    %319 = llvm.load %317 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %320 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %321 = llvm.mlir.constant(0 : i32) : i32
    %322 = llvm.extractelement %319[%321 : i32] : vector<2xi64>
    %323 = llvm.insertvalue %322, %320[0] : !llvm.struct<(i64, i64)> 
    %324 = llvm.mlir.constant(1 : i32) : i32
    %325 = llvm.extractelement %319[%324 : i32] : vector<2xi64>
    %326 = llvm.insertvalue %325, %323[1] : !llvm.struct<(i64, i64)> 
    %327 = llvm.extractvalue %326[0] : !llvm.struct<(i64, i64)> 
    %328 = llvm.extractvalue %326[1] : !llvm.struct<(i64, i64)> 
    %329 = llvm.mlir.undef : vector<2xi64>
    %330 = llvm.mlir.constant(0 : i32) : i32
    %331 = llvm.insertelement %327, %329[%330 : i32] : vector<2xi64>
    %332 = llvm.mlir.constant(1 : i32) : i32
    %333 = llvm.insertelement %328, %331[%332 : i32] : vector<2xi64>
    %334 = llvm.mlir.constant(0 : i32) : i32
    %335 = llvm.extractelement %333[%334 : i32] : vector<2xi64>
    %336 = llvm.mlir.constant(1 : i32) : i32
    %337 = llvm.extractelement %333[%336 : i32] : vector<2xi64>
    %338 = llvm.mlir.constant(2080 : i32) : i32
    %339 = llvm.xor %312, %338 : i32
    %340 = llvm.mlir.constant(0 : i32) : i32
    %341 = llvm.add %339, %340 : i32
    %342 = llvm.getelementptr inbounds %197[%341] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %343 = llvm.mlir.constant(true) : i1
    %344 = llvm.load %342 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %345 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %346 = llvm.mlir.constant(0 : i32) : i32
    %347 = llvm.extractelement %344[%346 : i32] : vector<2xi64>
    %348 = llvm.insertvalue %347, %345[0] : !llvm.struct<(i64, i64)> 
    %349 = llvm.mlir.constant(1 : i32) : i32
    %350 = llvm.extractelement %344[%349 : i32] : vector<2xi64>
    %351 = llvm.insertvalue %350, %348[1] : !llvm.struct<(i64, i64)> 
    %352 = llvm.extractvalue %351[0] : !llvm.struct<(i64, i64)> 
    %353 = llvm.extractvalue %351[1] : !llvm.struct<(i64, i64)> 
    %354 = llvm.mlir.undef : vector<2xi64>
    %355 = llvm.mlir.constant(0 : i32) : i32
    %356 = llvm.insertelement %352, %354[%355 : i32] : vector<2xi64>
    %357 = llvm.mlir.constant(1 : i32) : i32
    %358 = llvm.insertelement %353, %356[%357 : i32] : vector<2xi64>
    %359 = llvm.mlir.constant(0 : i32) : i32
    %360 = llvm.extractelement %358[%359 : i32] : vector<2xi64>
    %361 = llvm.mlir.constant(1 : i32) : i32
    %362 = llvm.extractelement %358[%361 : i32] : vector<2xi64>
    %363 = llvm.mlir.constant(4160 : i32) : i32
    %364 = llvm.xor %312, %363 : i32
    %365 = llvm.mlir.constant(0 : i32) : i32
    %366 = llvm.add %364, %365 : i32
    %367 = llvm.getelementptr inbounds %197[%366] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %368 = llvm.mlir.constant(true) : i1
    %369 = llvm.load %367 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %370 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %371 = llvm.mlir.constant(0 : i32) : i32
    %372 = llvm.extractelement %369[%371 : i32] : vector<2xi64>
    %373 = llvm.insertvalue %372, %370[0] : !llvm.struct<(i64, i64)> 
    %374 = llvm.mlir.constant(1 : i32) : i32
    %375 = llvm.extractelement %369[%374 : i32] : vector<2xi64>
    %376 = llvm.insertvalue %375, %373[1] : !llvm.struct<(i64, i64)> 
    %377 = llvm.extractvalue %376[0] : !llvm.struct<(i64, i64)> 
    %378 = llvm.extractvalue %376[1] : !llvm.struct<(i64, i64)> 
    %379 = llvm.mlir.undef : vector<2xi64>
    %380 = llvm.mlir.constant(0 : i32) : i32
    %381 = llvm.insertelement %377, %379[%380 : i32] : vector<2xi64>
    %382 = llvm.mlir.constant(1 : i32) : i32
    %383 = llvm.insertelement %378, %381[%382 : i32] : vector<2xi64>
    %384 = llvm.mlir.constant(0 : i32) : i32
    %385 = llvm.extractelement %383[%384 : i32] : vector<2xi64>
    %386 = llvm.mlir.constant(1 : i32) : i32
    %387 = llvm.extractelement %383[%386 : i32] : vector<2xi64>
    %388 = llvm.mlir.constant(6240 : i32) : i32
    %389 = llvm.xor %312, %388 : i32
    %390 = llvm.mlir.constant(0 : i32) : i32
    %391 = llvm.add %389, %390 : i32
    %392 = llvm.getelementptr inbounds %197[%391] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %393 = llvm.mlir.constant(true) : i1
    %394 = llvm.load %392 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %395 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %396 = llvm.mlir.constant(0 : i32) : i32
    %397 = llvm.extractelement %394[%396 : i32] : vector<2xi64>
    %398 = llvm.insertvalue %397, %395[0] : !llvm.struct<(i64, i64)> 
    %399 = llvm.mlir.constant(1 : i32) : i32
    %400 = llvm.extractelement %394[%399 : i32] : vector<2xi64>
    %401 = llvm.insertvalue %400, %398[1] : !llvm.struct<(i64, i64)> 
    %402 = llvm.extractvalue %401[0] : !llvm.struct<(i64, i64)> 
    %403 = llvm.extractvalue %401[1] : !llvm.struct<(i64, i64)> 
    %404 = llvm.mlir.undef : vector<2xi64>
    %405 = llvm.mlir.constant(0 : i32) : i32
    %406 = llvm.insertelement %402, %404[%405 : i32] : vector<2xi64>
    %407 = llvm.mlir.constant(1 : i32) : i32
    %408 = llvm.insertelement %403, %406[%407 : i32] : vector<2xi64>
    %409 = llvm.mlir.constant(0 : i32) : i32
    %410 = llvm.extractelement %408[%409 : i32] : vector<2xi64>
    %411 = llvm.mlir.constant(1 : i32) : i32
    %412 = llvm.extractelement %408[%411 : i32] : vector<2xi64>
    %413 = llvm.inttoptr %335 : i64 to !llvm.ptr<1>
    %414 = llvm.inttoptr %360 : i64 to !llvm.ptr<1>
    %415 = llvm.inttoptr %385 : i64 to !llvm.ptr<1>
    %416 = llvm.inttoptr %410 : i64 to !llvm.ptr<1>
    %417 = llvm.inttoptr %337 : i64 to !llvm.ptr<1>
    %418 = llvm.inttoptr %362 : i64 to !llvm.ptr<1>
    %419 = llvm.inttoptr %387 : i64 to !llvm.ptr<1>
    %420 = llvm.inttoptr %412 : i64 to !llvm.ptr<1>
    %421 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %422 = llvm.insertvalue %413, %421[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %423 = llvm.insertvalue %414, %422[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %424 = llvm.insertvalue %415, %423[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %425 = llvm.insertvalue %416, %424[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %426 = llvm.insertvalue %417, %425[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %427 = llvm.insertvalue %418, %426[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %428 = llvm.insertvalue %419, %427[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %429 = llvm.insertvalue %420, %428[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    nvvm.barrier0
    %430 = llvm.mlir.constant(0 : i32) : i32
    %431 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %432 = llvm.getelementptr %431[%430] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %433 = llvm.extractvalue %151[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %434 = llvm.extractvalue %151[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %435 = llvm.extractvalue %151[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %436 = llvm.extractvalue %151[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %437 = llvm.extractvalue %151[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %438 = llvm.extractvalue %151[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %439 = llvm.extractvalue %151[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %440 = llvm.extractvalue %151[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %441 = llvm.zext %433 : i1 to i8
    %442 = llvm.zext %434 : i1 to i8
    %443 = llvm.zext %435 : i1 to i8
    %444 = llvm.zext %436 : i1 to i8
    %445 = llvm.zext %437 : i1 to i8
    %446 = llvm.zext %438 : i1 to i8
    %447 = llvm.zext %439 : i1 to i8
    %448 = llvm.zext %440 : i1 to i8
    %449 = llvm.mlir.constant(0 : i32) : i32
    %450 = nvvm.read.ptx.sreg.tid.x : i32
    %451 = llvm.mlir.constant(127 : i32) : i32
    %452 = llvm.and %450, %451 : i32
    %453 = llvm.mlir.constant(32 : i32) : i32
    %454 = llvm.urem %452, %453 : i32
    %455 = llvm.udiv %452, %453 : i32
    %456 = llvm.mlir.constant(0 : i32) : i32
    %457 = llvm.mlir.constant(0 : i32) : i32
    %458 = llvm.mlir.constant(0 : i32) : i32
    %459 = llvm.mlir.constant(0 : i32) : i32
    %460 = llvm.shl %454, %459 : i32
    %461 = llvm.or %458, %460 : i32
    %462 = llvm.mlir.constant(5 : i32) : i32
    %463 = llvm.shl %455, %462 : i32
    %464 = llvm.or %461, %463 : i32
    %465 = llvm.mlir.constant(3 : i32) : i32
    %466 = llvm.and %464, %465 : i32
    %467 = llvm.mlir.constant(8 : i32) : i32
    %468 = llvm.shl %466, %467 : i32
    %469 = llvm.mlir.constant(3 : i32) : i32
    %470 = llvm.and %464, %469 : i32
    %471 = llvm.mlir.constant(5 : i32) : i32
    %472 = llvm.shl %470, %471 : i32
    %473 = llvm.mlir.constant(124 : i32) : i32
    %474 = llvm.and %464, %473 : i32
    %475 = llvm.mlir.constant(0 : i32) : i32
    %476 = llvm.lshr %474, %475 : i32
    %477 = llvm.mlir.constant(0 : i32) : i32
    %478 = llvm.xor %472, %476 : i32
    %479 = llvm.or disjoint %468, %478 : i32
    %480 = llvm.xor %457, %479 : i32
    %481 = llvm.mlir.constant(1 : i32) : i32
    %482 = llvm.mul %449, %481 : i32
    %483 = llvm.xor %480, %482 : i32
    %484 = llvm.mlir.constant(0 : i32) : i32
    %485 = llvm.xor %483, %484 : i32
    %486 = llvm.mlir.constant(0 : i32) : i32
    %487 = llvm.add %485, %486 : i32
    %488 = llvm.getelementptr inbounds %432[%487] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %489 = llvm.mlir.undef : vector<4xi8>
    %490 = llvm.mlir.constant(0 : i32) : i32
    %491 = llvm.insertelement %441, %489[%490 : i32] : vector<4xi8>
    %492 = llvm.mlir.constant(1 : i32) : i32
    %493 = llvm.insertelement %445, %491[%492 : i32] : vector<4xi8>
    %494 = llvm.mlir.constant(2 : i32) : i32
    %495 = llvm.insertelement %442, %493[%494 : i32] : vector<4xi8>
    %496 = llvm.mlir.constant(3 : i32) : i32
    %497 = llvm.insertelement %446, %495[%496 : i32] : vector<4xi8>
    %498 = llvm.mlir.constant(true) : i1
    llvm.store %497, %488 {alignment = 4 : i64} : vector<4xi8>, !llvm.ptr<3>
    %499 = llvm.mlir.constant(128 : i32) : i32
    %500 = llvm.add %485, %499 : i32
    %501 = llvm.getelementptr inbounds %432[%500] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %502 = llvm.mlir.undef : vector<4xi8>
    %503 = llvm.mlir.constant(0 : i32) : i32
    %504 = llvm.insertelement %443, %502[%503 : i32] : vector<4xi8>
    %505 = llvm.mlir.constant(1 : i32) : i32
    %506 = llvm.insertelement %447, %504[%505 : i32] : vector<4xi8>
    %507 = llvm.mlir.constant(2 : i32) : i32
    %508 = llvm.insertelement %444, %506[%507 : i32] : vector<4xi8>
    %509 = llvm.mlir.constant(3 : i32) : i32
    %510 = llvm.insertelement %448, %508[%509 : i32] : vector<4xi8>
    %511 = llvm.mlir.constant(true) : i1
    llvm.store %510, %501 {alignment = 4 : i64} : vector<4xi8>, !llvm.ptr<3>
    nvvm.barrier0
    %512 = nvvm.read.ptx.sreg.tid.x : i32
    %513 = llvm.mlir.constant(127 : i32) : i32
    %514 = llvm.and %512, %513 : i32
    %515 = llvm.mlir.constant(32 : i32) : i32
    %516 = llvm.urem %514, %515 : i32
    %517 = llvm.udiv %514, %515 : i32
    %518 = llvm.mlir.constant(0 : i32) : i32
    %519 = llvm.mlir.constant(0 : i32) : i32
    %520 = llvm.mlir.constant(0 : i32) : i32
    %521 = llvm.mlir.constant(0 : i32) : i32
    %522 = llvm.shl %516, %521 : i32
    %523 = llvm.or %520, %522 : i32
    %524 = llvm.mlir.constant(5 : i32) : i32
    %525 = llvm.shl %517, %524 : i32
    %526 = llvm.or %523, %525 : i32
    %527 = llvm.mlir.constant(31 : i32) : i32
    %528 = llvm.and %526, %527 : i32
    %529 = llvm.mlir.constant(2 : i32) : i32
    %530 = llvm.shl %528, %529 : i32
    %531 = llvm.mlir.constant(0 : i32) : i32
    %532 = llvm.mlir.constant(32 : i32) : i32
    %533 = llvm.and %526, %532 : i32
    %534 = llvm.icmp "eq" %533, %531 : i32
    %535 = llvm.mlir.constant(2 : i32) : i32
    %536 = llvm.select %534, %531, %535 : i1, i32
    %537 = llvm.mlir.constant(64 : i32) : i32
    %538 = llvm.and %526, %537 : i32
    %539 = llvm.icmp "eq" %538, %531 : i32
    %540 = llvm.mlir.constant(128 : i32) : i32
    %541 = llvm.select %539, %531, %540 : i1, i32
    %542 = llvm.or disjoint %536, %541 : i32
    %543 = llvm.or disjoint %542, %530 : i32
    %544 = llvm.xor %519, %543 : i32
    %545 = llvm.mlir.constant(1 : i32) : i32
    %546 = llvm.mul %449, %545 : i32
    %547 = llvm.xor %544, %546 : i32
    %548 = llvm.mlir.constant(0 : i32) : i32
    %549 = llvm.xor %547, %548 : i32
    %550 = llvm.mlir.constant(0 : i32) : i32
    %551 = llvm.add %549, %550 : i32
    %552 = llvm.getelementptr inbounds %432[%551] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %553 = llvm.mlir.constant(true) : i1
    %554 = llvm.load %552 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %555 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %556 = llvm.mlir.constant(0 : i32) : i32
    %557 = llvm.extractelement %554[%556 : i32] : vector<2xi8>
    %558 = llvm.insertvalue %557, %555[0] : !llvm.struct<(i8, i8)> 
    %559 = llvm.mlir.constant(1 : i32) : i32
    %560 = llvm.extractelement %554[%559 : i32] : vector<2xi8>
    %561 = llvm.insertvalue %560, %558[1] : !llvm.struct<(i8, i8)> 
    %562 = llvm.extractvalue %561[0] : !llvm.struct<(i8, i8)> 
    %563 = llvm.extractvalue %561[1] : !llvm.struct<(i8, i8)> 
    %564 = llvm.mlir.undef : vector<2xi8>
    %565 = llvm.mlir.constant(0 : i32) : i32
    %566 = llvm.insertelement %562, %564[%565 : i32] : vector<2xi8>
    %567 = llvm.mlir.constant(1 : i32) : i32
    %568 = llvm.insertelement %563, %566[%567 : i32] : vector<2xi8>
    %569 = llvm.mlir.constant(0 : i32) : i32
    %570 = llvm.extractelement %568[%569 : i32] : vector<2xi8>
    %571 = llvm.mlir.constant(1 : i32) : i32
    %572 = llvm.extractelement %568[%571 : i32] : vector<2xi8>
    %573 = llvm.mlir.constant(288 : i32) : i32
    %574 = llvm.xor %547, %573 : i32
    %575 = llvm.mlir.constant(0 : i32) : i32
    %576 = llvm.add %574, %575 : i32
    %577 = llvm.getelementptr inbounds %432[%576] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %578 = llvm.mlir.constant(true) : i1
    %579 = llvm.load %577 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %580 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %581 = llvm.mlir.constant(0 : i32) : i32
    %582 = llvm.extractelement %579[%581 : i32] : vector<2xi8>
    %583 = llvm.insertvalue %582, %580[0] : !llvm.struct<(i8, i8)> 
    %584 = llvm.mlir.constant(1 : i32) : i32
    %585 = llvm.extractelement %579[%584 : i32] : vector<2xi8>
    %586 = llvm.insertvalue %585, %583[1] : !llvm.struct<(i8, i8)> 
    %587 = llvm.extractvalue %586[0] : !llvm.struct<(i8, i8)> 
    %588 = llvm.extractvalue %586[1] : !llvm.struct<(i8, i8)> 
    %589 = llvm.mlir.undef : vector<2xi8>
    %590 = llvm.mlir.constant(0 : i32) : i32
    %591 = llvm.insertelement %587, %589[%590 : i32] : vector<2xi8>
    %592 = llvm.mlir.constant(1 : i32) : i32
    %593 = llvm.insertelement %588, %591[%592 : i32] : vector<2xi8>
    %594 = llvm.mlir.constant(0 : i32) : i32
    %595 = llvm.extractelement %593[%594 : i32] : vector<2xi8>
    %596 = llvm.mlir.constant(1 : i32) : i32
    %597 = llvm.extractelement %593[%596 : i32] : vector<2xi8>
    %598 = llvm.mlir.constant(576 : i32) : i32
    %599 = llvm.xor %547, %598 : i32
    %600 = llvm.mlir.constant(0 : i32) : i32
    %601 = llvm.add %599, %600 : i32
    %602 = llvm.getelementptr inbounds %432[%601] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %603 = llvm.mlir.constant(true) : i1
    %604 = llvm.load %602 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %605 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %606 = llvm.mlir.constant(0 : i32) : i32
    %607 = llvm.extractelement %604[%606 : i32] : vector<2xi8>
    %608 = llvm.insertvalue %607, %605[0] : !llvm.struct<(i8, i8)> 
    %609 = llvm.mlir.constant(1 : i32) : i32
    %610 = llvm.extractelement %604[%609 : i32] : vector<2xi8>
    %611 = llvm.insertvalue %610, %608[1] : !llvm.struct<(i8, i8)> 
    %612 = llvm.extractvalue %611[0] : !llvm.struct<(i8, i8)> 
    %613 = llvm.extractvalue %611[1] : !llvm.struct<(i8, i8)> 
    %614 = llvm.mlir.undef : vector<2xi8>
    %615 = llvm.mlir.constant(0 : i32) : i32
    %616 = llvm.insertelement %612, %614[%615 : i32] : vector<2xi8>
    %617 = llvm.mlir.constant(1 : i32) : i32
    %618 = llvm.insertelement %613, %616[%617 : i32] : vector<2xi8>
    %619 = llvm.mlir.constant(0 : i32) : i32
    %620 = llvm.extractelement %618[%619 : i32] : vector<2xi8>
    %621 = llvm.mlir.constant(1 : i32) : i32
    %622 = llvm.extractelement %618[%621 : i32] : vector<2xi8>
    %623 = llvm.mlir.constant(864 : i32) : i32
    %624 = llvm.xor %547, %623 : i32
    %625 = llvm.mlir.constant(0 : i32) : i32
    %626 = llvm.add %624, %625 : i32
    %627 = llvm.getelementptr inbounds %432[%626] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %628 = llvm.mlir.constant(true) : i1
    %629 = llvm.load %627 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %630 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %631 = llvm.mlir.constant(0 : i32) : i32
    %632 = llvm.extractelement %629[%631 : i32] : vector<2xi8>
    %633 = llvm.insertvalue %632, %630[0] : !llvm.struct<(i8, i8)> 
    %634 = llvm.mlir.constant(1 : i32) : i32
    %635 = llvm.extractelement %629[%634 : i32] : vector<2xi8>
    %636 = llvm.insertvalue %635, %633[1] : !llvm.struct<(i8, i8)> 
    %637 = llvm.extractvalue %636[0] : !llvm.struct<(i8, i8)> 
    %638 = llvm.extractvalue %636[1] : !llvm.struct<(i8, i8)> 
    %639 = llvm.mlir.undef : vector<2xi8>
    %640 = llvm.mlir.constant(0 : i32) : i32
    %641 = llvm.insertelement %637, %639[%640 : i32] : vector<2xi8>
    %642 = llvm.mlir.constant(1 : i32) : i32
    %643 = llvm.insertelement %638, %641[%642 : i32] : vector<2xi8>
    %644 = llvm.mlir.constant(0 : i32) : i32
    %645 = llvm.extractelement %643[%644 : i32] : vector<2xi8>
    %646 = llvm.mlir.constant(1 : i32) : i32
    %647 = llvm.extractelement %643[%646 : i32] : vector<2xi8>
    %648 = llvm.trunc %570 : i8 to i1
    %649 = llvm.trunc %595 : i8 to i1
    %650 = llvm.trunc %620 : i8 to i1
    %651 = llvm.trunc %645 : i8 to i1
    %652 = llvm.trunc %572 : i8 to i1
    %653 = llvm.trunc %597 : i8 to i1
    %654 = llvm.trunc %622 : i8 to i1
    %655 = llvm.trunc %647 : i8 to i1
    %656 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>
    %657 = llvm.insertvalue %648, %656[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %658 = llvm.insertvalue %649, %657[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %659 = llvm.insertvalue %650, %658[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %660 = llvm.insertvalue %651, %659[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %661 = llvm.insertvalue %652, %660[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %662 = llvm.insertvalue %653, %661[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %663 = llvm.insertvalue %654, %662[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %664 = llvm.insertvalue %655, %663[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %665 = llvm.extractvalue %429[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %666 = llvm.extractvalue %429[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %667 = llvm.extractvalue %429[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %668 = llvm.extractvalue %429[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %669 = llvm.extractvalue %429[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %670 = llvm.extractvalue %429[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %671 = llvm.extractvalue %429[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %672 = llvm.extractvalue %429[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %673 = llvm.extractvalue %664[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %674 = llvm.extractvalue %664[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %675 = llvm.extractvalue %664[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %676 = llvm.extractvalue %664[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %677 = llvm.extractvalue %664[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %678 = llvm.extractvalue %664[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %679 = llvm.extractvalue %664[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %680 = llvm.extractvalue %664[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %681 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %665, %673 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)>
    %682 = llvm.extractvalue %681[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %683 = llvm.bitcast %682 : i32 to vector<1xf32>
    %684 = llvm.extractvalue %681[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %685 = llvm.bitcast %684 : i32 to vector<1xf32>
    %686 = llvm.extractvalue %681[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %687 = llvm.bitcast %686 : i32 to vector<1xf32>
    %688 = llvm.extractvalue %681[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %689 = llvm.bitcast %688 : i32 to vector<1xf32>
    %690 = llvm.mlir.constant(0 : index) : i32
    %691 = llvm.extractelement %683[%690 : i32] : vector<1xf32>
    %692 = llvm.mlir.constant(0 : index) : i32
    %693 = llvm.extractelement %685[%692 : i32] : vector<1xf32>
    %694 = llvm.mlir.constant(0 : index) : i32
    %695 = llvm.extractelement %687[%694 : i32] : vector<1xf32>
    %696 = llvm.mlir.constant(0 : index) : i32
    %697 = llvm.extractelement %689[%696 : i32] : vector<1xf32>
    %698 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %669, %677 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)>
    %699 = llvm.extractvalue %698[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %700 = llvm.bitcast %699 : i32 to vector<1xf32>
    %701 = llvm.extractvalue %698[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %702 = llvm.bitcast %701 : i32 to vector<1xf32>
    %703 = llvm.extractvalue %698[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %704 = llvm.bitcast %703 : i32 to vector<1xf32>
    %705 = llvm.extractvalue %698[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %706 = llvm.bitcast %705 : i32 to vector<1xf32>
    %707 = llvm.mlir.constant(0 : index) : i32
    %708 = llvm.extractelement %700[%707 : i32] : vector<1xf32>
    %709 = llvm.mlir.constant(0 : index) : i32
    %710 = llvm.extractelement %702[%709 : i32] : vector<1xf32>
    %711 = llvm.mlir.constant(0 : index) : i32
    %712 = llvm.extractelement %704[%711 : i32] : vector<1xf32>
    %713 = llvm.mlir.constant(0 : index) : i32
    %714 = llvm.extractelement %706[%713 : i32] : vector<1xf32>
    %715 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %716 = llvm.insertvalue %691, %715[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %717 = llvm.insertvalue %693, %716[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %718 = llvm.insertvalue %695, %717[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %719 = llvm.insertvalue %697, %718[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %720 = llvm.insertvalue %708, %719[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %721 = llvm.insertvalue %710, %720[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %722 = llvm.insertvalue %712, %721[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %723 = llvm.insertvalue %714, %722[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    nvvm.barrier0
    %724 = llvm.mlir.constant(0 : i32) : i32
    %725 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %726 = llvm.getelementptr %725[%724] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %727 = llvm.extractvalue %723[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %728 = llvm.extractvalue %723[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %729 = llvm.extractvalue %723[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %730 = llvm.extractvalue %723[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %731 = llvm.extractvalue %723[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %732 = llvm.extractvalue %723[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %733 = llvm.extractvalue %723[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %734 = llvm.extractvalue %723[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %735 = llvm.mlir.constant(0 : i32) : i32
    %736 = nvvm.read.ptx.sreg.tid.x : i32
    %737 = llvm.mlir.constant(127 : i32) : i32
    %738 = llvm.and %736, %737 : i32
    %739 = llvm.mlir.constant(32 : i32) : i32
    %740 = llvm.urem %738, %739 : i32
    %741 = llvm.udiv %738, %739 : i32
    %742 = llvm.mlir.constant(0 : i32) : i32
    %743 = llvm.mlir.constant(0 : i32) : i32
    %744 = llvm.mlir.constant(0 : i32) : i32
    %745 = llvm.mlir.constant(0 : i32) : i32
    %746 = llvm.shl %740, %745 : i32
    %747 = llvm.or %744, %746 : i32
    %748 = llvm.mlir.constant(5 : i32) : i32
    %749 = llvm.shl %741, %748 : i32
    %750 = llvm.or %747, %749 : i32
    %751 = llvm.mlir.constant(127 : i32) : i32
    %752 = llvm.and %750, %751 : i32
    %753 = llvm.mlir.constant(4 : i32) : i32
    %754 = llvm.shl %752, %753 : i32
    %755 = llvm.mlir.constant(0 : i32) : i32
    %756 = llvm.mlir.constant(0 : i32) : i32
    %757 = llvm.or disjoint %754, %756 : i32
    %758 = llvm.xor %743, %757 : i32
    %759 = llvm.mlir.constant(4 : i32) : i32
    %760 = llvm.mul %735, %759 : i32
    %761 = llvm.xor %758, %760 : i32
    %762 = llvm.mlir.constant(0 : i32) : i32
    %763 = llvm.xor %761, %762 : i32
    %764 = llvm.mlir.constant(0 : i32) : i32
    %765 = llvm.add %763, %764 : i32
    %766 = llvm.getelementptr inbounds %726[%765] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %767 = llvm.mlir.undef : vector<4xf32>
    %768 = llvm.mlir.constant(0 : i32) : i32
    %769 = llvm.insertelement %727, %767[%768 : i32] : vector<4xf32>
    %770 = llvm.mlir.constant(1 : i32) : i32
    %771 = llvm.insertelement %728, %769[%770 : i32] : vector<4xf32>
    %772 = llvm.mlir.constant(2 : i32) : i32
    %773 = llvm.insertelement %729, %771[%772 : i32] : vector<4xf32>
    %774 = llvm.mlir.constant(3 : i32) : i32
    %775 = llvm.insertelement %730, %773[%774 : i32] : vector<4xf32>
    %776 = llvm.mlir.constant(true) : i1
    %777 = llvm.mlir.constant(0 : i32) : i32
    %778 = llvm.extractelement %775[%777 : i32] : vector<4xf32>
    %779 = llvm.mlir.constant(1 : i32) : i32
    %780 = llvm.extractelement %775[%779 : i32] : vector<4xf32>
    %781 = llvm.mlir.constant(2 : i32) : i32
    %782 = llvm.extractelement %775[%781 : i32] : vector<4xf32>
    %783 = llvm.mlir.constant(3 : i32) : i32
    %784 = llvm.extractelement %775[%783 : i32] : vector<4xf32>
    %785 = llvm.bitcast %778 : f32 to i32
    %786 = llvm.bitcast %780 : f32 to i32
    %787 = llvm.bitcast %782 : f32 to i32
    %788 = llvm.bitcast %784 : f32 to i32
    %789 = llvm.mlir.undef : vector<4xi32>
    %790 = llvm.mlir.constant(0 : i32) : i32
    %791 = llvm.insertelement %785, %789[%790 : i32] : vector<4xi32>
    %792 = llvm.mlir.constant(1 : i32) : i32
    %793 = llvm.insertelement %786, %791[%792 : i32] : vector<4xi32>
    %794 = llvm.mlir.constant(2 : i32) : i32
    %795 = llvm.insertelement %787, %793[%794 : i32] : vector<4xi32>
    %796 = llvm.mlir.constant(3 : i32) : i32
    %797 = llvm.insertelement %788, %795[%796 : i32] : vector<4xi32>
    llvm.store %797, %766 {alignment = 16 : i64} : vector<4xi32>, !llvm.ptr<3>
    nvvm.barrier0
    %798 = nvvm.read.ptx.sreg.tid.x : i32
    %799 = llvm.mlir.constant(127 : i32) : i32
    %800 = llvm.and %798, %799 : i32
    %801 = llvm.mlir.constant(32 : i32) : i32
    %802 = llvm.urem %800, %801 : i32
    %803 = llvm.udiv %800, %801 : i32
    %804 = llvm.mlir.constant(0 : i32) : i32
    %805 = llvm.mlir.constant(0 : i32) : i32
    %806 = llvm.mlir.constant(0 : i32) : i32
    %807 = llvm.mlir.constant(0 : i32) : i32
    %808 = llvm.shl %802, %807 : i32
    %809 = llvm.or %806, %808 : i32
    %810 = llvm.mlir.constant(5 : i32) : i32
    %811 = llvm.shl %803, %810 : i32
    %812 = llvm.or %809, %811 : i32
    %813 = llvm.mlir.constant(24 : i32) : i32
    %814 = llvm.and %812, %813 : i32
    %815 = llvm.mlir.constant(6 : i32) : i32
    %816 = llvm.shl %814, %815 : i32
    %817 = llvm.mlir.constant(7 : i32) : i32
    %818 = llvm.and %812, %817 : i32
    %819 = llvm.mlir.constant(4 : i32) : i32
    %820 = llvm.shl %818, %819 : i32
    %821 = llvm.mlir.constant(96 : i32) : i32
    %822 = llvm.and %812, %821 : i32
    %823 = llvm.mlir.constant(2 : i32) : i32
    %824 = llvm.shl %822, %823 : i32
    %825 = llvm.mlir.constant(0 : i32) : i32
    %826 = llvm.or disjoint %816, %820 : i32
    %827 = llvm.or disjoint %826, %824 : i32
    %828 = llvm.xor %805, %827 : i32
    %829 = llvm.mlir.constant(4 : i32) : i32
    %830 = llvm.mul %735, %829 : i32
    %831 = llvm.xor %828, %830 : i32
    %832 = llvm.mlir.constant(0 : i32) : i32
    %833 = llvm.xor %831, %832 : i32
    %834 = llvm.mlir.constant(0 : i32) : i32
    %835 = llvm.add %833, %834 : i32
    %836 = llvm.getelementptr inbounds %726[%835] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %837 = nvgpu.ldmatrix %836, m8n8, 16 : (!llvm.ptr<3>) -> !llvm.struct<(i32, i32, i32, i32)>
    %838 = llvm.extractvalue %837[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %839 = llvm.bitcast %838 : i32 to vector<1xf32>
    %840 = llvm.mlir.constant(0 : i32) : i32
    %841 = llvm.extractelement %839[%840 : i32] : vector<1xf32>
    %842 = llvm.extractvalue %837[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %843 = llvm.bitcast %842 : i32 to vector<1xf32>
    %844 = llvm.mlir.constant(0 : i32) : i32
    %845 = llvm.extractelement %843[%844 : i32] : vector<1xf32>
    %846 = llvm.extractvalue %837[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %847 = llvm.bitcast %846 : i32 to vector<1xf32>
    %848 = llvm.mlir.constant(0 : i32) : i32
    %849 = llvm.extractelement %847[%848 : i32] : vector<1xf32>
    %850 = llvm.extractvalue %837[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %851 = llvm.bitcast %850 : i32 to vector<1xf32>
    %852 = llvm.mlir.constant(0 : i32) : i32
    %853 = llvm.extractelement %851[%852 : i32] : vector<1xf32>
    nvvm.barrier0
    %854 = nvvm.read.ptx.sreg.tid.x : i32
    %855 = llvm.mlir.constant(127 : i32) : i32
    %856 = llvm.and %854, %855 : i32
    %857 = llvm.mlir.constant(32 : i32) : i32
    %858 = llvm.urem %856, %857 : i32
    %859 = llvm.udiv %856, %857 : i32
    %860 = llvm.mlir.constant(0 : i32) : i32
    %861 = llvm.mlir.constant(0 : i32) : i32
    %862 = llvm.mlir.constant(0 : i32) : i32
    %863 = llvm.mlir.constant(0 : i32) : i32
    %864 = llvm.shl %858, %863 : i32
    %865 = llvm.or %862, %864 : i32
    %866 = llvm.mlir.constant(5 : i32) : i32
    %867 = llvm.shl %859, %866 : i32
    %868 = llvm.or %865, %867 : i32
    %869 = llvm.mlir.constant(127 : i32) : i32
    %870 = llvm.and %868, %869 : i32
    %871 = llvm.mlir.constant(4 : i32) : i32
    %872 = llvm.shl %870, %871 : i32
    %873 = llvm.mlir.constant(0 : i32) : i32
    %874 = llvm.mlir.constant(0 : i32) : i32
    %875 = llvm.or disjoint %872, %874 : i32
    %876 = llvm.xor %861, %875 : i32
    %877 = llvm.mlir.constant(4 : i32) : i32
    %878 = llvm.mul %735, %877 : i32
    %879 = llvm.xor %876, %878 : i32
    %880 = llvm.mlir.constant(0 : i32) : i32
    %881 = llvm.xor %879, %880 : i32
    %882 = llvm.mlir.constant(0 : i32) : i32
    %883 = llvm.add %881, %882 : i32
    %884 = llvm.getelementptr inbounds %726[%883] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %885 = llvm.mlir.undef : vector<4xf32>
    %886 = llvm.mlir.constant(0 : i32) : i32
    %887 = llvm.insertelement %731, %885[%886 : i32] : vector<4xf32>
    %888 = llvm.mlir.constant(1 : i32) : i32
    %889 = llvm.insertelement %732, %887[%888 : i32] : vector<4xf32>
    %890 = llvm.mlir.constant(2 : i32) : i32
    %891 = llvm.insertelement %733, %889[%890 : i32] : vector<4xf32>
    %892 = llvm.mlir.constant(3 : i32) : i32
    %893 = llvm.insertelement %734, %891[%892 : i32] : vector<4xf32>
    %894 = llvm.mlir.constant(true) : i1
    %895 = llvm.mlir.constant(0 : i32) : i32
    %896 = llvm.extractelement %893[%895 : i32] : vector<4xf32>
    %897 = llvm.mlir.constant(1 : i32) : i32
    %898 = llvm.extractelement %893[%897 : i32] : vector<4xf32>
    %899 = llvm.mlir.constant(2 : i32) : i32
    %900 = llvm.extractelement %893[%899 : i32] : vector<4xf32>
    %901 = llvm.mlir.constant(3 : i32) : i32
    %902 = llvm.extractelement %893[%901 : i32] : vector<4xf32>
    %903 = llvm.bitcast %896 : f32 to i32
    %904 = llvm.bitcast %898 : f32 to i32
    %905 = llvm.bitcast %900 : f32 to i32
    %906 = llvm.bitcast %902 : f32 to i32
    %907 = llvm.mlir.undef : vector<4xi32>
    %908 = llvm.mlir.constant(0 : i32) : i32
    %909 = llvm.insertelement %903, %907[%908 : i32] : vector<4xi32>
    %910 = llvm.mlir.constant(1 : i32) : i32
    %911 = llvm.insertelement %904, %909[%910 : i32] : vector<4xi32>
    %912 = llvm.mlir.constant(2 : i32) : i32
    %913 = llvm.insertelement %905, %911[%912 : i32] : vector<4xi32>
    %914 = llvm.mlir.constant(3 : i32) : i32
    %915 = llvm.insertelement %906, %913[%914 : i32] : vector<4xi32>
    llvm.store %915, %884 {alignment = 16 : i64} : vector<4xi32>, !llvm.ptr<3>
    nvvm.barrier0
    %916 = nvvm.read.ptx.sreg.tid.x : i32
    %917 = llvm.mlir.constant(127 : i32) : i32
    %918 = llvm.and %916, %917 : i32
    %919 = llvm.mlir.constant(32 : i32) : i32
    %920 = llvm.urem %918, %919 : i32
    %921 = llvm.udiv %918, %919 : i32
    %922 = llvm.mlir.constant(0 : i32) : i32
    %923 = llvm.mlir.constant(0 : i32) : i32
    %924 = llvm.mlir.constant(0 : i32) : i32
    %925 = llvm.mlir.constant(0 : i32) : i32
    %926 = llvm.shl %920, %925 : i32
    %927 = llvm.or %924, %926 : i32
    %928 = llvm.mlir.constant(5 : i32) : i32
    %929 = llvm.shl %921, %928 : i32
    %930 = llvm.or %927, %929 : i32
    %931 = llvm.mlir.constant(24 : i32) : i32
    %932 = llvm.and %930, %931 : i32
    %933 = llvm.mlir.constant(6 : i32) : i32
    %934 = llvm.shl %932, %933 : i32
    %935 = llvm.mlir.constant(7 : i32) : i32
    %936 = llvm.and %930, %935 : i32
    %937 = llvm.mlir.constant(4 : i32) : i32
    %938 = llvm.shl %936, %937 : i32
    %939 = llvm.mlir.constant(96 : i32) : i32
    %940 = llvm.and %930, %939 : i32
    %941 = llvm.mlir.constant(2 : i32) : i32
    %942 = llvm.shl %940, %941 : i32
    %943 = llvm.mlir.constant(0 : i32) : i32
    %944 = llvm.or disjoint %934, %938 : i32
    %945 = llvm.or disjoint %944, %942 : i32
    %946 = llvm.xor %923, %945 : i32
    %947 = llvm.mlir.constant(4 : i32) : i32
    %948 = llvm.mul %735, %947 : i32
    %949 = llvm.xor %946, %948 : i32
    %950 = llvm.mlir.constant(0 : i32) : i32
    %951 = llvm.xor %949, %950 : i32
    %952 = llvm.mlir.constant(0 : i32) : i32
    %953 = llvm.add %951, %952 : i32
    %954 = llvm.getelementptr inbounds %726[%953] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %955 = nvgpu.ldmatrix %954, m8n8, 16 : (!llvm.ptr<3>) -> !llvm.struct<(i32, i32, i32, i32)>
    %956 = llvm.extractvalue %955[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %957 = llvm.bitcast %956 : i32 to vector<1xf32>
    %958 = llvm.mlir.constant(0 : i32) : i32
    %959 = llvm.extractelement %957[%958 : i32] : vector<1xf32>
    %960 = llvm.extractvalue %955[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %961 = llvm.bitcast %960 : i32 to vector<1xf32>
    %962 = llvm.mlir.constant(0 : i32) : i32
    %963 = llvm.extractelement %961[%962 : i32] : vector<1xf32>
    %964 = llvm.extractvalue %955[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %965 = llvm.bitcast %964 : i32 to vector<1xf32>
    %966 = llvm.mlir.constant(0 : i32) : i32
    %967 = llvm.extractelement %965[%966 : i32] : vector<1xf32>
    %968 = llvm.extractvalue %955[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %969 = llvm.bitcast %968 : i32 to vector<1xf32>
    %970 = llvm.mlir.constant(0 : i32) : i32
    %971 = llvm.extractelement %969[%970 : i32] : vector<1xf32>
    %972 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %973 = llvm.insertvalue %841, %972[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %974 = llvm.insertvalue %845, %973[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %975 = llvm.insertvalue %849, %974[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %976 = llvm.insertvalue %853, %975[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %977 = llvm.insertvalue %959, %976[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %978 = llvm.insertvalue %963, %977[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %979 = llvm.insertvalue %967, %978[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %980 = llvm.insertvalue %971, %979[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %981 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1>
    %982 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %983 = llvm.insertvalue %981, %982[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %984 = llvm.insertvalue %981, %983[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %985 = llvm.insertvalue %981, %984[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %986 = llvm.insertvalue %981, %985[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %987 = llvm.insertvalue %981, %986[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %988 = llvm.insertvalue %981, %987[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %989 = llvm.insertvalue %981, %988[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %990 = llvm.insertvalue %981, %989[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %991 = llvm.extractvalue %990[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %992 = llvm.extractvalue %990[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %993 = llvm.extractvalue %990[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %994 = llvm.extractvalue %990[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %995 = llvm.extractvalue %990[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %996 = llvm.extractvalue %990[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %997 = llvm.extractvalue %990[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %998 = llvm.extractvalue %990[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %999 = llvm.extractvalue %108[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1000 = llvm.extractvalue %108[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1001 = llvm.extractvalue %108[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1002 = llvm.extractvalue %108[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1003 = llvm.extractvalue %108[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1004 = llvm.extractvalue %108[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1005 = llvm.extractvalue %108[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1006 = llvm.extractvalue %108[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1007 = llvm.getelementptr %991[%999] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1008 = llvm.getelementptr %992[%1000] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1009 = llvm.getelementptr %993[%1001] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1010 = llvm.getelementptr %994[%1002] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1011 = llvm.getelementptr %995[%1003] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1012 = llvm.getelementptr %996[%1004] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1013 = llvm.getelementptr %997[%1005] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1014 = llvm.getelementptr %998[%1006] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1015 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %1016 = llvm.insertvalue %1007, %1015[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1017 = llvm.insertvalue %1008, %1016[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1018 = llvm.insertvalue %1009, %1017[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1019 = llvm.insertvalue %1010, %1018[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1020 = llvm.insertvalue %1011, %1019[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1021 = llvm.insertvalue %1012, %1020[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1022 = llvm.insertvalue %1013, %1021[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1023 = llvm.insertvalue %1014, %1022[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    nvvm.barrier0
    %1024 = llvm.mlir.constant(0 : i32) : i32
    %1025 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %1026 = llvm.getelementptr %1025[%1024] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1027 = llvm.extractvalue %1023[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1028 = llvm.extractvalue %1023[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1029 = llvm.extractvalue %1023[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1030 = llvm.extractvalue %1023[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1031 = llvm.extractvalue %1023[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1032 = llvm.extractvalue %1023[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1033 = llvm.extractvalue %1023[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1034 = llvm.extractvalue %1023[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1035 = llvm.ptrtoint %1027 : !llvm.ptr<1> to i64
    %1036 = llvm.ptrtoint %1028 : !llvm.ptr<1> to i64
    %1037 = llvm.ptrtoint %1029 : !llvm.ptr<1> to i64
    %1038 = llvm.ptrtoint %1030 : !llvm.ptr<1> to i64
    %1039 = llvm.ptrtoint %1031 : !llvm.ptr<1> to i64
    %1040 = llvm.ptrtoint %1032 : !llvm.ptr<1> to i64
    %1041 = llvm.ptrtoint %1033 : !llvm.ptr<1> to i64
    %1042 = llvm.ptrtoint %1034 : !llvm.ptr<1> to i64
    %1043 = llvm.mlir.constant(0 : i32) : i32
    %1044 = nvvm.read.ptx.sreg.tid.x : i32
    %1045 = llvm.mlir.constant(127 : i32) : i32
    %1046 = llvm.and %1044, %1045 : i32
    %1047 = llvm.mlir.constant(32 : i32) : i32
    %1048 = llvm.urem %1046, %1047 : i32
    %1049 = llvm.udiv %1046, %1047 : i32
    %1050 = llvm.mlir.constant(0 : i32) : i32
    %1051 = llvm.mlir.constant(0 : i32) : i32
    %1052 = llvm.mlir.constant(0 : i32) : i32
    %1053 = llvm.mlir.constant(0 : i32) : i32
    %1054 = llvm.shl %1048, %1053 : i32
    %1055 = llvm.or %1052, %1054 : i32
    %1056 = llvm.mlir.constant(5 : i32) : i32
    %1057 = llvm.shl %1049, %1056 : i32
    %1058 = llvm.or %1055, %1057 : i32
    %1059 = llvm.mlir.constant(3 : i32) : i32
    %1060 = llvm.and %1058, %1059 : i32
    %1061 = llvm.mlir.constant(11 : i32) : i32
    %1062 = llvm.shl %1060, %1061 : i32
    %1063 = llvm.mlir.constant(3 : i32) : i32
    %1064 = llvm.and %1058, %1063 : i32
    %1065 = llvm.mlir.constant(5 : i32) : i32
    %1066 = llvm.shl %1064, %1065 : i32
    %1067 = llvm.mlir.constant(124 : i32) : i32
    %1068 = llvm.and %1058, %1067 : i32
    %1069 = llvm.mlir.constant(2 : i32) : i32
    %1070 = llvm.shl %1068, %1069 : i32
    %1071 = llvm.mlir.constant(0 : i32) : i32
    %1072 = llvm.xor %1066, %1070 : i32
    %1073 = llvm.or disjoint %1062, %1072 : i32
    %1074 = llvm.xor %1051, %1073 : i32
    %1075 = llvm.mlir.constant(8 : i32) : i32
    %1076 = llvm.mul %1043, %1075 : i32
    %1077 = llvm.xor %1074, %1076 : i32
    %1078 = llvm.mlir.constant(0 : i32) : i32
    %1079 = llvm.xor %1077, %1078 : i32
    %1080 = llvm.mlir.constant(0 : i32) : i32
    %1081 = llvm.add %1079, %1080 : i32
    %1082 = llvm.getelementptr inbounds %1026[%1081] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1083 = llvm.mlir.undef : vector<2xi64>
    %1084 = llvm.mlir.constant(0 : i32) : i32
    %1085 = llvm.insertelement %1035, %1083[%1084 : i32] : vector<2xi64>
    %1086 = llvm.mlir.constant(1 : i32) : i32
    %1087 = llvm.insertelement %1039, %1085[%1086 : i32] : vector<2xi64>
    %1088 = llvm.mlir.constant(true) : i1
    llvm.store %1087, %1082 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %1089 = llvm.mlir.constant(512 : i32) : i32
    %1090 = llvm.add %1079, %1089 : i32
    %1091 = llvm.getelementptr inbounds %1026[%1090] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1092 = llvm.mlir.undef : vector<2xi64>
    %1093 = llvm.mlir.constant(0 : i32) : i32
    %1094 = llvm.insertelement %1036, %1092[%1093 : i32] : vector<2xi64>
    %1095 = llvm.mlir.constant(1 : i32) : i32
    %1096 = llvm.insertelement %1040, %1094[%1095 : i32] : vector<2xi64>
    %1097 = llvm.mlir.constant(true) : i1
    llvm.store %1096, %1091 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %1098 = llvm.mlir.constant(1024 : i32) : i32
    %1099 = llvm.add %1079, %1098 : i32
    %1100 = llvm.getelementptr inbounds %1026[%1099] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1101 = llvm.mlir.undef : vector<2xi64>
    %1102 = llvm.mlir.constant(0 : i32) : i32
    %1103 = llvm.insertelement %1037, %1101[%1102 : i32] : vector<2xi64>
    %1104 = llvm.mlir.constant(1 : i32) : i32
    %1105 = llvm.insertelement %1041, %1103[%1104 : i32] : vector<2xi64>
    %1106 = llvm.mlir.constant(true) : i1
    llvm.store %1105, %1100 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %1107 = llvm.mlir.constant(1536 : i32) : i32
    %1108 = llvm.add %1079, %1107 : i32
    %1109 = llvm.getelementptr inbounds %1026[%1108] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1110 = llvm.mlir.undef : vector<2xi64>
    %1111 = llvm.mlir.constant(0 : i32) : i32
    %1112 = llvm.insertelement %1038, %1110[%1111 : i32] : vector<2xi64>
    %1113 = llvm.mlir.constant(1 : i32) : i32
    %1114 = llvm.insertelement %1042, %1112[%1113 : i32] : vector<2xi64>
    %1115 = llvm.mlir.constant(true) : i1
    llvm.store %1114, %1109 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    nvvm.barrier0
    %1116 = nvvm.read.ptx.sreg.tid.x : i32
    %1117 = llvm.mlir.constant(127 : i32) : i32
    %1118 = llvm.and %1116, %1117 : i32
    %1119 = llvm.mlir.constant(32 : i32) : i32
    %1120 = llvm.urem %1118, %1119 : i32
    %1121 = llvm.udiv %1118, %1119 : i32
    %1122 = llvm.mlir.constant(0 : i32) : i32
    %1123 = llvm.mlir.constant(0 : i32) : i32
    %1124 = llvm.mlir.constant(0 : i32) : i32
    %1125 = llvm.mlir.constant(0 : i32) : i32
    %1126 = llvm.shl %1120, %1125 : i32
    %1127 = llvm.or %1124, %1126 : i32
    %1128 = llvm.mlir.constant(5 : i32) : i32
    %1129 = llvm.shl %1121, %1128 : i32
    %1130 = llvm.or %1127, %1129 : i32
    %1131 = llvm.mlir.constant(127 : i32) : i32
    %1132 = llvm.and %1130, %1131 : i32
    %1133 = llvm.mlir.constant(4 : i32) : i32
    %1134 = llvm.shl %1132, %1133 : i32
    %1135 = llvm.mlir.constant(0 : i32) : i32
    %1136 = llvm.mlir.constant(0 : i32) : i32
    %1137 = llvm.or disjoint %1134, %1136 : i32
    %1138 = llvm.xor %1123, %1137 : i32
    %1139 = llvm.mlir.constant(8 : i32) : i32
    %1140 = llvm.mul %1043, %1139 : i32
    %1141 = llvm.xor %1138, %1140 : i32
    %1142 = llvm.mlir.constant(0 : i32) : i32
    %1143 = llvm.xor %1141, %1142 : i32
    %1144 = llvm.mlir.constant(0 : i32) : i32
    %1145 = llvm.add %1143, %1144 : i32
    %1146 = llvm.getelementptr inbounds %1026[%1145] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1147 = llvm.mlir.constant(true) : i1
    %1148 = llvm.load %1146 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %1149 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %1150 = llvm.mlir.constant(0 : i32) : i32
    %1151 = llvm.extractelement %1148[%1150 : i32] : vector<2xi64>
    %1152 = llvm.insertvalue %1151, %1149[0] : !llvm.struct<(i64, i64)> 
    %1153 = llvm.mlir.constant(1 : i32) : i32
    %1154 = llvm.extractelement %1148[%1153 : i32] : vector<2xi64>
    %1155 = llvm.insertvalue %1154, %1152[1] : !llvm.struct<(i64, i64)> 
    %1156 = llvm.extractvalue %1155[0] : !llvm.struct<(i64, i64)> 
    %1157 = llvm.extractvalue %1155[1] : !llvm.struct<(i64, i64)> 
    %1158 = llvm.mlir.undef : vector<2xi64>
    %1159 = llvm.mlir.constant(0 : i32) : i32
    %1160 = llvm.insertelement %1156, %1158[%1159 : i32] : vector<2xi64>
    %1161 = llvm.mlir.constant(1 : i32) : i32
    %1162 = llvm.insertelement %1157, %1160[%1161 : i32] : vector<2xi64>
    %1163 = llvm.mlir.constant(0 : i32) : i32
    %1164 = llvm.extractelement %1162[%1163 : i32] : vector<2xi64>
    %1165 = llvm.mlir.constant(1 : i32) : i32
    %1166 = llvm.extractelement %1162[%1165 : i32] : vector<2xi64>
    %1167 = llvm.mlir.constant(2080 : i32) : i32
    %1168 = llvm.xor %1141, %1167 : i32
    %1169 = llvm.mlir.constant(0 : i32) : i32
    %1170 = llvm.add %1168, %1169 : i32
    %1171 = llvm.getelementptr inbounds %1026[%1170] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1172 = llvm.mlir.constant(true) : i1
    %1173 = llvm.load %1171 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %1174 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %1175 = llvm.mlir.constant(0 : i32) : i32
    %1176 = llvm.extractelement %1173[%1175 : i32] : vector<2xi64>
    %1177 = llvm.insertvalue %1176, %1174[0] : !llvm.struct<(i64, i64)> 
    %1178 = llvm.mlir.constant(1 : i32) : i32
    %1179 = llvm.extractelement %1173[%1178 : i32] : vector<2xi64>
    %1180 = llvm.insertvalue %1179, %1177[1] : !llvm.struct<(i64, i64)> 
    %1181 = llvm.extractvalue %1180[0] : !llvm.struct<(i64, i64)> 
    %1182 = llvm.extractvalue %1180[1] : !llvm.struct<(i64, i64)> 
    %1183 = llvm.mlir.undef : vector<2xi64>
    %1184 = llvm.mlir.constant(0 : i32) : i32
    %1185 = llvm.insertelement %1181, %1183[%1184 : i32] : vector<2xi64>
    %1186 = llvm.mlir.constant(1 : i32) : i32
    %1187 = llvm.insertelement %1182, %1185[%1186 : i32] : vector<2xi64>
    %1188 = llvm.mlir.constant(0 : i32) : i32
    %1189 = llvm.extractelement %1187[%1188 : i32] : vector<2xi64>
    %1190 = llvm.mlir.constant(1 : i32) : i32
    %1191 = llvm.extractelement %1187[%1190 : i32] : vector<2xi64>
    %1192 = llvm.mlir.constant(4160 : i32) : i32
    %1193 = llvm.xor %1141, %1192 : i32
    %1194 = llvm.mlir.constant(0 : i32) : i32
    %1195 = llvm.add %1193, %1194 : i32
    %1196 = llvm.getelementptr inbounds %1026[%1195] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1197 = llvm.mlir.constant(true) : i1
    %1198 = llvm.load %1196 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %1199 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %1200 = llvm.mlir.constant(0 : i32) : i32
    %1201 = llvm.extractelement %1198[%1200 : i32] : vector<2xi64>
    %1202 = llvm.insertvalue %1201, %1199[0] : !llvm.struct<(i64, i64)> 
    %1203 = llvm.mlir.constant(1 : i32) : i32
    %1204 = llvm.extractelement %1198[%1203 : i32] : vector<2xi64>
    %1205 = llvm.insertvalue %1204, %1202[1] : !llvm.struct<(i64, i64)> 
    %1206 = llvm.extractvalue %1205[0] : !llvm.struct<(i64, i64)> 
    %1207 = llvm.extractvalue %1205[1] : !llvm.struct<(i64, i64)> 
    %1208 = llvm.mlir.undef : vector<2xi64>
    %1209 = llvm.mlir.constant(0 : i32) : i32
    %1210 = llvm.insertelement %1206, %1208[%1209 : i32] : vector<2xi64>
    %1211 = llvm.mlir.constant(1 : i32) : i32
    %1212 = llvm.insertelement %1207, %1210[%1211 : i32] : vector<2xi64>
    %1213 = llvm.mlir.constant(0 : i32) : i32
    %1214 = llvm.extractelement %1212[%1213 : i32] : vector<2xi64>
    %1215 = llvm.mlir.constant(1 : i32) : i32
    %1216 = llvm.extractelement %1212[%1215 : i32] : vector<2xi64>
    %1217 = llvm.mlir.constant(6240 : i32) : i32
    %1218 = llvm.xor %1141, %1217 : i32
    %1219 = llvm.mlir.constant(0 : i32) : i32
    %1220 = llvm.add %1218, %1219 : i32
    %1221 = llvm.getelementptr inbounds %1026[%1220] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1222 = llvm.mlir.constant(true) : i1
    %1223 = llvm.load %1221 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %1224 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %1225 = llvm.mlir.constant(0 : i32) : i32
    %1226 = llvm.extractelement %1223[%1225 : i32] : vector<2xi64>
    %1227 = llvm.insertvalue %1226, %1224[0] : !llvm.struct<(i64, i64)> 
    %1228 = llvm.mlir.constant(1 : i32) : i32
    %1229 = llvm.extractelement %1223[%1228 : i32] : vector<2xi64>
    %1230 = llvm.insertvalue %1229, %1227[1] : !llvm.struct<(i64, i64)> 
    %1231 = llvm.extractvalue %1230[0] : !llvm.struct<(i64, i64)> 
    %1232 = llvm.extractvalue %1230[1] : !llvm.struct<(i64, i64)> 
    %1233 = llvm.mlir.undef : vector<2xi64>
    %1234 = llvm.mlir.constant(0 : i32) : i32
    %1235 = llvm.insertelement %1231, %1233[%1234 : i32] : vector<2xi64>
    %1236 = llvm.mlir.constant(1 : i32) : i32
    %1237 = llvm.insertelement %1232, %1235[%1236 : i32] : vector<2xi64>
    %1238 = llvm.mlir.constant(0 : i32) : i32
    %1239 = llvm.extractelement %1237[%1238 : i32] : vector<2xi64>
    %1240 = llvm.mlir.constant(1 : i32) : i32
    %1241 = llvm.extractelement %1237[%1240 : i32] : vector<2xi64>
    %1242 = llvm.inttoptr %1164 : i64 to !llvm.ptr<1>
    %1243 = llvm.inttoptr %1189 : i64 to !llvm.ptr<1>
    %1244 = llvm.inttoptr %1214 : i64 to !llvm.ptr<1>
    %1245 = llvm.inttoptr %1239 : i64 to !llvm.ptr<1>
    %1246 = llvm.inttoptr %1166 : i64 to !llvm.ptr<1>
    %1247 = llvm.inttoptr %1191 : i64 to !llvm.ptr<1>
    %1248 = llvm.inttoptr %1216 : i64 to !llvm.ptr<1>
    %1249 = llvm.inttoptr %1241 : i64 to !llvm.ptr<1>
    %1250 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %1251 = llvm.insertvalue %1242, %1250[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1252 = llvm.insertvalue %1243, %1251[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1253 = llvm.insertvalue %1244, %1252[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1254 = llvm.insertvalue %1245, %1253[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1255 = llvm.insertvalue %1246, %1254[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1256 = llvm.insertvalue %1247, %1255[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1257 = llvm.insertvalue %1248, %1256[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1258 = llvm.insertvalue %1249, %1257[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    nvvm.barrier0
    %1259 = llvm.mlir.constant(0 : i32) : i32
    %1260 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %1261 = llvm.getelementptr %1260[%1259] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1262 = llvm.extractvalue %151[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1263 = llvm.extractvalue %151[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1264 = llvm.extractvalue %151[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1265 = llvm.extractvalue %151[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1266 = llvm.extractvalue %151[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1267 = llvm.extractvalue %151[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1268 = llvm.extractvalue %151[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1269 = llvm.extractvalue %151[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1270 = llvm.zext %1262 : i1 to i8
    %1271 = llvm.zext %1263 : i1 to i8
    %1272 = llvm.zext %1264 : i1 to i8
    %1273 = llvm.zext %1265 : i1 to i8
    %1274 = llvm.zext %1266 : i1 to i8
    %1275 = llvm.zext %1267 : i1 to i8
    %1276 = llvm.zext %1268 : i1 to i8
    %1277 = llvm.zext %1269 : i1 to i8
    %1278 = llvm.mlir.constant(0 : i32) : i32
    %1279 = nvvm.read.ptx.sreg.tid.x : i32
    %1280 = llvm.mlir.constant(127 : i32) : i32
    %1281 = llvm.and %1279, %1280 : i32
    %1282 = llvm.mlir.constant(32 : i32) : i32
    %1283 = llvm.urem %1281, %1282 : i32
    %1284 = llvm.udiv %1281, %1282 : i32
    %1285 = llvm.mlir.constant(0 : i32) : i32
    %1286 = llvm.mlir.constant(0 : i32) : i32
    %1287 = llvm.mlir.constant(0 : i32) : i32
    %1288 = llvm.mlir.constant(0 : i32) : i32
    %1289 = llvm.shl %1283, %1288 : i32
    %1290 = llvm.or %1287, %1289 : i32
    %1291 = llvm.mlir.constant(5 : i32) : i32
    %1292 = llvm.shl %1284, %1291 : i32
    %1293 = llvm.or %1290, %1292 : i32
    %1294 = llvm.mlir.constant(3 : i32) : i32
    %1295 = llvm.and %1293, %1294 : i32
    %1296 = llvm.mlir.constant(8 : i32) : i32
    %1297 = llvm.shl %1295, %1296 : i32
    %1298 = llvm.mlir.constant(3 : i32) : i32
    %1299 = llvm.and %1293, %1298 : i32
    %1300 = llvm.mlir.constant(5 : i32) : i32
    %1301 = llvm.shl %1299, %1300 : i32
    %1302 = llvm.mlir.constant(124 : i32) : i32
    %1303 = llvm.and %1293, %1302 : i32
    %1304 = llvm.mlir.constant(0 : i32) : i32
    %1305 = llvm.lshr %1303, %1304 : i32
    %1306 = llvm.mlir.constant(0 : i32) : i32
    %1307 = llvm.xor %1301, %1305 : i32
    %1308 = llvm.or disjoint %1297, %1307 : i32
    %1309 = llvm.xor %1286, %1308 : i32
    %1310 = llvm.mlir.constant(1 : i32) : i32
    %1311 = llvm.mul %1278, %1310 : i32
    %1312 = llvm.xor %1309, %1311 : i32
    %1313 = llvm.mlir.constant(0 : i32) : i32
    %1314 = llvm.xor %1312, %1313 : i32
    %1315 = llvm.mlir.constant(0 : i32) : i32
    %1316 = llvm.add %1314, %1315 : i32
    %1317 = llvm.getelementptr inbounds %1261[%1316] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1318 = llvm.mlir.undef : vector<4xi8>
    %1319 = llvm.mlir.constant(0 : i32) : i32
    %1320 = llvm.insertelement %1270, %1318[%1319 : i32] : vector<4xi8>
    %1321 = llvm.mlir.constant(1 : i32) : i32
    %1322 = llvm.insertelement %1274, %1320[%1321 : i32] : vector<4xi8>
    %1323 = llvm.mlir.constant(2 : i32) : i32
    %1324 = llvm.insertelement %1271, %1322[%1323 : i32] : vector<4xi8>
    %1325 = llvm.mlir.constant(3 : i32) : i32
    %1326 = llvm.insertelement %1275, %1324[%1325 : i32] : vector<4xi8>
    %1327 = llvm.mlir.constant(true) : i1
    llvm.store %1326, %1317 {alignment = 4 : i64} : vector<4xi8>, !llvm.ptr<3>
    %1328 = llvm.mlir.constant(128 : i32) : i32
    %1329 = llvm.add %1314, %1328 : i32
    %1330 = llvm.getelementptr inbounds %1261[%1329] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1331 = llvm.mlir.undef : vector<4xi8>
    %1332 = llvm.mlir.constant(0 : i32) : i32
    %1333 = llvm.insertelement %1272, %1331[%1332 : i32] : vector<4xi8>
    %1334 = llvm.mlir.constant(1 : i32) : i32
    %1335 = llvm.insertelement %1276, %1333[%1334 : i32] : vector<4xi8>
    %1336 = llvm.mlir.constant(2 : i32) : i32
    %1337 = llvm.insertelement %1273, %1335[%1336 : i32] : vector<4xi8>
    %1338 = llvm.mlir.constant(3 : i32) : i32
    %1339 = llvm.insertelement %1277, %1337[%1338 : i32] : vector<4xi8>
    %1340 = llvm.mlir.constant(true) : i1
    llvm.store %1339, %1330 {alignment = 4 : i64} : vector<4xi8>, !llvm.ptr<3>
    nvvm.barrier0
    %1341 = nvvm.read.ptx.sreg.tid.x : i32
    %1342 = llvm.mlir.constant(127 : i32) : i32
    %1343 = llvm.and %1341, %1342 : i32
    %1344 = llvm.mlir.constant(32 : i32) : i32
    %1345 = llvm.urem %1343, %1344 : i32
    %1346 = llvm.udiv %1343, %1344 : i32
    %1347 = llvm.mlir.constant(0 : i32) : i32
    %1348 = llvm.mlir.constant(0 : i32) : i32
    %1349 = llvm.mlir.constant(0 : i32) : i32
    %1350 = llvm.mlir.constant(0 : i32) : i32
    %1351 = llvm.shl %1345, %1350 : i32
    %1352 = llvm.or %1349, %1351 : i32
    %1353 = llvm.mlir.constant(5 : i32) : i32
    %1354 = llvm.shl %1346, %1353 : i32
    %1355 = llvm.or %1352, %1354 : i32
    %1356 = llvm.mlir.constant(31 : i32) : i32
    %1357 = llvm.and %1355, %1356 : i32
    %1358 = llvm.mlir.constant(2 : i32) : i32
    %1359 = llvm.shl %1357, %1358 : i32
    %1360 = llvm.mlir.constant(0 : i32) : i32
    %1361 = llvm.mlir.constant(32 : i32) : i32
    %1362 = llvm.and %1355, %1361 : i32
    %1363 = llvm.icmp "eq" %1362, %1360 : i32
    %1364 = llvm.mlir.constant(2 : i32) : i32
    %1365 = llvm.select %1363, %1360, %1364 : i1, i32
    %1366 = llvm.mlir.constant(64 : i32) : i32
    %1367 = llvm.and %1355, %1366 : i32
    %1368 = llvm.icmp "eq" %1367, %1360 : i32
    %1369 = llvm.mlir.constant(128 : i32) : i32
    %1370 = llvm.select %1368, %1360, %1369 : i1, i32
    %1371 = llvm.or disjoint %1365, %1370 : i32
    %1372 = llvm.or disjoint %1371, %1359 : i32
    %1373 = llvm.xor %1348, %1372 : i32
    %1374 = llvm.mlir.constant(1 : i32) : i32
    %1375 = llvm.mul %1278, %1374 : i32
    %1376 = llvm.xor %1373, %1375 : i32
    %1377 = llvm.mlir.constant(0 : i32) : i32
    %1378 = llvm.xor %1376, %1377 : i32
    %1379 = llvm.mlir.constant(0 : i32) : i32
    %1380 = llvm.add %1378, %1379 : i32
    %1381 = llvm.getelementptr inbounds %1261[%1380] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1382 = llvm.mlir.constant(true) : i1
    %1383 = llvm.load %1381 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %1384 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %1385 = llvm.mlir.constant(0 : i32) : i32
    %1386 = llvm.extractelement %1383[%1385 : i32] : vector<2xi8>
    %1387 = llvm.insertvalue %1386, %1384[0] : !llvm.struct<(i8, i8)> 
    %1388 = llvm.mlir.constant(1 : i32) : i32
    %1389 = llvm.extractelement %1383[%1388 : i32] : vector<2xi8>
    %1390 = llvm.insertvalue %1389, %1387[1] : !llvm.struct<(i8, i8)> 
    %1391 = llvm.extractvalue %1390[0] : !llvm.struct<(i8, i8)> 
    %1392 = llvm.extractvalue %1390[1] : !llvm.struct<(i8, i8)> 
    %1393 = llvm.mlir.undef : vector<2xi8>
    %1394 = llvm.mlir.constant(0 : i32) : i32
    %1395 = llvm.insertelement %1391, %1393[%1394 : i32] : vector<2xi8>
    %1396 = llvm.mlir.constant(1 : i32) : i32
    %1397 = llvm.insertelement %1392, %1395[%1396 : i32] : vector<2xi8>
    %1398 = llvm.mlir.constant(0 : i32) : i32
    %1399 = llvm.extractelement %1397[%1398 : i32] : vector<2xi8>
    %1400 = llvm.mlir.constant(1 : i32) : i32
    %1401 = llvm.extractelement %1397[%1400 : i32] : vector<2xi8>
    %1402 = llvm.mlir.constant(288 : i32) : i32
    %1403 = llvm.xor %1376, %1402 : i32
    %1404 = llvm.mlir.constant(0 : i32) : i32
    %1405 = llvm.add %1403, %1404 : i32
    %1406 = llvm.getelementptr inbounds %1261[%1405] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1407 = llvm.mlir.constant(true) : i1
    %1408 = llvm.load %1406 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %1409 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %1410 = llvm.mlir.constant(0 : i32) : i32
    %1411 = llvm.extractelement %1408[%1410 : i32] : vector<2xi8>
    %1412 = llvm.insertvalue %1411, %1409[0] : !llvm.struct<(i8, i8)> 
    %1413 = llvm.mlir.constant(1 : i32) : i32
    %1414 = llvm.extractelement %1408[%1413 : i32] : vector<2xi8>
    %1415 = llvm.insertvalue %1414, %1412[1] : !llvm.struct<(i8, i8)> 
    %1416 = llvm.extractvalue %1415[0] : !llvm.struct<(i8, i8)> 
    %1417 = llvm.extractvalue %1415[1] : !llvm.struct<(i8, i8)> 
    %1418 = llvm.mlir.undef : vector<2xi8>
    %1419 = llvm.mlir.constant(0 : i32) : i32
    %1420 = llvm.insertelement %1416, %1418[%1419 : i32] : vector<2xi8>
    %1421 = llvm.mlir.constant(1 : i32) : i32
    %1422 = llvm.insertelement %1417, %1420[%1421 : i32] : vector<2xi8>
    %1423 = llvm.mlir.constant(0 : i32) : i32
    %1424 = llvm.extractelement %1422[%1423 : i32] : vector<2xi8>
    %1425 = llvm.mlir.constant(1 : i32) : i32
    %1426 = llvm.extractelement %1422[%1425 : i32] : vector<2xi8>
    %1427 = llvm.mlir.constant(576 : i32) : i32
    %1428 = llvm.xor %1376, %1427 : i32
    %1429 = llvm.mlir.constant(0 : i32) : i32
    %1430 = llvm.add %1428, %1429 : i32
    %1431 = llvm.getelementptr inbounds %1261[%1430] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1432 = llvm.mlir.constant(true) : i1
    %1433 = llvm.load %1431 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %1434 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %1435 = llvm.mlir.constant(0 : i32) : i32
    %1436 = llvm.extractelement %1433[%1435 : i32] : vector<2xi8>
    %1437 = llvm.insertvalue %1436, %1434[0] : !llvm.struct<(i8, i8)> 
    %1438 = llvm.mlir.constant(1 : i32) : i32
    %1439 = llvm.extractelement %1433[%1438 : i32] : vector<2xi8>
    %1440 = llvm.insertvalue %1439, %1437[1] : !llvm.struct<(i8, i8)> 
    %1441 = llvm.extractvalue %1440[0] : !llvm.struct<(i8, i8)> 
    %1442 = llvm.extractvalue %1440[1] : !llvm.struct<(i8, i8)> 
    %1443 = llvm.mlir.undef : vector<2xi8>
    %1444 = llvm.mlir.constant(0 : i32) : i32
    %1445 = llvm.insertelement %1441, %1443[%1444 : i32] : vector<2xi8>
    %1446 = llvm.mlir.constant(1 : i32) : i32
    %1447 = llvm.insertelement %1442, %1445[%1446 : i32] : vector<2xi8>
    %1448 = llvm.mlir.constant(0 : i32) : i32
    %1449 = llvm.extractelement %1447[%1448 : i32] : vector<2xi8>
    %1450 = llvm.mlir.constant(1 : i32) : i32
    %1451 = llvm.extractelement %1447[%1450 : i32] : vector<2xi8>
    %1452 = llvm.mlir.constant(864 : i32) : i32
    %1453 = llvm.xor %1376, %1452 : i32
    %1454 = llvm.mlir.constant(0 : i32) : i32
    %1455 = llvm.add %1453, %1454 : i32
    %1456 = llvm.getelementptr inbounds %1261[%1455] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1457 = llvm.mlir.constant(true) : i1
    %1458 = llvm.load %1456 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %1459 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %1460 = llvm.mlir.constant(0 : i32) : i32
    %1461 = llvm.extractelement %1458[%1460 : i32] : vector<2xi8>
    %1462 = llvm.insertvalue %1461, %1459[0] : !llvm.struct<(i8, i8)> 
    %1463 = llvm.mlir.constant(1 : i32) : i32
    %1464 = llvm.extractelement %1458[%1463 : i32] : vector<2xi8>
    %1465 = llvm.insertvalue %1464, %1462[1] : !llvm.struct<(i8, i8)> 
    %1466 = llvm.extractvalue %1465[0] : !llvm.struct<(i8, i8)> 
    %1467 = llvm.extractvalue %1465[1] : !llvm.struct<(i8, i8)> 
    %1468 = llvm.mlir.undef : vector<2xi8>
    %1469 = llvm.mlir.constant(0 : i32) : i32
    %1470 = llvm.insertelement %1466, %1468[%1469 : i32] : vector<2xi8>
    %1471 = llvm.mlir.constant(1 : i32) : i32
    %1472 = llvm.insertelement %1467, %1470[%1471 : i32] : vector<2xi8>
    %1473 = llvm.mlir.constant(0 : i32) : i32
    %1474 = llvm.extractelement %1472[%1473 : i32] : vector<2xi8>
    %1475 = llvm.mlir.constant(1 : i32) : i32
    %1476 = llvm.extractelement %1472[%1475 : i32] : vector<2xi8>
    %1477 = llvm.trunc %1399 : i8 to i1
    %1478 = llvm.trunc %1424 : i8 to i1
    %1479 = llvm.trunc %1449 : i8 to i1
    %1480 = llvm.trunc %1474 : i8 to i1
    %1481 = llvm.trunc %1401 : i8 to i1
    %1482 = llvm.trunc %1426 : i8 to i1
    %1483 = llvm.trunc %1451 : i8 to i1
    %1484 = llvm.trunc %1476 : i8 to i1
    %1485 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>
    %1486 = llvm.insertvalue %1477, %1485[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1487 = llvm.insertvalue %1478, %1486[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1488 = llvm.insertvalue %1479, %1487[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1489 = llvm.insertvalue %1480, %1488[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1490 = llvm.insertvalue %1481, %1489[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1491 = llvm.insertvalue %1482, %1490[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1492 = llvm.insertvalue %1483, %1491[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1493 = llvm.insertvalue %1484, %1492[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1494 = llvm.extractvalue %1258[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1495 = llvm.extractvalue %1258[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1496 = llvm.extractvalue %1258[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1497 = llvm.extractvalue %1258[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1498 = llvm.extractvalue %1258[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1499 = llvm.extractvalue %1258[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1500 = llvm.extractvalue %1258[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1501 = llvm.extractvalue %1258[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1502 = llvm.extractvalue %1493[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1503 = llvm.extractvalue %1493[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1504 = llvm.extractvalue %1493[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1505 = llvm.extractvalue %1493[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1506 = llvm.extractvalue %1493[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1507 = llvm.extractvalue %1493[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1508 = llvm.extractvalue %1493[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1509 = llvm.extractvalue %1493[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %1510 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %1494, %1502 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)>
    %1511 = llvm.extractvalue %1510[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %1512 = llvm.bitcast %1511 : i32 to vector<1xf32>
    %1513 = llvm.extractvalue %1510[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %1514 = llvm.bitcast %1513 : i32 to vector<1xf32>
    %1515 = llvm.extractvalue %1510[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %1516 = llvm.bitcast %1515 : i32 to vector<1xf32>
    %1517 = llvm.extractvalue %1510[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %1518 = llvm.bitcast %1517 : i32 to vector<1xf32>
    %1519 = llvm.mlir.constant(0 : index) : i32
    %1520 = llvm.extractelement %1512[%1519 : i32] : vector<1xf32>
    %1521 = llvm.mlir.constant(0 : index) : i32
    %1522 = llvm.extractelement %1514[%1521 : i32] : vector<1xf32>
    %1523 = llvm.mlir.constant(0 : index) : i32
    %1524 = llvm.extractelement %1516[%1523 : i32] : vector<1xf32>
    %1525 = llvm.mlir.constant(0 : index) : i32
    %1526 = llvm.extractelement %1518[%1525 : i32] : vector<1xf32>
    %1527 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b" %1498, %1506 : (!llvm.ptr<1>, i1) -> !llvm.struct<(i32, i32, i32, i32)>
    %1528 = llvm.extractvalue %1527[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %1529 = llvm.bitcast %1528 : i32 to vector<1xf32>
    %1530 = llvm.extractvalue %1527[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %1531 = llvm.bitcast %1530 : i32 to vector<1xf32>
    %1532 = llvm.extractvalue %1527[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %1533 = llvm.bitcast %1532 : i32 to vector<1xf32>
    %1534 = llvm.extractvalue %1527[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %1535 = llvm.bitcast %1534 : i32 to vector<1xf32>
    %1536 = llvm.mlir.constant(0 : index) : i32
    %1537 = llvm.extractelement %1529[%1536 : i32] : vector<1xf32>
    %1538 = llvm.mlir.constant(0 : index) : i32
    %1539 = llvm.extractelement %1531[%1538 : i32] : vector<1xf32>
    %1540 = llvm.mlir.constant(0 : index) : i32
    %1541 = llvm.extractelement %1533[%1540 : i32] : vector<1xf32>
    %1542 = llvm.mlir.constant(0 : index) : i32
    %1543 = llvm.extractelement %1535[%1542 : i32] : vector<1xf32>
    %1544 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %1545 = llvm.insertvalue %1520, %1544[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1546 = llvm.insertvalue %1522, %1545[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1547 = llvm.insertvalue %1524, %1546[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1548 = llvm.insertvalue %1526, %1547[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1549 = llvm.insertvalue %1537, %1548[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1550 = llvm.insertvalue %1539, %1549[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1551 = llvm.insertvalue %1541, %1550[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1552 = llvm.insertvalue %1543, %1551[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    nvvm.barrier0
    %1553 = llvm.mlir.constant(0 : i32) : i32
    %1554 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %1555 = llvm.getelementptr %1554[%1553] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1556 = llvm.extractvalue %1552[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1557 = llvm.extractvalue %1552[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1558 = llvm.extractvalue %1552[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1559 = llvm.extractvalue %1552[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1560 = llvm.extractvalue %1552[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1561 = llvm.extractvalue %1552[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1562 = llvm.extractvalue %1552[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1563 = llvm.extractvalue %1552[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1564 = llvm.mlir.constant(0 : i32) : i32
    %1565 = nvvm.read.ptx.sreg.tid.x : i32
    %1566 = llvm.mlir.constant(127 : i32) : i32
    %1567 = llvm.and %1565, %1566 : i32
    %1568 = llvm.mlir.constant(32 : i32) : i32
    %1569 = llvm.urem %1567, %1568 : i32
    %1570 = llvm.udiv %1567, %1568 : i32
    %1571 = llvm.mlir.constant(0 : i32) : i32
    %1572 = llvm.mlir.constant(0 : i32) : i32
    %1573 = llvm.mlir.constant(0 : i32) : i32
    %1574 = llvm.mlir.constant(0 : i32) : i32
    %1575 = llvm.shl %1569, %1574 : i32
    %1576 = llvm.or %1573, %1575 : i32
    %1577 = llvm.mlir.constant(5 : i32) : i32
    %1578 = llvm.shl %1570, %1577 : i32
    %1579 = llvm.or %1576, %1578 : i32
    %1580 = llvm.mlir.constant(127 : i32) : i32
    %1581 = llvm.and %1579, %1580 : i32
    %1582 = llvm.mlir.constant(4 : i32) : i32
    %1583 = llvm.shl %1581, %1582 : i32
    %1584 = llvm.mlir.constant(0 : i32) : i32
    %1585 = llvm.mlir.constant(0 : i32) : i32
    %1586 = llvm.or disjoint %1583, %1585 : i32
    %1587 = llvm.xor %1572, %1586 : i32
    %1588 = llvm.mlir.constant(4 : i32) : i32
    %1589 = llvm.mul %1564, %1588 : i32
    %1590 = llvm.xor %1587, %1589 : i32
    %1591 = llvm.mlir.constant(0 : i32) : i32
    %1592 = llvm.xor %1590, %1591 : i32
    %1593 = llvm.mlir.constant(0 : i32) : i32
    %1594 = llvm.add %1592, %1593 : i32
    %1595 = llvm.getelementptr inbounds %1555[%1594] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1596 = llvm.mlir.undef : vector<4xf32>
    %1597 = llvm.mlir.constant(0 : i32) : i32
    %1598 = llvm.insertelement %1556, %1596[%1597 : i32] : vector<4xf32>
    %1599 = llvm.mlir.constant(1 : i32) : i32
    %1600 = llvm.insertelement %1557, %1598[%1599 : i32] : vector<4xf32>
    %1601 = llvm.mlir.constant(2 : i32) : i32
    %1602 = llvm.insertelement %1558, %1600[%1601 : i32] : vector<4xf32>
    %1603 = llvm.mlir.constant(3 : i32) : i32
    %1604 = llvm.insertelement %1559, %1602[%1603 : i32] : vector<4xf32>
    %1605 = llvm.mlir.constant(true) : i1
    %1606 = llvm.mlir.constant(0 : i32) : i32
    %1607 = llvm.extractelement %1604[%1606 : i32] : vector<4xf32>
    %1608 = llvm.mlir.constant(1 : i32) : i32
    %1609 = llvm.extractelement %1604[%1608 : i32] : vector<4xf32>
    %1610 = llvm.mlir.constant(2 : i32) : i32
    %1611 = llvm.extractelement %1604[%1610 : i32] : vector<4xf32>
    %1612 = llvm.mlir.constant(3 : i32) : i32
    %1613 = llvm.extractelement %1604[%1612 : i32] : vector<4xf32>
    %1614 = llvm.bitcast %1607 : f32 to i32
    %1615 = llvm.bitcast %1609 : f32 to i32
    %1616 = llvm.bitcast %1611 : f32 to i32
    %1617 = llvm.bitcast %1613 : f32 to i32
    %1618 = llvm.mlir.undef : vector<4xi32>
    %1619 = llvm.mlir.constant(0 : i32) : i32
    %1620 = llvm.insertelement %1614, %1618[%1619 : i32] : vector<4xi32>
    %1621 = llvm.mlir.constant(1 : i32) : i32
    %1622 = llvm.insertelement %1615, %1620[%1621 : i32] : vector<4xi32>
    %1623 = llvm.mlir.constant(2 : i32) : i32
    %1624 = llvm.insertelement %1616, %1622[%1623 : i32] : vector<4xi32>
    %1625 = llvm.mlir.constant(3 : i32) : i32
    %1626 = llvm.insertelement %1617, %1624[%1625 : i32] : vector<4xi32>
    llvm.store %1626, %1595 {alignment = 16 : i64} : vector<4xi32>, !llvm.ptr<3>
    nvvm.barrier0
    %1627 = nvvm.read.ptx.sreg.tid.x : i32
    %1628 = llvm.mlir.constant(127 : i32) : i32
    %1629 = llvm.and %1627, %1628 : i32
    %1630 = llvm.mlir.constant(32 : i32) : i32
    %1631 = llvm.urem %1629, %1630 : i32
    %1632 = llvm.udiv %1629, %1630 : i32
    %1633 = llvm.mlir.constant(0 : i32) : i32
    %1634 = llvm.mlir.constant(0 : i32) : i32
    %1635 = llvm.mlir.constant(0 : i32) : i32
    %1636 = llvm.mlir.constant(0 : i32) : i32
    %1637 = llvm.shl %1631, %1636 : i32
    %1638 = llvm.or %1635, %1637 : i32
    %1639 = llvm.mlir.constant(5 : i32) : i32
    %1640 = llvm.shl %1632, %1639 : i32
    %1641 = llvm.or %1638, %1640 : i32
    %1642 = llvm.mlir.constant(24 : i32) : i32
    %1643 = llvm.and %1641, %1642 : i32
    %1644 = llvm.mlir.constant(6 : i32) : i32
    %1645 = llvm.shl %1643, %1644 : i32
    %1646 = llvm.mlir.constant(7 : i32) : i32
    %1647 = llvm.and %1641, %1646 : i32
    %1648 = llvm.mlir.constant(4 : i32) : i32
    %1649 = llvm.shl %1647, %1648 : i32
    %1650 = llvm.mlir.constant(96 : i32) : i32
    %1651 = llvm.and %1641, %1650 : i32
    %1652 = llvm.mlir.constant(2 : i32) : i32
    %1653 = llvm.shl %1651, %1652 : i32
    %1654 = llvm.mlir.constant(0 : i32) : i32
    %1655 = llvm.or disjoint %1645, %1649 : i32
    %1656 = llvm.or disjoint %1655, %1653 : i32
    %1657 = llvm.xor %1634, %1656 : i32
    %1658 = llvm.mlir.constant(4 : i32) : i32
    %1659 = llvm.mul %1564, %1658 : i32
    %1660 = llvm.xor %1657, %1659 : i32
    %1661 = llvm.mlir.constant(0 : i32) : i32
    %1662 = llvm.xor %1660, %1661 : i32
    %1663 = llvm.mlir.constant(0 : i32) : i32
    %1664 = llvm.add %1662, %1663 : i32
    %1665 = llvm.getelementptr inbounds %1555[%1664] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1666 = nvgpu.ldmatrix %1665, m8n8, 16 : (!llvm.ptr<3>) -> !llvm.struct<(i32, i32, i32, i32)>
    %1667 = llvm.extractvalue %1666[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %1668 = llvm.bitcast %1667 : i32 to vector<1xf32>
    %1669 = llvm.mlir.constant(0 : i32) : i32
    %1670 = llvm.extractelement %1668[%1669 : i32] : vector<1xf32>
    %1671 = llvm.extractvalue %1666[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %1672 = llvm.bitcast %1671 : i32 to vector<1xf32>
    %1673 = llvm.mlir.constant(0 : i32) : i32
    %1674 = llvm.extractelement %1672[%1673 : i32] : vector<1xf32>
    %1675 = llvm.extractvalue %1666[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %1676 = llvm.bitcast %1675 : i32 to vector<1xf32>
    %1677 = llvm.mlir.constant(0 : i32) : i32
    %1678 = llvm.extractelement %1676[%1677 : i32] : vector<1xf32>
    %1679 = llvm.extractvalue %1666[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %1680 = llvm.bitcast %1679 : i32 to vector<1xf32>
    %1681 = llvm.mlir.constant(0 : i32) : i32
    %1682 = llvm.extractelement %1680[%1681 : i32] : vector<1xf32>
    nvvm.barrier0
    %1683 = nvvm.read.ptx.sreg.tid.x : i32
    %1684 = llvm.mlir.constant(127 : i32) : i32
    %1685 = llvm.and %1683, %1684 : i32
    %1686 = llvm.mlir.constant(32 : i32) : i32
    %1687 = llvm.urem %1685, %1686 : i32
    %1688 = llvm.udiv %1685, %1686 : i32
    %1689 = llvm.mlir.constant(0 : i32) : i32
    %1690 = llvm.mlir.constant(0 : i32) : i32
    %1691 = llvm.mlir.constant(0 : i32) : i32
    %1692 = llvm.mlir.constant(0 : i32) : i32
    %1693 = llvm.shl %1687, %1692 : i32
    %1694 = llvm.or %1691, %1693 : i32
    %1695 = llvm.mlir.constant(5 : i32) : i32
    %1696 = llvm.shl %1688, %1695 : i32
    %1697 = llvm.or %1694, %1696 : i32
    %1698 = llvm.mlir.constant(127 : i32) : i32
    %1699 = llvm.and %1697, %1698 : i32
    %1700 = llvm.mlir.constant(4 : i32) : i32
    %1701 = llvm.shl %1699, %1700 : i32
    %1702 = llvm.mlir.constant(0 : i32) : i32
    %1703 = llvm.mlir.constant(0 : i32) : i32
    %1704 = llvm.or disjoint %1701, %1703 : i32
    %1705 = llvm.xor %1690, %1704 : i32
    %1706 = llvm.mlir.constant(4 : i32) : i32
    %1707 = llvm.mul %1564, %1706 : i32
    %1708 = llvm.xor %1705, %1707 : i32
    %1709 = llvm.mlir.constant(0 : i32) : i32
    %1710 = llvm.xor %1708, %1709 : i32
    %1711 = llvm.mlir.constant(0 : i32) : i32
    %1712 = llvm.add %1710, %1711 : i32
    %1713 = llvm.getelementptr inbounds %1555[%1712] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1714 = llvm.mlir.undef : vector<4xf32>
    %1715 = llvm.mlir.constant(0 : i32) : i32
    %1716 = llvm.insertelement %1560, %1714[%1715 : i32] : vector<4xf32>
    %1717 = llvm.mlir.constant(1 : i32) : i32
    %1718 = llvm.insertelement %1561, %1716[%1717 : i32] : vector<4xf32>
    %1719 = llvm.mlir.constant(2 : i32) : i32
    %1720 = llvm.insertelement %1562, %1718[%1719 : i32] : vector<4xf32>
    %1721 = llvm.mlir.constant(3 : i32) : i32
    %1722 = llvm.insertelement %1563, %1720[%1721 : i32] : vector<4xf32>
    %1723 = llvm.mlir.constant(true) : i1
    %1724 = llvm.mlir.constant(0 : i32) : i32
    %1725 = llvm.extractelement %1722[%1724 : i32] : vector<4xf32>
    %1726 = llvm.mlir.constant(1 : i32) : i32
    %1727 = llvm.extractelement %1722[%1726 : i32] : vector<4xf32>
    %1728 = llvm.mlir.constant(2 : i32) : i32
    %1729 = llvm.extractelement %1722[%1728 : i32] : vector<4xf32>
    %1730 = llvm.mlir.constant(3 : i32) : i32
    %1731 = llvm.extractelement %1722[%1730 : i32] : vector<4xf32>
    %1732 = llvm.bitcast %1725 : f32 to i32
    %1733 = llvm.bitcast %1727 : f32 to i32
    %1734 = llvm.bitcast %1729 : f32 to i32
    %1735 = llvm.bitcast %1731 : f32 to i32
    %1736 = llvm.mlir.undef : vector<4xi32>
    %1737 = llvm.mlir.constant(0 : i32) : i32
    %1738 = llvm.insertelement %1732, %1736[%1737 : i32] : vector<4xi32>
    %1739 = llvm.mlir.constant(1 : i32) : i32
    %1740 = llvm.insertelement %1733, %1738[%1739 : i32] : vector<4xi32>
    %1741 = llvm.mlir.constant(2 : i32) : i32
    %1742 = llvm.insertelement %1734, %1740[%1741 : i32] : vector<4xi32>
    %1743 = llvm.mlir.constant(3 : i32) : i32
    %1744 = llvm.insertelement %1735, %1742[%1743 : i32] : vector<4xi32>
    llvm.store %1744, %1713 {alignment = 16 : i64} : vector<4xi32>, !llvm.ptr<3>
    nvvm.barrier0
    %1745 = nvvm.read.ptx.sreg.tid.x : i32
    %1746 = llvm.mlir.constant(127 : i32) : i32
    %1747 = llvm.and %1745, %1746 : i32
    %1748 = llvm.mlir.constant(32 : i32) : i32
    %1749 = llvm.urem %1747, %1748 : i32
    %1750 = llvm.udiv %1747, %1748 : i32
    %1751 = llvm.mlir.constant(0 : i32) : i32
    %1752 = llvm.mlir.constant(0 : i32) : i32
    %1753 = llvm.mlir.constant(0 : i32) : i32
    %1754 = llvm.mlir.constant(0 : i32) : i32
    %1755 = llvm.shl %1749, %1754 : i32
    %1756 = llvm.or %1753, %1755 : i32
    %1757 = llvm.mlir.constant(5 : i32) : i32
    %1758 = llvm.shl %1750, %1757 : i32
    %1759 = llvm.or %1756, %1758 : i32
    %1760 = llvm.mlir.constant(24 : i32) : i32
    %1761 = llvm.and %1759, %1760 : i32
    %1762 = llvm.mlir.constant(6 : i32) : i32
    %1763 = llvm.shl %1761, %1762 : i32
    %1764 = llvm.mlir.constant(7 : i32) : i32
    %1765 = llvm.and %1759, %1764 : i32
    %1766 = llvm.mlir.constant(4 : i32) : i32
    %1767 = llvm.shl %1765, %1766 : i32
    %1768 = llvm.mlir.constant(96 : i32) : i32
    %1769 = llvm.and %1759, %1768 : i32
    %1770 = llvm.mlir.constant(2 : i32) : i32
    %1771 = llvm.shl %1769, %1770 : i32
    %1772 = llvm.mlir.constant(0 : i32) : i32
    %1773 = llvm.or disjoint %1763, %1767 : i32
    %1774 = llvm.or disjoint %1773, %1771 : i32
    %1775 = llvm.xor %1752, %1774 : i32
    %1776 = llvm.mlir.constant(4 : i32) : i32
    %1777 = llvm.mul %1564, %1776 : i32
    %1778 = llvm.xor %1775, %1777 : i32
    %1779 = llvm.mlir.constant(0 : i32) : i32
    %1780 = llvm.xor %1778, %1779 : i32
    %1781 = llvm.mlir.constant(0 : i32) : i32
    %1782 = llvm.add %1780, %1781 : i32
    %1783 = llvm.getelementptr inbounds %1555[%1782] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1784 = nvgpu.ldmatrix %1783, m8n8, 16 : (!llvm.ptr<3>) -> !llvm.struct<(i32, i32, i32, i32)>
    %1785 = llvm.extractvalue %1784[0] : !llvm.struct<(i32, i32, i32, i32)> 
    %1786 = llvm.bitcast %1785 : i32 to vector<1xf32>
    %1787 = llvm.mlir.constant(0 : i32) : i32
    %1788 = llvm.extractelement %1786[%1787 : i32] : vector<1xf32>
    %1789 = llvm.extractvalue %1784[1] : !llvm.struct<(i32, i32, i32, i32)> 
    %1790 = llvm.bitcast %1789 : i32 to vector<1xf32>
    %1791 = llvm.mlir.constant(0 : i32) : i32
    %1792 = llvm.extractelement %1790[%1791 : i32] : vector<1xf32>
    %1793 = llvm.extractvalue %1784[2] : !llvm.struct<(i32, i32, i32, i32)> 
    %1794 = llvm.bitcast %1793 : i32 to vector<1xf32>
    %1795 = llvm.mlir.constant(0 : i32) : i32
    %1796 = llvm.extractelement %1794[%1795 : i32] : vector<1xf32>
    %1797 = llvm.extractvalue %1784[3] : !llvm.struct<(i32, i32, i32, i32)> 
    %1798 = llvm.bitcast %1797 : i32 to vector<1xf32>
    %1799 = llvm.mlir.constant(0 : i32) : i32
    %1800 = llvm.extractelement %1798[%1799 : i32] : vector<1xf32>
    %1801 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %1802 = llvm.insertvalue %1670, %1801[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1803 = llvm.insertvalue %1674, %1802[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1804 = llvm.insertvalue %1678, %1803[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1805 = llvm.insertvalue %1682, %1804[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1806 = llvm.insertvalue %1788, %1805[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1807 = llvm.insertvalue %1792, %1806[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1808 = llvm.insertvalue %1796, %1807[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1809 = llvm.insertvalue %1800, %1808[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1810 = llvm.extractvalue %980[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1811 = llvm.extractvalue %980[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1812 = llvm.extractvalue %980[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1813 = llvm.extractvalue %980[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1814 = llvm.extractvalue %980[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1815 = llvm.extractvalue %980[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1816 = llvm.extractvalue %980[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1817 = llvm.extractvalue %980[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1818 = llvm.extractvalue %1809[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1819 = llvm.extractvalue %1809[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1820 = llvm.extractvalue %1809[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1821 = llvm.extractvalue %1809[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1822 = llvm.extractvalue %1809[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1823 = llvm.extractvalue %1809[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1824 = llvm.extractvalue %1809[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1825 = llvm.extractvalue %1809[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1826 = llvm.fadd %1810, %1818 : f32
    %1827 = llvm.fadd %1811, %1819 : f32
    %1828 = llvm.fadd %1812, %1820 : f32
    %1829 = llvm.fadd %1813, %1821 : f32
    %1830 = llvm.fadd %1814, %1822 : f32
    %1831 = llvm.fadd %1815, %1823 : f32
    %1832 = llvm.fadd %1816, %1824 : f32
    %1833 = llvm.fadd %1817, %1825 : f32
    %1834 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %1835 = llvm.insertvalue %1826, %1834[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1836 = llvm.insertvalue %1827, %1835[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1837 = llvm.insertvalue %1828, %1836[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1838 = llvm.insertvalue %1829, %1837[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1839 = llvm.insertvalue %1830, %1838[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1840 = llvm.insertvalue %1831, %1839[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1841 = llvm.insertvalue %1832, %1840[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1842 = llvm.insertvalue %1833, %1841[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %1843 = llvm.bitcast %arg2 : !llvm.ptr<1> to !llvm.ptr<1>
    %1844 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %1845 = llvm.insertvalue %1843, %1844[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1846 = llvm.insertvalue %1843, %1845[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1847 = llvm.insertvalue %1843, %1846[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1848 = llvm.insertvalue %1843, %1847[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1849 = llvm.insertvalue %1843, %1848[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1850 = llvm.insertvalue %1843, %1849[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1851 = llvm.insertvalue %1843, %1850[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1852 = llvm.insertvalue %1843, %1851[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1853 = llvm.extractvalue %1852[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1854 = llvm.extractvalue %1852[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1855 = llvm.extractvalue %1852[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1856 = llvm.extractvalue %1852[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1857 = llvm.extractvalue %1852[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1858 = llvm.extractvalue %1852[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1859 = llvm.extractvalue %1852[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1860 = llvm.extractvalue %1852[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1861 = llvm.extractvalue %108[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1862 = llvm.extractvalue %108[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1863 = llvm.extractvalue %108[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1864 = llvm.extractvalue %108[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1865 = llvm.extractvalue %108[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1866 = llvm.extractvalue %108[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1867 = llvm.extractvalue %108[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1868 = llvm.extractvalue %108[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> 
    %1869 = llvm.getelementptr %1853[%1861] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1870 = llvm.getelementptr %1854[%1862] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1871 = llvm.getelementptr %1855[%1863] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1872 = llvm.getelementptr %1856[%1864] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1873 = llvm.getelementptr %1857[%1865] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1874 = llvm.getelementptr %1858[%1866] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1875 = llvm.getelementptr %1859[%1867] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1876 = llvm.getelementptr %1860[%1868] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %1877 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %1878 = llvm.insertvalue %1869, %1877[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1879 = llvm.insertvalue %1870, %1878[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1880 = llvm.insertvalue %1871, %1879[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1881 = llvm.insertvalue %1872, %1880[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1882 = llvm.insertvalue %1873, %1881[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1883 = llvm.insertvalue %1874, %1882[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1884 = llvm.insertvalue %1875, %1883[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1885 = llvm.insertvalue %1876, %1884[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    nvvm.barrier0
    %1886 = llvm.mlir.constant(0 : i32) : i32
    %1887 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %1888 = llvm.getelementptr %1887[%1886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1889 = llvm.extractvalue %1885[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1890 = llvm.extractvalue %1885[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1891 = llvm.extractvalue %1885[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1892 = llvm.extractvalue %1885[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1893 = llvm.extractvalue %1885[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1894 = llvm.extractvalue %1885[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1895 = llvm.extractvalue %1885[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1896 = llvm.extractvalue %1885[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %1897 = llvm.ptrtoint %1889 : !llvm.ptr<1> to i64
    %1898 = llvm.ptrtoint %1890 : !llvm.ptr<1> to i64
    %1899 = llvm.ptrtoint %1891 : !llvm.ptr<1> to i64
    %1900 = llvm.ptrtoint %1892 : !llvm.ptr<1> to i64
    %1901 = llvm.ptrtoint %1893 : !llvm.ptr<1> to i64
    %1902 = llvm.ptrtoint %1894 : !llvm.ptr<1> to i64
    %1903 = llvm.ptrtoint %1895 : !llvm.ptr<1> to i64
    %1904 = llvm.ptrtoint %1896 : !llvm.ptr<1> to i64
    %1905 = llvm.mlir.constant(0 : i32) : i32
    %1906 = nvvm.read.ptx.sreg.tid.x : i32
    %1907 = llvm.mlir.constant(127 : i32) : i32
    %1908 = llvm.and %1906, %1907 : i32
    %1909 = llvm.mlir.constant(32 : i32) : i32
    %1910 = llvm.urem %1908, %1909 : i32
    %1911 = llvm.udiv %1908, %1909 : i32
    %1912 = llvm.mlir.constant(0 : i32) : i32
    %1913 = llvm.mlir.constant(0 : i32) : i32
    %1914 = llvm.mlir.constant(0 : i32) : i32
    %1915 = llvm.mlir.constant(0 : i32) : i32
    %1916 = llvm.shl %1910, %1915 : i32
    %1917 = llvm.or %1914, %1916 : i32
    %1918 = llvm.mlir.constant(5 : i32) : i32
    %1919 = llvm.shl %1911, %1918 : i32
    %1920 = llvm.or %1917, %1919 : i32
    %1921 = llvm.mlir.constant(3 : i32) : i32
    %1922 = llvm.and %1920, %1921 : i32
    %1923 = llvm.mlir.constant(11 : i32) : i32
    %1924 = llvm.shl %1922, %1923 : i32
    %1925 = llvm.mlir.constant(3 : i32) : i32
    %1926 = llvm.and %1920, %1925 : i32
    %1927 = llvm.mlir.constant(5 : i32) : i32
    %1928 = llvm.shl %1926, %1927 : i32
    %1929 = llvm.mlir.constant(124 : i32) : i32
    %1930 = llvm.and %1920, %1929 : i32
    %1931 = llvm.mlir.constant(2 : i32) : i32
    %1932 = llvm.shl %1930, %1931 : i32
    %1933 = llvm.mlir.constant(0 : i32) : i32
    %1934 = llvm.xor %1928, %1932 : i32
    %1935 = llvm.or disjoint %1924, %1934 : i32
    %1936 = llvm.xor %1913, %1935 : i32
    %1937 = llvm.mlir.constant(8 : i32) : i32
    %1938 = llvm.mul %1905, %1937 : i32
    %1939 = llvm.xor %1936, %1938 : i32
    %1940 = llvm.mlir.constant(0 : i32) : i32
    %1941 = llvm.xor %1939, %1940 : i32
    %1942 = llvm.mlir.constant(0 : i32) : i32
    %1943 = llvm.add %1941, %1942 : i32
    %1944 = llvm.getelementptr inbounds %1888[%1943] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1945 = llvm.mlir.undef : vector<2xi64>
    %1946 = llvm.mlir.constant(0 : i32) : i32
    %1947 = llvm.insertelement %1897, %1945[%1946 : i32] : vector<2xi64>
    %1948 = llvm.mlir.constant(1 : i32) : i32
    %1949 = llvm.insertelement %1901, %1947[%1948 : i32] : vector<2xi64>
    %1950 = llvm.mlir.constant(true) : i1
    llvm.store %1949, %1944 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %1951 = llvm.mlir.constant(512 : i32) : i32
    %1952 = llvm.add %1941, %1951 : i32
    %1953 = llvm.getelementptr inbounds %1888[%1952] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1954 = llvm.mlir.undef : vector<2xi64>
    %1955 = llvm.mlir.constant(0 : i32) : i32
    %1956 = llvm.insertelement %1898, %1954[%1955 : i32] : vector<2xi64>
    %1957 = llvm.mlir.constant(1 : i32) : i32
    %1958 = llvm.insertelement %1902, %1956[%1957 : i32] : vector<2xi64>
    %1959 = llvm.mlir.constant(true) : i1
    llvm.store %1958, %1953 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %1960 = llvm.mlir.constant(1024 : i32) : i32
    %1961 = llvm.add %1941, %1960 : i32
    %1962 = llvm.getelementptr inbounds %1888[%1961] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1963 = llvm.mlir.undef : vector<2xi64>
    %1964 = llvm.mlir.constant(0 : i32) : i32
    %1965 = llvm.insertelement %1899, %1963[%1964 : i32] : vector<2xi64>
    %1966 = llvm.mlir.constant(1 : i32) : i32
    %1967 = llvm.insertelement %1903, %1965[%1966 : i32] : vector<2xi64>
    %1968 = llvm.mlir.constant(true) : i1
    llvm.store %1967, %1962 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    %1969 = llvm.mlir.constant(1536 : i32) : i32
    %1970 = llvm.add %1941, %1969 : i32
    %1971 = llvm.getelementptr inbounds %1888[%1970] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %1972 = llvm.mlir.undef : vector<2xi64>
    %1973 = llvm.mlir.constant(0 : i32) : i32
    %1974 = llvm.insertelement %1900, %1972[%1973 : i32] : vector<2xi64>
    %1975 = llvm.mlir.constant(1 : i32) : i32
    %1976 = llvm.insertelement %1904, %1974[%1975 : i32] : vector<2xi64>
    %1977 = llvm.mlir.constant(true) : i1
    llvm.store %1976, %1971 {alignment = 16 : i64} : vector<2xi64>, !llvm.ptr<3>
    nvvm.barrier0
    %1978 = nvvm.read.ptx.sreg.tid.x : i32
    %1979 = llvm.mlir.constant(127 : i32) : i32
    %1980 = llvm.and %1978, %1979 : i32
    %1981 = llvm.mlir.constant(32 : i32) : i32
    %1982 = llvm.urem %1980, %1981 : i32
    %1983 = llvm.udiv %1980, %1981 : i32
    %1984 = llvm.mlir.constant(0 : i32) : i32
    %1985 = llvm.mlir.constant(0 : i32) : i32
    %1986 = llvm.mlir.constant(0 : i32) : i32
    %1987 = llvm.mlir.constant(0 : i32) : i32
    %1988 = llvm.shl %1982, %1987 : i32
    %1989 = llvm.or %1986, %1988 : i32
    %1990 = llvm.mlir.constant(5 : i32) : i32
    %1991 = llvm.shl %1983, %1990 : i32
    %1992 = llvm.or %1989, %1991 : i32
    %1993 = llvm.mlir.constant(127 : i32) : i32
    %1994 = llvm.and %1992, %1993 : i32
    %1995 = llvm.mlir.constant(4 : i32) : i32
    %1996 = llvm.shl %1994, %1995 : i32
    %1997 = llvm.mlir.constant(0 : i32) : i32
    %1998 = llvm.mlir.constant(0 : i32) : i32
    %1999 = llvm.or disjoint %1996, %1998 : i32
    %2000 = llvm.xor %1985, %1999 : i32
    %2001 = llvm.mlir.constant(8 : i32) : i32
    %2002 = llvm.mul %1905, %2001 : i32
    %2003 = llvm.xor %2000, %2002 : i32
    %2004 = llvm.mlir.constant(0 : i32) : i32
    %2005 = llvm.xor %2003, %2004 : i32
    %2006 = llvm.mlir.constant(0 : i32) : i32
    %2007 = llvm.add %2005, %2006 : i32
    %2008 = llvm.getelementptr inbounds %1888[%2007] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2009 = llvm.mlir.constant(true) : i1
    %2010 = llvm.load %2008 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %2011 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %2012 = llvm.mlir.constant(0 : i32) : i32
    %2013 = llvm.extractelement %2010[%2012 : i32] : vector<2xi64>
    %2014 = llvm.insertvalue %2013, %2011[0] : !llvm.struct<(i64, i64)> 
    %2015 = llvm.mlir.constant(1 : i32) : i32
    %2016 = llvm.extractelement %2010[%2015 : i32] : vector<2xi64>
    %2017 = llvm.insertvalue %2016, %2014[1] : !llvm.struct<(i64, i64)> 
    %2018 = llvm.extractvalue %2017[0] : !llvm.struct<(i64, i64)> 
    %2019 = llvm.extractvalue %2017[1] : !llvm.struct<(i64, i64)> 
    %2020 = llvm.mlir.undef : vector<2xi64>
    %2021 = llvm.mlir.constant(0 : i32) : i32
    %2022 = llvm.insertelement %2018, %2020[%2021 : i32] : vector<2xi64>
    %2023 = llvm.mlir.constant(1 : i32) : i32
    %2024 = llvm.insertelement %2019, %2022[%2023 : i32] : vector<2xi64>
    %2025 = llvm.mlir.constant(0 : i32) : i32
    %2026 = llvm.extractelement %2024[%2025 : i32] : vector<2xi64>
    %2027 = llvm.mlir.constant(1 : i32) : i32
    %2028 = llvm.extractelement %2024[%2027 : i32] : vector<2xi64>
    %2029 = llvm.mlir.constant(2080 : i32) : i32
    %2030 = llvm.xor %2003, %2029 : i32
    %2031 = llvm.mlir.constant(0 : i32) : i32
    %2032 = llvm.add %2030, %2031 : i32
    %2033 = llvm.getelementptr inbounds %1888[%2032] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2034 = llvm.mlir.constant(true) : i1
    %2035 = llvm.load %2033 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %2036 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %2037 = llvm.mlir.constant(0 : i32) : i32
    %2038 = llvm.extractelement %2035[%2037 : i32] : vector<2xi64>
    %2039 = llvm.insertvalue %2038, %2036[0] : !llvm.struct<(i64, i64)> 
    %2040 = llvm.mlir.constant(1 : i32) : i32
    %2041 = llvm.extractelement %2035[%2040 : i32] : vector<2xi64>
    %2042 = llvm.insertvalue %2041, %2039[1] : !llvm.struct<(i64, i64)> 
    %2043 = llvm.extractvalue %2042[0] : !llvm.struct<(i64, i64)> 
    %2044 = llvm.extractvalue %2042[1] : !llvm.struct<(i64, i64)> 
    %2045 = llvm.mlir.undef : vector<2xi64>
    %2046 = llvm.mlir.constant(0 : i32) : i32
    %2047 = llvm.insertelement %2043, %2045[%2046 : i32] : vector<2xi64>
    %2048 = llvm.mlir.constant(1 : i32) : i32
    %2049 = llvm.insertelement %2044, %2047[%2048 : i32] : vector<2xi64>
    %2050 = llvm.mlir.constant(0 : i32) : i32
    %2051 = llvm.extractelement %2049[%2050 : i32] : vector<2xi64>
    %2052 = llvm.mlir.constant(1 : i32) : i32
    %2053 = llvm.extractelement %2049[%2052 : i32] : vector<2xi64>
    %2054 = llvm.mlir.constant(4160 : i32) : i32
    %2055 = llvm.xor %2003, %2054 : i32
    %2056 = llvm.mlir.constant(0 : i32) : i32
    %2057 = llvm.add %2055, %2056 : i32
    %2058 = llvm.getelementptr inbounds %1888[%2057] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2059 = llvm.mlir.constant(true) : i1
    %2060 = llvm.load %2058 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %2061 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %2062 = llvm.mlir.constant(0 : i32) : i32
    %2063 = llvm.extractelement %2060[%2062 : i32] : vector<2xi64>
    %2064 = llvm.insertvalue %2063, %2061[0] : !llvm.struct<(i64, i64)> 
    %2065 = llvm.mlir.constant(1 : i32) : i32
    %2066 = llvm.extractelement %2060[%2065 : i32] : vector<2xi64>
    %2067 = llvm.insertvalue %2066, %2064[1] : !llvm.struct<(i64, i64)> 
    %2068 = llvm.extractvalue %2067[0] : !llvm.struct<(i64, i64)> 
    %2069 = llvm.extractvalue %2067[1] : !llvm.struct<(i64, i64)> 
    %2070 = llvm.mlir.undef : vector<2xi64>
    %2071 = llvm.mlir.constant(0 : i32) : i32
    %2072 = llvm.insertelement %2068, %2070[%2071 : i32] : vector<2xi64>
    %2073 = llvm.mlir.constant(1 : i32) : i32
    %2074 = llvm.insertelement %2069, %2072[%2073 : i32] : vector<2xi64>
    %2075 = llvm.mlir.constant(0 : i32) : i32
    %2076 = llvm.extractelement %2074[%2075 : i32] : vector<2xi64>
    %2077 = llvm.mlir.constant(1 : i32) : i32
    %2078 = llvm.extractelement %2074[%2077 : i32] : vector<2xi64>
    %2079 = llvm.mlir.constant(6240 : i32) : i32
    %2080 = llvm.xor %2003, %2079 : i32
    %2081 = llvm.mlir.constant(0 : i32) : i32
    %2082 = llvm.add %2080, %2081 : i32
    %2083 = llvm.getelementptr inbounds %1888[%2082] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2084 = llvm.mlir.constant(true) : i1
    %2085 = llvm.load %2083 {alignment = 16 : i64} : !llvm.ptr<3> -> vector<2xi64>
    %2086 = llvm.mlir.undef : !llvm.struct<(i64, i64)>
    %2087 = llvm.mlir.constant(0 : i32) : i32
    %2088 = llvm.extractelement %2085[%2087 : i32] : vector<2xi64>
    %2089 = llvm.insertvalue %2088, %2086[0] : !llvm.struct<(i64, i64)> 
    %2090 = llvm.mlir.constant(1 : i32) : i32
    %2091 = llvm.extractelement %2085[%2090 : i32] : vector<2xi64>
    %2092 = llvm.insertvalue %2091, %2089[1] : !llvm.struct<(i64, i64)> 
    %2093 = llvm.extractvalue %2092[0] : !llvm.struct<(i64, i64)> 
    %2094 = llvm.extractvalue %2092[1] : !llvm.struct<(i64, i64)> 
    %2095 = llvm.mlir.undef : vector<2xi64>
    %2096 = llvm.mlir.constant(0 : i32) : i32
    %2097 = llvm.insertelement %2093, %2095[%2096 : i32] : vector<2xi64>
    %2098 = llvm.mlir.constant(1 : i32) : i32
    %2099 = llvm.insertelement %2094, %2097[%2098 : i32] : vector<2xi64>
    %2100 = llvm.mlir.constant(0 : i32) : i32
    %2101 = llvm.extractelement %2099[%2100 : i32] : vector<2xi64>
    %2102 = llvm.mlir.constant(1 : i32) : i32
    %2103 = llvm.extractelement %2099[%2102 : i32] : vector<2xi64>
    %2104 = llvm.inttoptr %2026 : i64 to !llvm.ptr<1>
    %2105 = llvm.inttoptr %2051 : i64 to !llvm.ptr<1>
    %2106 = llvm.inttoptr %2076 : i64 to !llvm.ptr<1>
    %2107 = llvm.inttoptr %2101 : i64 to !llvm.ptr<1>
    %2108 = llvm.inttoptr %2028 : i64 to !llvm.ptr<1>
    %2109 = llvm.inttoptr %2053 : i64 to !llvm.ptr<1>
    %2110 = llvm.inttoptr %2078 : i64 to !llvm.ptr<1>
    %2111 = llvm.inttoptr %2103 : i64 to !llvm.ptr<1>
    %2112 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>
    %2113 = llvm.insertvalue %2104, %2112[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2114 = llvm.insertvalue %2105, %2113[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2115 = llvm.insertvalue %2106, %2114[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2116 = llvm.insertvalue %2107, %2115[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2117 = llvm.insertvalue %2108, %2116[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2118 = llvm.insertvalue %2109, %2117[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2119 = llvm.insertvalue %2110, %2118[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2120 = llvm.insertvalue %2111, %2119[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    nvvm.barrier0
    %2121 = llvm.mlir.constant(0 : i32) : i32
    %2122 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %2123 = llvm.getelementptr %2122[%2121] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2124 = llvm.extractvalue %1842[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2125 = llvm.extractvalue %1842[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2126 = llvm.extractvalue %1842[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2127 = llvm.extractvalue %1842[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2128 = llvm.extractvalue %1842[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2129 = llvm.extractvalue %1842[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2130 = llvm.extractvalue %1842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2131 = llvm.extractvalue %1842[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2132 = llvm.mlir.constant(0 : i32) : i32
    %2133 = nvvm.read.ptx.sreg.tid.x : i32
    %2134 = llvm.mlir.constant(127 : i32) : i32
    %2135 = llvm.and %2133, %2134 : i32
    %2136 = llvm.mlir.constant(32 : i32) : i32
    %2137 = llvm.urem %2135, %2136 : i32
    %2138 = llvm.udiv %2135, %2136 : i32
    %2139 = llvm.mlir.constant(0 : i32) : i32
    %2140 = llvm.mlir.constant(0 : i32) : i32
    %2141 = llvm.mlir.constant(0 : i32) : i32
    %2142 = llvm.mlir.constant(0 : i32) : i32
    %2143 = llvm.shl %2137, %2142 : i32
    %2144 = llvm.or %2141, %2143 : i32
    %2145 = llvm.mlir.constant(5 : i32) : i32
    %2146 = llvm.shl %2138, %2145 : i32
    %2147 = llvm.or %2144, %2146 : i32
    %2148 = llvm.mlir.constant(3 : i32) : i32
    %2149 = llvm.and %2147, %2148 : i32
    %2150 = llvm.mlir.constant(10 : i32) : i32
    %2151 = llvm.shl %2149, %2150 : i32
    %2152 = llvm.mlir.constant(3 : i32) : i32
    %2153 = llvm.and %2147, %2152 : i32
    %2154 = llvm.mlir.constant(5 : i32) : i32
    %2155 = llvm.shl %2153, %2154 : i32
    %2156 = llvm.mlir.constant(124 : i32) : i32
    %2157 = llvm.and %2147, %2156 : i32
    %2158 = llvm.mlir.constant(1 : i32) : i32
    %2159 = llvm.shl %2157, %2158 : i32
    %2160 = llvm.mlir.constant(0 : i32) : i32
    %2161 = llvm.xor %2155, %2159 : i32
    %2162 = llvm.or disjoint %2151, %2161 : i32
    %2163 = llvm.xor %2140, %2162 : i32
    %2164 = llvm.mlir.constant(4 : i32) : i32
    %2165 = llvm.mul %2132, %2164 : i32
    %2166 = llvm.xor %2163, %2165 : i32
    %2167 = llvm.mlir.constant(0 : i32) : i32
    %2168 = llvm.xor %2166, %2167 : i32
    %2169 = llvm.mlir.constant(0 : i32) : i32
    %2170 = llvm.add %2168, %2169 : i32
    %2171 = llvm.getelementptr inbounds %2123[%2170] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2172 = llvm.mlir.undef : vector<2xf32>
    %2173 = llvm.mlir.constant(0 : i32) : i32
    %2174 = llvm.insertelement %2124, %2172[%2173 : i32] : vector<2xf32>
    %2175 = llvm.mlir.constant(1 : i32) : i32
    %2176 = llvm.insertelement %2128, %2174[%2175 : i32] : vector<2xf32>
    %2177 = llvm.mlir.constant(true) : i1
    %2178 = llvm.mlir.constant(0 : i32) : i32
    %2179 = llvm.extractelement %2176[%2178 : i32] : vector<2xf32>
    %2180 = llvm.mlir.constant(1 : i32) : i32
    %2181 = llvm.extractelement %2176[%2180 : i32] : vector<2xf32>
    %2182 = llvm.bitcast %2179 : f32 to i32
    %2183 = llvm.bitcast %2181 : f32 to i32
    %2184 = llvm.mlir.undef : vector<2xi32>
    %2185 = llvm.mlir.constant(0 : i32) : i32
    %2186 = llvm.insertelement %2182, %2184[%2185 : i32] : vector<2xi32>
    %2187 = llvm.mlir.constant(1 : i32) : i32
    %2188 = llvm.insertelement %2183, %2186[%2187 : i32] : vector<2xi32>
    llvm.store %2188, %2171 {alignment = 8 : i64} : vector<2xi32>, !llvm.ptr<3>
    %2189 = llvm.mlir.constant(256 : i32) : i32
    %2190 = llvm.add %2168, %2189 : i32
    %2191 = llvm.getelementptr inbounds %2123[%2190] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2192 = llvm.mlir.undef : vector<2xf32>
    %2193 = llvm.mlir.constant(0 : i32) : i32
    %2194 = llvm.insertelement %2125, %2192[%2193 : i32] : vector<2xf32>
    %2195 = llvm.mlir.constant(1 : i32) : i32
    %2196 = llvm.insertelement %2129, %2194[%2195 : i32] : vector<2xf32>
    %2197 = llvm.mlir.constant(true) : i1
    %2198 = llvm.mlir.constant(0 : i32) : i32
    %2199 = llvm.extractelement %2196[%2198 : i32] : vector<2xf32>
    %2200 = llvm.mlir.constant(1 : i32) : i32
    %2201 = llvm.extractelement %2196[%2200 : i32] : vector<2xf32>
    %2202 = llvm.bitcast %2199 : f32 to i32
    %2203 = llvm.bitcast %2201 : f32 to i32
    %2204 = llvm.mlir.undef : vector<2xi32>
    %2205 = llvm.mlir.constant(0 : i32) : i32
    %2206 = llvm.insertelement %2202, %2204[%2205 : i32] : vector<2xi32>
    %2207 = llvm.mlir.constant(1 : i32) : i32
    %2208 = llvm.insertelement %2203, %2206[%2207 : i32] : vector<2xi32>
    llvm.store %2208, %2191 {alignment = 8 : i64} : vector<2xi32>, !llvm.ptr<3>
    %2209 = llvm.mlir.constant(512 : i32) : i32
    %2210 = llvm.add %2168, %2209 : i32
    %2211 = llvm.getelementptr inbounds %2123[%2210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2212 = llvm.mlir.undef : vector<2xf32>
    %2213 = llvm.mlir.constant(0 : i32) : i32
    %2214 = llvm.insertelement %2126, %2212[%2213 : i32] : vector<2xf32>
    %2215 = llvm.mlir.constant(1 : i32) : i32
    %2216 = llvm.insertelement %2130, %2214[%2215 : i32] : vector<2xf32>
    %2217 = llvm.mlir.constant(true) : i1
    %2218 = llvm.mlir.constant(0 : i32) : i32
    %2219 = llvm.extractelement %2216[%2218 : i32] : vector<2xf32>
    %2220 = llvm.mlir.constant(1 : i32) : i32
    %2221 = llvm.extractelement %2216[%2220 : i32] : vector<2xf32>
    %2222 = llvm.bitcast %2219 : f32 to i32
    %2223 = llvm.bitcast %2221 : f32 to i32
    %2224 = llvm.mlir.undef : vector<2xi32>
    %2225 = llvm.mlir.constant(0 : i32) : i32
    %2226 = llvm.insertelement %2222, %2224[%2225 : i32] : vector<2xi32>
    %2227 = llvm.mlir.constant(1 : i32) : i32
    %2228 = llvm.insertelement %2223, %2226[%2227 : i32] : vector<2xi32>
    llvm.store %2228, %2211 {alignment = 8 : i64} : vector<2xi32>, !llvm.ptr<3>
    %2229 = llvm.mlir.constant(768 : i32) : i32
    %2230 = llvm.add %2168, %2229 : i32
    %2231 = llvm.getelementptr inbounds %2123[%2230] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2232 = llvm.mlir.undef : vector<2xf32>
    %2233 = llvm.mlir.constant(0 : i32) : i32
    %2234 = llvm.insertelement %2127, %2232[%2233 : i32] : vector<2xf32>
    %2235 = llvm.mlir.constant(1 : i32) : i32
    %2236 = llvm.insertelement %2131, %2234[%2235 : i32] : vector<2xf32>
    %2237 = llvm.mlir.constant(true) : i1
    %2238 = llvm.mlir.constant(0 : i32) : i32
    %2239 = llvm.extractelement %2236[%2238 : i32] : vector<2xf32>
    %2240 = llvm.mlir.constant(1 : i32) : i32
    %2241 = llvm.extractelement %2236[%2240 : i32] : vector<2xf32>
    %2242 = llvm.bitcast %2239 : f32 to i32
    %2243 = llvm.bitcast %2241 : f32 to i32
    %2244 = llvm.mlir.undef : vector<2xi32>
    %2245 = llvm.mlir.constant(0 : i32) : i32
    %2246 = llvm.insertelement %2242, %2244[%2245 : i32] : vector<2xi32>
    %2247 = llvm.mlir.constant(1 : i32) : i32
    %2248 = llvm.insertelement %2243, %2246[%2247 : i32] : vector<2xi32>
    llvm.store %2248, %2231 {alignment = 8 : i64} : vector<2xi32>, !llvm.ptr<3>
    nvvm.barrier0
    %2249 = nvvm.read.ptx.sreg.tid.x : i32
    %2250 = llvm.mlir.constant(127 : i32) : i32
    %2251 = llvm.and %2249, %2250 : i32
    %2252 = llvm.mlir.constant(32 : i32) : i32
    %2253 = llvm.urem %2251, %2252 : i32
    %2254 = llvm.udiv %2251, %2252 : i32
    %2255 = llvm.mlir.constant(0 : i32) : i32
    %2256 = llvm.mlir.constant(0 : i32) : i32
    %2257 = llvm.mlir.constant(0 : i32) : i32
    %2258 = llvm.mlir.constant(0 : i32) : i32
    %2259 = llvm.shl %2253, %2258 : i32
    %2260 = llvm.or %2257, %2259 : i32
    %2261 = llvm.mlir.constant(5 : i32) : i32
    %2262 = llvm.shl %2254, %2261 : i32
    %2263 = llvm.or %2260, %2262 : i32
    %2264 = llvm.mlir.constant(127 : i32) : i32
    %2265 = llvm.and %2263, %2264 : i32
    %2266 = llvm.mlir.constant(3 : i32) : i32
    %2267 = llvm.shl %2265, %2266 : i32
    %2268 = llvm.mlir.constant(0 : i32) : i32
    %2269 = llvm.mlir.constant(0 : i32) : i32
    %2270 = llvm.or disjoint %2267, %2269 : i32
    %2271 = llvm.xor %2256, %2270 : i32
    %2272 = llvm.mlir.constant(4 : i32) : i32
    %2273 = llvm.mul %2132, %2272 : i32
    %2274 = llvm.xor %2271, %2273 : i32
    %2275 = llvm.mlir.constant(0 : i32) : i32
    %2276 = llvm.xor %2274, %2275 : i32
    %2277 = llvm.mlir.constant(0 : i32) : i32
    %2278 = llvm.add %2276, %2277 : i32
    %2279 = llvm.getelementptr inbounds %2123[%2278] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2280 = llvm.mlir.constant(true) : i1
    %2281 = llvm.load %2279 {alignment = 8 : i64} : !llvm.ptr<3> -> vector<2xi32>
    %2282 = llvm.mlir.undef : !llvm.struct<(i32, i32)>
    %2283 = llvm.mlir.constant(0 : i32) : i32
    %2284 = llvm.extractelement %2281[%2283 : i32] : vector<2xi32>
    %2285 = llvm.insertvalue %2284, %2282[0] : !llvm.struct<(i32, i32)> 
    %2286 = llvm.mlir.constant(1 : i32) : i32
    %2287 = llvm.extractelement %2281[%2286 : i32] : vector<2xi32>
    %2288 = llvm.insertvalue %2287, %2285[1] : !llvm.struct<(i32, i32)> 
    %2289 = llvm.extractvalue %2288[0] : !llvm.struct<(i32, i32)> 
    %2290 = llvm.extractvalue %2288[1] : !llvm.struct<(i32, i32)> 
    %2291 = llvm.mlir.undef : vector<2xi32>
    %2292 = llvm.mlir.constant(0 : i32) : i32
    %2293 = llvm.insertelement %2289, %2291[%2292 : i32] : vector<2xi32>
    %2294 = llvm.mlir.constant(1 : i32) : i32
    %2295 = llvm.insertelement %2290, %2293[%2294 : i32] : vector<2xi32>
    %2296 = llvm.mlir.constant(0 : i32) : i32
    %2297 = llvm.extractelement %2295[%2296 : i32] : vector<2xi32>
    %2298 = llvm.mlir.constant(1 : i32) : i32
    %2299 = llvm.extractelement %2295[%2298 : i32] : vector<2xi32>
    %2300 = llvm.bitcast %2297 : i32 to f32
    %2301 = llvm.bitcast %2299 : i32 to f32
    %2302 = llvm.mlir.undef : vector<2xf32>
    %2303 = llvm.mlir.constant(0 : i32) : i32
    %2304 = llvm.insertelement %2300, %2302[%2303 : i32] : vector<2xf32>
    %2305 = llvm.mlir.constant(1 : i32) : i32
    %2306 = llvm.insertelement %2301, %2304[%2305 : i32] : vector<2xf32>
    %2307 = llvm.mlir.constant(0 : i32) : i32
    %2308 = llvm.extractelement %2306[%2307 : i32] : vector<2xf32>
    %2309 = llvm.mlir.constant(1 : i32) : i32
    %2310 = llvm.extractelement %2306[%2309 : i32] : vector<2xf32>
    %2311 = llvm.mlir.constant(1056 : i32) : i32
    %2312 = llvm.xor %2274, %2311 : i32
    %2313 = llvm.mlir.constant(0 : i32) : i32
    %2314 = llvm.add %2312, %2313 : i32
    %2315 = llvm.getelementptr inbounds %2123[%2314] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2316 = llvm.mlir.constant(true) : i1
    %2317 = llvm.load %2315 {alignment = 8 : i64} : !llvm.ptr<3> -> vector<2xi32>
    %2318 = llvm.mlir.undef : !llvm.struct<(i32, i32)>
    %2319 = llvm.mlir.constant(0 : i32) : i32
    %2320 = llvm.extractelement %2317[%2319 : i32] : vector<2xi32>
    %2321 = llvm.insertvalue %2320, %2318[0] : !llvm.struct<(i32, i32)> 
    %2322 = llvm.mlir.constant(1 : i32) : i32
    %2323 = llvm.extractelement %2317[%2322 : i32] : vector<2xi32>
    %2324 = llvm.insertvalue %2323, %2321[1] : !llvm.struct<(i32, i32)> 
    %2325 = llvm.extractvalue %2324[0] : !llvm.struct<(i32, i32)> 
    %2326 = llvm.extractvalue %2324[1] : !llvm.struct<(i32, i32)> 
    %2327 = llvm.mlir.undef : vector<2xi32>
    %2328 = llvm.mlir.constant(0 : i32) : i32
    %2329 = llvm.insertelement %2325, %2327[%2328 : i32] : vector<2xi32>
    %2330 = llvm.mlir.constant(1 : i32) : i32
    %2331 = llvm.insertelement %2326, %2329[%2330 : i32] : vector<2xi32>
    %2332 = llvm.mlir.constant(0 : i32) : i32
    %2333 = llvm.extractelement %2331[%2332 : i32] : vector<2xi32>
    %2334 = llvm.mlir.constant(1 : i32) : i32
    %2335 = llvm.extractelement %2331[%2334 : i32] : vector<2xi32>
    %2336 = llvm.bitcast %2333 : i32 to f32
    %2337 = llvm.bitcast %2335 : i32 to f32
    %2338 = llvm.mlir.undef : vector<2xf32>
    %2339 = llvm.mlir.constant(0 : i32) : i32
    %2340 = llvm.insertelement %2336, %2338[%2339 : i32] : vector<2xf32>
    %2341 = llvm.mlir.constant(1 : i32) : i32
    %2342 = llvm.insertelement %2337, %2340[%2341 : i32] : vector<2xf32>
    %2343 = llvm.mlir.constant(0 : i32) : i32
    %2344 = llvm.extractelement %2342[%2343 : i32] : vector<2xf32>
    %2345 = llvm.mlir.constant(1 : i32) : i32
    %2346 = llvm.extractelement %2342[%2345 : i32] : vector<2xf32>
    %2347 = llvm.mlir.constant(2112 : i32) : i32
    %2348 = llvm.xor %2274, %2347 : i32
    %2349 = llvm.mlir.constant(0 : i32) : i32
    %2350 = llvm.add %2348, %2349 : i32
    %2351 = llvm.getelementptr inbounds %2123[%2350] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2352 = llvm.mlir.constant(true) : i1
    %2353 = llvm.load %2351 {alignment = 8 : i64} : !llvm.ptr<3> -> vector<2xi32>
    %2354 = llvm.mlir.undef : !llvm.struct<(i32, i32)>
    %2355 = llvm.mlir.constant(0 : i32) : i32
    %2356 = llvm.extractelement %2353[%2355 : i32] : vector<2xi32>
    %2357 = llvm.insertvalue %2356, %2354[0] : !llvm.struct<(i32, i32)> 
    %2358 = llvm.mlir.constant(1 : i32) : i32
    %2359 = llvm.extractelement %2353[%2358 : i32] : vector<2xi32>
    %2360 = llvm.insertvalue %2359, %2357[1] : !llvm.struct<(i32, i32)> 
    %2361 = llvm.extractvalue %2360[0] : !llvm.struct<(i32, i32)> 
    %2362 = llvm.extractvalue %2360[1] : !llvm.struct<(i32, i32)> 
    %2363 = llvm.mlir.undef : vector<2xi32>
    %2364 = llvm.mlir.constant(0 : i32) : i32
    %2365 = llvm.insertelement %2361, %2363[%2364 : i32] : vector<2xi32>
    %2366 = llvm.mlir.constant(1 : i32) : i32
    %2367 = llvm.insertelement %2362, %2365[%2366 : i32] : vector<2xi32>
    %2368 = llvm.mlir.constant(0 : i32) : i32
    %2369 = llvm.extractelement %2367[%2368 : i32] : vector<2xi32>
    %2370 = llvm.mlir.constant(1 : i32) : i32
    %2371 = llvm.extractelement %2367[%2370 : i32] : vector<2xi32>
    %2372 = llvm.bitcast %2369 : i32 to f32
    %2373 = llvm.bitcast %2371 : i32 to f32
    %2374 = llvm.mlir.undef : vector<2xf32>
    %2375 = llvm.mlir.constant(0 : i32) : i32
    %2376 = llvm.insertelement %2372, %2374[%2375 : i32] : vector<2xf32>
    %2377 = llvm.mlir.constant(1 : i32) : i32
    %2378 = llvm.insertelement %2373, %2376[%2377 : i32] : vector<2xf32>
    %2379 = llvm.mlir.constant(0 : i32) : i32
    %2380 = llvm.extractelement %2378[%2379 : i32] : vector<2xf32>
    %2381 = llvm.mlir.constant(1 : i32) : i32
    %2382 = llvm.extractelement %2378[%2381 : i32] : vector<2xf32>
    %2383 = llvm.mlir.constant(3168 : i32) : i32
    %2384 = llvm.xor %2274, %2383 : i32
    %2385 = llvm.mlir.constant(0 : i32) : i32
    %2386 = llvm.add %2384, %2385 : i32
    %2387 = llvm.getelementptr inbounds %2123[%2386] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2388 = llvm.mlir.constant(true) : i1
    %2389 = llvm.load %2387 {alignment = 8 : i64} : !llvm.ptr<3> -> vector<2xi32>
    %2390 = llvm.mlir.undef : !llvm.struct<(i32, i32)>
    %2391 = llvm.mlir.constant(0 : i32) : i32
    %2392 = llvm.extractelement %2389[%2391 : i32] : vector<2xi32>
    %2393 = llvm.insertvalue %2392, %2390[0] : !llvm.struct<(i32, i32)> 
    %2394 = llvm.mlir.constant(1 : i32) : i32
    %2395 = llvm.extractelement %2389[%2394 : i32] : vector<2xi32>
    %2396 = llvm.insertvalue %2395, %2393[1] : !llvm.struct<(i32, i32)> 
    %2397 = llvm.extractvalue %2396[0] : !llvm.struct<(i32, i32)> 
    %2398 = llvm.extractvalue %2396[1] : !llvm.struct<(i32, i32)> 
    %2399 = llvm.mlir.undef : vector<2xi32>
    %2400 = llvm.mlir.constant(0 : i32) : i32
    %2401 = llvm.insertelement %2397, %2399[%2400 : i32] : vector<2xi32>
    %2402 = llvm.mlir.constant(1 : i32) : i32
    %2403 = llvm.insertelement %2398, %2401[%2402 : i32] : vector<2xi32>
    %2404 = llvm.mlir.constant(0 : i32) : i32
    %2405 = llvm.extractelement %2403[%2404 : i32] : vector<2xi32>
    %2406 = llvm.mlir.constant(1 : i32) : i32
    %2407 = llvm.extractelement %2403[%2406 : i32] : vector<2xi32>
    %2408 = llvm.bitcast %2405 : i32 to f32
    %2409 = llvm.bitcast %2407 : i32 to f32
    %2410 = llvm.mlir.undef : vector<2xf32>
    %2411 = llvm.mlir.constant(0 : i32) : i32
    %2412 = llvm.insertelement %2408, %2410[%2411 : i32] : vector<2xf32>
    %2413 = llvm.mlir.constant(1 : i32) : i32
    %2414 = llvm.insertelement %2409, %2412[%2413 : i32] : vector<2xf32>
    %2415 = llvm.mlir.constant(0 : i32) : i32
    %2416 = llvm.extractelement %2414[%2415 : i32] : vector<2xf32>
    %2417 = llvm.mlir.constant(1 : i32) : i32
    %2418 = llvm.extractelement %2414[%2417 : i32] : vector<2xf32>
    %2419 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
    %2420 = llvm.insertvalue %2308, %2419[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2421 = llvm.insertvalue %2344, %2420[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2422 = llvm.insertvalue %2380, %2421[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2423 = llvm.insertvalue %2416, %2422[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2424 = llvm.insertvalue %2310, %2423[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2425 = llvm.insertvalue %2346, %2424[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2426 = llvm.insertvalue %2382, %2425[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2427 = llvm.insertvalue %2418, %2426[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    nvvm.barrier0
    %2428 = llvm.mlir.constant(0 : i32) : i32
    %2429 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %2430 = llvm.getelementptr %2429[%2428] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2431 = llvm.extractvalue %151[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2432 = llvm.extractvalue %151[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2433 = llvm.extractvalue %151[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2434 = llvm.extractvalue %151[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2435 = llvm.extractvalue %151[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2436 = llvm.extractvalue %151[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2437 = llvm.extractvalue %151[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2438 = llvm.extractvalue %151[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2439 = llvm.zext %2431 : i1 to i8
    %2440 = llvm.zext %2432 : i1 to i8
    %2441 = llvm.zext %2433 : i1 to i8
    %2442 = llvm.zext %2434 : i1 to i8
    %2443 = llvm.zext %2435 : i1 to i8
    %2444 = llvm.zext %2436 : i1 to i8
    %2445 = llvm.zext %2437 : i1 to i8
    %2446 = llvm.zext %2438 : i1 to i8
    %2447 = llvm.mlir.constant(0 : i32) : i32
    %2448 = nvvm.read.ptx.sreg.tid.x : i32
    %2449 = llvm.mlir.constant(127 : i32) : i32
    %2450 = llvm.and %2448, %2449 : i32
    %2451 = llvm.mlir.constant(32 : i32) : i32
    %2452 = llvm.urem %2450, %2451 : i32
    %2453 = llvm.udiv %2450, %2451 : i32
    %2454 = llvm.mlir.constant(0 : i32) : i32
    %2455 = llvm.mlir.constant(0 : i32) : i32
    %2456 = llvm.mlir.constant(0 : i32) : i32
    %2457 = llvm.mlir.constant(0 : i32) : i32
    %2458 = llvm.shl %2452, %2457 : i32
    %2459 = llvm.or %2456, %2458 : i32
    %2460 = llvm.mlir.constant(5 : i32) : i32
    %2461 = llvm.shl %2453, %2460 : i32
    %2462 = llvm.or %2459, %2461 : i32
    %2463 = llvm.mlir.constant(3 : i32) : i32
    %2464 = llvm.and %2462, %2463 : i32
    %2465 = llvm.mlir.constant(8 : i32) : i32
    %2466 = llvm.shl %2464, %2465 : i32
    %2467 = llvm.mlir.constant(3 : i32) : i32
    %2468 = llvm.and %2462, %2467 : i32
    %2469 = llvm.mlir.constant(5 : i32) : i32
    %2470 = llvm.shl %2468, %2469 : i32
    %2471 = llvm.mlir.constant(124 : i32) : i32
    %2472 = llvm.and %2462, %2471 : i32
    %2473 = llvm.mlir.constant(0 : i32) : i32
    %2474 = llvm.lshr %2472, %2473 : i32
    %2475 = llvm.mlir.constant(0 : i32) : i32
    %2476 = llvm.xor %2470, %2474 : i32
    %2477 = llvm.or disjoint %2466, %2476 : i32
    %2478 = llvm.xor %2455, %2477 : i32
    %2479 = llvm.mlir.constant(1 : i32) : i32
    %2480 = llvm.mul %2447, %2479 : i32
    %2481 = llvm.xor %2478, %2480 : i32
    %2482 = llvm.mlir.constant(0 : i32) : i32
    %2483 = llvm.xor %2481, %2482 : i32
    %2484 = llvm.mlir.constant(0 : i32) : i32
    %2485 = llvm.add %2483, %2484 : i32
    %2486 = llvm.getelementptr inbounds %2430[%2485] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2487 = llvm.mlir.undef : vector<4xi8>
    %2488 = llvm.mlir.constant(0 : i32) : i32
    %2489 = llvm.insertelement %2439, %2487[%2488 : i32] : vector<4xi8>
    %2490 = llvm.mlir.constant(1 : i32) : i32
    %2491 = llvm.insertelement %2443, %2489[%2490 : i32] : vector<4xi8>
    %2492 = llvm.mlir.constant(2 : i32) : i32
    %2493 = llvm.insertelement %2440, %2491[%2492 : i32] : vector<4xi8>
    %2494 = llvm.mlir.constant(3 : i32) : i32
    %2495 = llvm.insertelement %2444, %2493[%2494 : i32] : vector<4xi8>
    %2496 = llvm.mlir.constant(true) : i1
    llvm.store %2495, %2486 {alignment = 4 : i64} : vector<4xi8>, !llvm.ptr<3>
    %2497 = llvm.mlir.constant(128 : i32) : i32
    %2498 = llvm.add %2483, %2497 : i32
    %2499 = llvm.getelementptr inbounds %2430[%2498] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2500 = llvm.mlir.undef : vector<4xi8>
    %2501 = llvm.mlir.constant(0 : i32) : i32
    %2502 = llvm.insertelement %2441, %2500[%2501 : i32] : vector<4xi8>
    %2503 = llvm.mlir.constant(1 : i32) : i32
    %2504 = llvm.insertelement %2445, %2502[%2503 : i32] : vector<4xi8>
    %2505 = llvm.mlir.constant(2 : i32) : i32
    %2506 = llvm.insertelement %2442, %2504[%2505 : i32] : vector<4xi8>
    %2507 = llvm.mlir.constant(3 : i32) : i32
    %2508 = llvm.insertelement %2446, %2506[%2507 : i32] : vector<4xi8>
    %2509 = llvm.mlir.constant(true) : i1
    llvm.store %2508, %2499 {alignment = 4 : i64} : vector<4xi8>, !llvm.ptr<3>
    nvvm.barrier0
    %2510 = nvvm.read.ptx.sreg.tid.x : i32
    %2511 = llvm.mlir.constant(127 : i32) : i32
    %2512 = llvm.and %2510, %2511 : i32
    %2513 = llvm.mlir.constant(32 : i32) : i32
    %2514 = llvm.urem %2512, %2513 : i32
    %2515 = llvm.udiv %2512, %2513 : i32
    %2516 = llvm.mlir.constant(0 : i32) : i32
    %2517 = llvm.mlir.constant(0 : i32) : i32
    %2518 = llvm.mlir.constant(0 : i32) : i32
    %2519 = llvm.mlir.constant(0 : i32) : i32
    %2520 = llvm.shl %2514, %2519 : i32
    %2521 = llvm.or %2518, %2520 : i32
    %2522 = llvm.mlir.constant(5 : i32) : i32
    %2523 = llvm.shl %2515, %2522 : i32
    %2524 = llvm.or %2521, %2523 : i32
    %2525 = llvm.mlir.constant(31 : i32) : i32
    %2526 = llvm.and %2524, %2525 : i32
    %2527 = llvm.mlir.constant(2 : i32) : i32
    %2528 = llvm.shl %2526, %2527 : i32
    %2529 = llvm.mlir.constant(0 : i32) : i32
    %2530 = llvm.mlir.constant(32 : i32) : i32
    %2531 = llvm.and %2524, %2530 : i32
    %2532 = llvm.icmp "eq" %2531, %2529 : i32
    %2533 = llvm.mlir.constant(2 : i32) : i32
    %2534 = llvm.select %2532, %2529, %2533 : i1, i32
    %2535 = llvm.mlir.constant(64 : i32) : i32
    %2536 = llvm.and %2524, %2535 : i32
    %2537 = llvm.icmp "eq" %2536, %2529 : i32
    %2538 = llvm.mlir.constant(128 : i32) : i32
    %2539 = llvm.select %2537, %2529, %2538 : i1, i32
    %2540 = llvm.or disjoint %2534, %2539 : i32
    %2541 = llvm.or disjoint %2540, %2528 : i32
    %2542 = llvm.xor %2517, %2541 : i32
    %2543 = llvm.mlir.constant(1 : i32) : i32
    %2544 = llvm.mul %2447, %2543 : i32
    %2545 = llvm.xor %2542, %2544 : i32
    %2546 = llvm.mlir.constant(0 : i32) : i32
    %2547 = llvm.xor %2545, %2546 : i32
    %2548 = llvm.mlir.constant(0 : i32) : i32
    %2549 = llvm.add %2547, %2548 : i32
    %2550 = llvm.getelementptr inbounds %2430[%2549] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2551 = llvm.mlir.constant(true) : i1
    %2552 = llvm.load %2550 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %2553 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %2554 = llvm.mlir.constant(0 : i32) : i32
    %2555 = llvm.extractelement %2552[%2554 : i32] : vector<2xi8>
    %2556 = llvm.insertvalue %2555, %2553[0] : !llvm.struct<(i8, i8)> 
    %2557 = llvm.mlir.constant(1 : i32) : i32
    %2558 = llvm.extractelement %2552[%2557 : i32] : vector<2xi8>
    %2559 = llvm.insertvalue %2558, %2556[1] : !llvm.struct<(i8, i8)> 
    %2560 = llvm.extractvalue %2559[0] : !llvm.struct<(i8, i8)> 
    %2561 = llvm.extractvalue %2559[1] : !llvm.struct<(i8, i8)> 
    %2562 = llvm.mlir.undef : vector<2xi8>
    %2563 = llvm.mlir.constant(0 : i32) : i32
    %2564 = llvm.insertelement %2560, %2562[%2563 : i32] : vector<2xi8>
    %2565 = llvm.mlir.constant(1 : i32) : i32
    %2566 = llvm.insertelement %2561, %2564[%2565 : i32] : vector<2xi8>
    %2567 = llvm.mlir.constant(0 : i32) : i32
    %2568 = llvm.extractelement %2566[%2567 : i32] : vector<2xi8>
    %2569 = llvm.mlir.constant(1 : i32) : i32
    %2570 = llvm.extractelement %2566[%2569 : i32] : vector<2xi8>
    %2571 = llvm.mlir.constant(288 : i32) : i32
    %2572 = llvm.xor %2545, %2571 : i32
    %2573 = llvm.mlir.constant(0 : i32) : i32
    %2574 = llvm.add %2572, %2573 : i32
    %2575 = llvm.getelementptr inbounds %2430[%2574] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2576 = llvm.mlir.constant(true) : i1
    %2577 = llvm.load %2575 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %2578 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %2579 = llvm.mlir.constant(0 : i32) : i32
    %2580 = llvm.extractelement %2577[%2579 : i32] : vector<2xi8>
    %2581 = llvm.insertvalue %2580, %2578[0] : !llvm.struct<(i8, i8)> 
    %2582 = llvm.mlir.constant(1 : i32) : i32
    %2583 = llvm.extractelement %2577[%2582 : i32] : vector<2xi8>
    %2584 = llvm.insertvalue %2583, %2581[1] : !llvm.struct<(i8, i8)> 
    %2585 = llvm.extractvalue %2584[0] : !llvm.struct<(i8, i8)> 
    %2586 = llvm.extractvalue %2584[1] : !llvm.struct<(i8, i8)> 
    %2587 = llvm.mlir.undef : vector<2xi8>
    %2588 = llvm.mlir.constant(0 : i32) : i32
    %2589 = llvm.insertelement %2585, %2587[%2588 : i32] : vector<2xi8>
    %2590 = llvm.mlir.constant(1 : i32) : i32
    %2591 = llvm.insertelement %2586, %2589[%2590 : i32] : vector<2xi8>
    %2592 = llvm.mlir.constant(0 : i32) : i32
    %2593 = llvm.extractelement %2591[%2592 : i32] : vector<2xi8>
    %2594 = llvm.mlir.constant(1 : i32) : i32
    %2595 = llvm.extractelement %2591[%2594 : i32] : vector<2xi8>
    %2596 = llvm.mlir.constant(576 : i32) : i32
    %2597 = llvm.xor %2545, %2596 : i32
    %2598 = llvm.mlir.constant(0 : i32) : i32
    %2599 = llvm.add %2597, %2598 : i32
    %2600 = llvm.getelementptr inbounds %2430[%2599] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2601 = llvm.mlir.constant(true) : i1
    %2602 = llvm.load %2600 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %2603 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %2604 = llvm.mlir.constant(0 : i32) : i32
    %2605 = llvm.extractelement %2602[%2604 : i32] : vector<2xi8>
    %2606 = llvm.insertvalue %2605, %2603[0] : !llvm.struct<(i8, i8)> 
    %2607 = llvm.mlir.constant(1 : i32) : i32
    %2608 = llvm.extractelement %2602[%2607 : i32] : vector<2xi8>
    %2609 = llvm.insertvalue %2608, %2606[1] : !llvm.struct<(i8, i8)> 
    %2610 = llvm.extractvalue %2609[0] : !llvm.struct<(i8, i8)> 
    %2611 = llvm.extractvalue %2609[1] : !llvm.struct<(i8, i8)> 
    %2612 = llvm.mlir.undef : vector<2xi8>
    %2613 = llvm.mlir.constant(0 : i32) : i32
    %2614 = llvm.insertelement %2610, %2612[%2613 : i32] : vector<2xi8>
    %2615 = llvm.mlir.constant(1 : i32) : i32
    %2616 = llvm.insertelement %2611, %2614[%2615 : i32] : vector<2xi8>
    %2617 = llvm.mlir.constant(0 : i32) : i32
    %2618 = llvm.extractelement %2616[%2617 : i32] : vector<2xi8>
    %2619 = llvm.mlir.constant(1 : i32) : i32
    %2620 = llvm.extractelement %2616[%2619 : i32] : vector<2xi8>
    %2621 = llvm.mlir.constant(864 : i32) : i32
    %2622 = llvm.xor %2545, %2621 : i32
    %2623 = llvm.mlir.constant(0 : i32) : i32
    %2624 = llvm.add %2622, %2623 : i32
    %2625 = llvm.getelementptr inbounds %2430[%2624] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8
    %2626 = llvm.mlir.constant(true) : i1
    %2627 = llvm.load %2625 {alignment = 2 : i64} : !llvm.ptr<3> -> vector<2xi8>
    %2628 = llvm.mlir.undef : !llvm.struct<(i8, i8)>
    %2629 = llvm.mlir.constant(0 : i32) : i32
    %2630 = llvm.extractelement %2627[%2629 : i32] : vector<2xi8>
    %2631 = llvm.insertvalue %2630, %2628[0] : !llvm.struct<(i8, i8)> 
    %2632 = llvm.mlir.constant(1 : i32) : i32
    %2633 = llvm.extractelement %2627[%2632 : i32] : vector<2xi8>
    %2634 = llvm.insertvalue %2633, %2631[1] : !llvm.struct<(i8, i8)> 
    %2635 = llvm.extractvalue %2634[0] : !llvm.struct<(i8, i8)> 
    %2636 = llvm.extractvalue %2634[1] : !llvm.struct<(i8, i8)> 
    %2637 = llvm.mlir.undef : vector<2xi8>
    %2638 = llvm.mlir.constant(0 : i32) : i32
    %2639 = llvm.insertelement %2635, %2637[%2638 : i32] : vector<2xi8>
    %2640 = llvm.mlir.constant(1 : i32) : i32
    %2641 = llvm.insertelement %2636, %2639[%2640 : i32] : vector<2xi8>
    %2642 = llvm.mlir.constant(0 : i32) : i32
    %2643 = llvm.extractelement %2641[%2642 : i32] : vector<2xi8>
    %2644 = llvm.mlir.constant(1 : i32) : i32
    %2645 = llvm.extractelement %2641[%2644 : i32] : vector<2xi8>
    %2646 = llvm.trunc %2568 : i8 to i1
    %2647 = llvm.trunc %2593 : i8 to i1
    %2648 = llvm.trunc %2618 : i8 to i1
    %2649 = llvm.trunc %2643 : i8 to i1
    %2650 = llvm.trunc %2570 : i8 to i1
    %2651 = llvm.trunc %2595 : i8 to i1
    %2652 = llvm.trunc %2620 : i8 to i1
    %2653 = llvm.trunc %2645 : i8 to i1
    %2654 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>
    %2655 = llvm.insertvalue %2646, %2654[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2656 = llvm.insertvalue %2647, %2655[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2657 = llvm.insertvalue %2648, %2656[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2658 = llvm.insertvalue %2649, %2657[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2659 = llvm.insertvalue %2650, %2658[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2660 = llvm.insertvalue %2651, %2659[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2661 = llvm.insertvalue %2652, %2660[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2662 = llvm.insertvalue %2653, %2661[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2663 = llvm.extractvalue %2120[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2664 = llvm.extractvalue %2120[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2665 = llvm.extractvalue %2120[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2666 = llvm.extractvalue %2120[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2667 = llvm.extractvalue %2120[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2668 = llvm.extractvalue %2120[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2669 = llvm.extractvalue %2120[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2670 = llvm.extractvalue %2120[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> 
    %2671 = llvm.extractvalue %2427[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2672 = llvm.extractvalue %2427[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2673 = llvm.extractvalue %2427[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2674 = llvm.extractvalue %2427[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2675 = llvm.extractvalue %2427[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2676 = llvm.extractvalue %2427[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2677 = llvm.extractvalue %2427[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2678 = llvm.extractvalue %2427[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
    %2679 = llvm.extractvalue %2662[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2680 = llvm.extractvalue %2662[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2681 = llvm.extractvalue %2662[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2682 = llvm.extractvalue %2662[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2683 = llvm.extractvalue %2662[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2684 = llvm.extractvalue %2662[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2685 = llvm.extractvalue %2662[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2686 = llvm.extractvalue %2662[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> 
    %2687 = llvm.mlir.constant(0 : i32) : i32
    %2688 = nvvm.read.ptx.sreg.tid.x : i32
    %2689 = llvm.mlir.constant(127 : i32) : i32
    %2690 = llvm.and %2688, %2689 : i32
    %2691 = llvm.mlir.constant(32 : i32) : i32
    %2692 = llvm.urem %2690, %2691 : i32
    %2693 = llvm.udiv %2690, %2691 : i32
    %2694 = llvm.mlir.undef : vector<1xf32>
    %2695 = llvm.bitcast %2671 : f32 to f32
    %2696 = llvm.mlir.constant(0 : i32) : i32
    %2697 = llvm.insertelement %2695, %2694[%2696 : i32] : vector<1xf32>
    %2698 = llvm.bitcast %2697 : vector<1xf32> to i32
    %2699 = llvm.mlir.undef : vector<1xf32>
    %2700 = llvm.bitcast %2672 : f32 to f32
    %2701 = llvm.mlir.constant(0 : i32) : i32
    %2702 = llvm.insertelement %2700, %2699[%2701 : i32] : vector<1xf32>
    %2703 = llvm.bitcast %2702 : vector<1xf32> to i32
    %2704 = llvm.mlir.undef : vector<1xf32>
    %2705 = llvm.bitcast %2673 : f32 to f32
    %2706 = llvm.mlir.constant(0 : i32) : i32
    %2707 = llvm.insertelement %2705, %2704[%2706 : i32] : vector<1xf32>
    %2708 = llvm.bitcast %2707 : vector<1xf32> to i32
    %2709 = llvm.mlir.undef : vector<1xf32>
    %2710 = llvm.bitcast %2674 : f32 to f32
    %2711 = llvm.mlir.constant(0 : i32) : i32
    %2712 = llvm.insertelement %2710, %2709[%2711 : i32] : vector<1xf32>
    %2713 = llvm.bitcast %2712 : vector<1xf32> to i32
    %2714 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %2698, %2703, %2708, %2713, %2663, %2679 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void
    %2715 = llvm.mlir.undef : vector<1xf32>
    %2716 = llvm.bitcast %2675 : f32 to f32
    %2717 = llvm.mlir.constant(0 : i32) : i32
    %2718 = llvm.insertelement %2716, %2715[%2717 : i32] : vector<1xf32>
    %2719 = llvm.bitcast %2718 : vector<1xf32> to i32
    %2720 = llvm.mlir.undef : vector<1xf32>
    %2721 = llvm.bitcast %2676 : f32 to f32
    %2722 = llvm.mlir.constant(0 : i32) : i32
    %2723 = llvm.insertelement %2721, %2720[%2722 : i32] : vector<1xf32>
    %2724 = llvm.bitcast %2723 : vector<1xf32> to i32
    %2725 = llvm.mlir.undef : vector<1xf32>
    %2726 = llvm.bitcast %2677 : f32 to f32
    %2727 = llvm.mlir.constant(0 : i32) : i32
    %2728 = llvm.insertelement %2726, %2725[%2727 : i32] : vector<1xf32>
    %2729 = llvm.bitcast %2728 : vector<1xf32> to i32
    %2730 = llvm.mlir.undef : vector<1xf32>
    %2731 = llvm.bitcast %2678 : f32 to f32
    %2732 = llvm.mlir.constant(0 : i32) : i32
    %2733 = llvm.insertelement %2731, %2730[%2732 : i32] : vector<1xf32>
    %2734 = llvm.bitcast %2733 : vector<1xf32> to i32
    %2735 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b" %2719, %2724, %2729, %2734, %2667, %2683 : (i32, i32, i32, i32, !llvm.ptr<1>, i1) -> !llvm.void
    llvm.return
  }
}

